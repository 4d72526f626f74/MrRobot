local T, S = require('translations'), require('shared')
local VehModels = require('vehicle_models')
local VehicleHandling = require('vehicle_handling')
local Globals = require('script_globals')
local ScriptOffsets = require('offsets')
local Masks = require('masks')
local PVM = require('pvm')

local Offsets = ScriptOffsets.Vehicles.LSCustoms
local VehicleBitfield = ScriptOffsets.Vehicles.VehicleBitfield

pluto_class Vehicles
    AIHandling = {
        'AVERAGE',
        'TRUCK',
        'CRAP',
        'SPORTS_CAR'
    }

    function __construct(root)
        self.vehicles = root:list(T'Vehicles', {T'rvehicles'}, '')
        self.root = self.vehicles
        self.max_slots = 415

        self:CreateGiftingOptions()
        self:CreateMorsOptions()
        self:CreateCounterMeasures()
        self:CreateTunableOptions()
        self:CreateHandlingEditor()
        self:CreateProximityConcealment()
        self:CreatePVManager()

        self.horn_boost = self.root:list(T'Horn Boost', {T'rhornboost'}, T'Horn Boost')
        self.torque = self.root:list(T'Torque', {T'rvtorque'}, T'Torque')

        self.root:divider('')
        self.improved_wheelie = self.root:toggle(T'Improved Wheelie', {T'rvimprovedwheelie'}, T'Improves the wheelie handling of bikes, allowing you to wheelie at high speeds and lean back pretty far', function(state)
            if state then
                util.create_tick_handler(function()
                    local localplayer = players.localplayer()
                    local veh = players.localplayer_vehicle()
                    if localplayer:is_ped_in_any_vehicle() then
                        local ptr = veh.ptr
                        if ptr ~= 0 then
                            local CHandlingData = entities.vehicle_get_handling(ptr)
                            local CBikeHandlingData = entities.handling_get_subhandling(CHandlingData, 0)

                            if CBikeHandlingData ~= 0 then
                                memory.write_float(CBikeHandlingData + 0x14, self.improved_wheelie.value ? 25.0 : 13.0)
                                memory.write_float(CBikeHandlingData + 0x3C, self.improved_wheelie.value ? -60.0 : -1.0)
                                memory.write_float(CBikeHandlingData + 0x40, self.improved_wheelie.value ? 70.0 : 60.0)
                                
                                if not self.improved_wheelie.value then
                                    return false
                                end
                            end
                        end
                    end
                end)
            end
        end)

        self.bmx_superjump = self.root:toggle(T'BMX Super Jump', {T'rvbmxsuperjump'}, T'Allows you to jump higher on a bmx', function(state)
            if state then
                util.create_tick_handler(function()
                    local localplayer = players.localplayer()
                    local veh = players.localplayer_vehicle()
                    if localplayer:is_ped_in_any_vehicle() then
                        local ptr = veh.ptr
                        if ptr ~= 0 then
                            local CHandlingData = entities.vehicle_get_handling(ptr)
                            local CBikeHandlingData = entities.handling_get_subhandling(CHandlingData, 0)

                            if CBikeHandlingData ~= 0 then
                                memory.write_float(CBikeHandlingData + 0x58, self.bmx_superjump.value ? 20.0 : 5.0)
                                
                                if not self.bmx_superjump.value then
                                    return false
                                end
                            end
                        end
                    end
                end)
            end
        end)

        self.enable_kers = self.root:toggle(T'Enable Kers', {}, T'Enable kers boost for your vehicle', function(state)
            local localplayer = players.localplayer()
            local veh = players.localplayer_vehicle()
            if localplayer:is_ped_in_any_vehicle() then
                local ptr = veh.ptr
                local CHandlingData = entities.vehicle_get_handling(ptr)
                local addr = CHandlingData + 0x128
                memory.write_byte(addr, memory.bits:setbool(memory.read_byte(addr), 1 << 2, state))
                veh:set_vehicle_kers_allowed(true)
            end
        end)

        self.horn_boost:divider(T'Settings')
        self.horn_boost_speed = self.horn_boost:slider(T'Horn Boost Speed', {T'rhornboostspeed'}, T'Set the speed of the Horn Boost', 0, math.max_int, 100, 1, function(value) end)
        self.horn_boost_speed_rel = self.horn_boost:toggle(T'Horn Boost Speed Relative', {T'rhornboostrelspeed'}, T'Make the horn boost speed be added relative to your current speed', function() end)

        self.horn_boost:divider('')
        self.horn_boost_toggle = self.horn_boost:toggle_loop(T'Horn Boost', {T'rhornboost'}, T'Boost your vehicle with the horn', function(state)
            local localplayer = players.localplayer()
            local veh = players.localplayer_vehicle()
            if localplayer:is_ped_in_any_vehicle() then
                local speed = self.horn_boost_speed
                local speed_rel = self.horn_boost_speed_rel
                if player.is_player_pressing_horn(players.user()) then
                    if not speed_rel.value then
                        veh:set_vehicle_forward_speed(speed.value)
                    else
                        veh:set_vehicle_forward_speed(veh:get_entity_speed() + speed.value)
                    end
                end
            end
        end)

        self.root:toggle_loop(T'Drift', {}, T'Hold shift to drift', function()
            local localplayer = players.localplayer()
            local veh = players.localplayer_vehicle()
            if localplayer:is_ped_in_any_vehicle() then
                if util.is_key_down(0xA0) then
                    veh:set_drift_tyres(true)
                else
                    veh:set_drift_tyres(false)
                end
            end
            util.yield(120)
        end)

        self.root:toggle(T'Interior Light', {}, T'Enables the dashboard light within your vehicle', function(state)
            local localplayer = players.localplayer()
            local veh = players.localplayer_vehicle()
            if localplayer:is_ped_in_any_vehicle() then
                veh:set_vehicle_interiorlight(state)
                veh:set_vehicle_force_interiorlight(state)
            end
        end)

        self.root:toggle_loop(T'Demi God', {}, T'Make your car very very durable', function()
            local localplayer = players.localplayer()
            local veh = players.localplayer_vehicle()
            if veh.entity then
                veh:set_vehicle_strong(true)
                veh:set_vehicle_has_strong_axles(true)
                veh:set_vehicle_explodes_on_high_explosion_damage(false)
                memory.write_float(veh.ptr + 0x0284, math.max_int) -- max health
                memory.write_float(veh.ptr + 0x280, math.max_int) -- health
                memory.write_float(veh.ptr + 0x08E8, math.max_int) -- engine health
                memory.write_float(veh.ptr + 0x0824, math.max_int) -- petrol tank health
            end
        end)

        self.torque:toggle_loop(T'Set Torque Multiplier', {}, T'Set the torque multiplier of your vehicle', function()
            local localplayer = players.localplayer()
            local veh = players.localplayer_vehicle()
            if localplayer:is_ped_in_any_vehicle() then
                local torque = self.torque_multiplier
                veh:set_vehicle_cheat_power_increase(torque.value / 100)
            end
            util.yield(120)
        end)
        self.torque_multiplier = self.torque:slider_float(T'Torque Multiplier', {T'rtorquemultiplier'}, T'Set the torque multiplier of the vehicle', 0.0, math.max_float, 1.0 * 100, 1.0 * 100, function(value) end)

        self.root:divider('')
        self.root:text_input(T'Change License Plate', {T'rvmodlicenseplate'}, T'Change the license plate of your vehicle (works on personal vehicles too)', function(text)
            if not SCRIPT_CAN_CONTINUE then return end
            local localplayer = players.localplayer()
            local veh = localplayer:get_vehicle_ped_is_in()
            local personal = Network.GetPVFromNetworkID(players.user())
            if veh ~= personal then
                veh = S.NewVehicle(veh)
                veh:set_vehicle_number_plate_text(text)
            else
                local slot = memory.read_short(memory.script_global(Globals.ActivePVSlot))
                local data = memory.script_global(Globals:PersonalVehicleData(slot))
                local addr = data + Offsets.LicensePlate
                memory.write_string(addr, text)
            end
        end, '12ABC345')

        self.root:list_select(T'AIHandling', {}, T'Change the handling meta for your vehicle', self.AIHandling, 1, function(index)
            local value = self.AIHandling[index]
            local veh = players.localplayer_vehicle()
            if veh.entity ~= 0 then
                veh:set_vehicle_handling_override(value:joaat())
                util.toast(T'Changed handling to ' .. value)
            end
        end)

        local commands = {}
        local mapped = {
            { args = { T'Detach Windscreen', commands, T'Detach the windscreen of your vehicle' }, func = 'pop_out_vehicle_windscreen', func_args = nil },
            { args = { T'Pop Off Roof', commands, T'Pops off the roof, does not work for all vehicles (which is most of them)' }, func = 'pop_off_vehicle_roof_with_impulse', func_args = { 0.0, 0.0, 0.0 } },
            { args = { T'Fix Vehicle', commands, T'Fixes the vehicle, what else?' }, func = 'set_vehicle_fixed', func_args = nil },
            { args = { T'Fix Deformation', commands, T'Fixes deformation but doesn\'t restore the vehicles health' }, func = 'set_vehicle_deformation_fixed', func_args = nil },
            { args = { T'Roll Down Windows', commands, T'Roll down all the windows of your vehicle' }, func = 'roll_down_windows', func_args = nil },
        }

        for mapped as data do
            data.args[4] = function()
                local veh = players.localplayer_vehicle()
                if veh.entity ~= 0 then
                    local args = data.func_args
                    if args ~= nil then
                        veh[data.func](veh, table.unpack(args))
                    else
                        veh[data.func](veh)
                    end
                end
            end
            self.root:action(table.unpack(data.args))
        end
        mapped = nil
        commands = nil

        self.root:action(T'Roll Up Windows', {}, T'Opposite of rolling them down', function()
            local veh = players.localplayer_vehicle()
            if veh.entity ~= 0 then
                for i = 0, 7 do
                    veh:roll_up_window(i)
                end
            end
        end)

        self.root:action(T'Smash Windows', {}, T'Smash all the windows of your vehicle', function()
            local veh = players.localplayer_vehicle()
            if veh.entity ~= 0 then
                for i = 0, 7 do
                    veh:smash_vehicle_window(i)
                end
            end
        end)

        self.root:action(T'Fix Windows', {}, T'Fix all the windows of your vehicle', function()
            local veh = players.localplayer_vehicle()
            if veh.entity ~= 0 then
                for i = 0, 7 do
                    veh:fix_vehicle_window(i)
                end
            end
        end)

        self.root:action(T'Remove Windows', {}, T'Remove all the windows of your vehicle', function()
            local veh = players.localplayer_vehicle()
            if veh.entity ~= 0 then
                for i = 0, 7 do
                    veh:remove_vehicle_window(i)
                end
            end
        end)

        self.root:slider_float(T'Vehicle Headlights Multiplier', {T'rvehlightmultiplier'}, T'Set the multiplier for vehicle lights', 0.0, math.max_float, 1.0 * 100, 1.0 * 100, function(value) 
            local veh = players.localplayer_vehicle()
            if veh ~= 0 then
                veh:set_vehicle_light_multiplier(value / 100)
            end
        end)

        self.root:slider_float(T'Set Max Speed', {T'rmaxspeed'}, T'Set the max speed of the vehicle', 0.0, math.max_float, 0.0, 1.0 * 100, function(value) 
            local veh = players.localplayer_vehicle()
            if veh ~= 0 then
                veh:set_vehicle_max_speed(value / 100)
                veh:set_entity_max_speed(value / 100)
            end
        end)
    end

    function CreateGiftingOptions()
        self.gifting = self.vehicles:list(T'Gifting', {T'rgifting'}, T'Gifting')
        self.gifting:action(T'Gift Vehicle', {T'rgiftself'}, T'Improved version of Stand\'s gift vehicle (THIS DOES NOT WORK FOR OTHER PLAYERS)', function()
            local localplayer = players.localplayer()
            local veh = players.localplayer_vehicle()
            if not localplayer:is_ped_in_any_vehicle() then
                return util.toast(T'You are not in a vehicle')
            end
            local start = os.time() + 30
            local net_hash = network.network_hash_from_player_handle(players.user())

            veh:decor_set_int('MPBitset', veh:decor_get_int('MPBitset') | Masks.VehicleGifting)
            self:ToggleOwnerCheck(false)
            for { 'Player_Vehicle', 'Veh_Modded_By_Player' } as decor do veh:decor_set_int(decor, net_hash) end
            for { 'Previous_Owner', 'PV_Slot' } as decor do veh:decor_set_int(decor, 0) end
            veh:set_vehicle_is_stolen(false)

            repeat
                util.yield_once()
                if os.time() > start then
                    util.toast(T'Failed to gift vehicle, you took too long')
                    self:ToggleOwnerCheck(true)
                    util.stop_thread()
                end
            until players.is_in_interior(players.user())

            repeat
                util.yield_once()
            until not players.is_in_interior(players.user())
            util.yield(1000)

            if self.delete_vehicle:isValid() then
                self.delete_vehicle:trigger()
                util.yield_once()
                self.delete_vehicle:trigger()
            end
        end)

        self.delete_vehicle = self.gifting:action(T'Delete Invisible Vehicle', {}, T'Delete the annoying invisible car infront of your garage', function()
            for entities.get_all_vehicles_as_pointers() as ent do
                local coords = entities.get_position(ent)
                local player_coords = players.get_position(players.user())
                if coords:distance(player_coords) < 100 then
                    local veh = S.NewVehicle(entities.pointer_to_handle(ent))
                    if not veh:is_entity_visible() then
                        entities.delete_by_pointer(veh.ptr)
                        util.toast(T($'Deleted {veh.entity}'))
                    end
                end
            end
        end)

        self.fix_owner_check = self.gifting:action(T'Fix Owner Check', {}, T'Fix the owner check so that the game functions correctly (only use this if your personal vehicle is out but not showing on the map after using gifting)', function()
            self:ToggleOwnerCheck(true)
        end)
    end

    function CreateMorsOptions()
        self.mors = self.vehicles:list(T'Mors', {T'rmors'}, T'Mors')
        self.mors:divider('Settings')
        self.mors_respawn = self.mors:toggle(T'Respawn', {}, T'Should your vehicle respawn right next to you?', function(state) end)
        self.mors:divider('')

        self.mors_claim_all = self.mors:action(T'Claim All', {}, T'Reclaim all personal vehicles from mors mutual', function()
            for slot = 0, self.max_slots do
                self:ClaimVehicle(slot)
            end
        end)

        self.mors_claim_current = self.mors:action(T'Claim Current', {}, T'Reclaim your current personal vehicle from mors mutual', function()
            local slot = memory.read_short(memory.script_global(Globals.ActivePVSlot))
            self:ClaimVehicle(slot, self.mors_respawn.value)
        end)

        self.mors:divider('')
        self.mors:toggle_loop(T'Auto Claim All', {}, T'Automatically claim all vehicles', function()
            if self.mors_claim_all:isValid() then
                self.mors_claim_all:trigger()
            end
        end)

        self.mors:toggle_loop(T'Auto Claim Current', {}, T'Automatically claim your current vehicle', function()
            if self.mors_claim_current:isValid() then
                self.mors_claim_current:trigger()
            end
        end)
    end

    function CreateCounterMeasures()
        self.cm = self.vehicles:list(T'Counter Measures', {T'rcm'}, T'Counter Measures')
        self.flares_cm_offsets = {0, 0, 0}
        self.cm:action(T'Fire Flares', {}, T'Fire flare countermeasure (works on all vehicles)', function()
            local veh = players.localplayer_vehicle()
            local coords = veh:get_entity_coords()
            local heading = veh:get_entity_heading()
            local model = veh:get_entity_model()

            if ('oppressor2'):joaat() == model then
                self.flares_cm_offsets.x = 1
                self.flares_cm_offsets.y = 4
                self.flares_cm_offsets.z = 0.2
            else
                self.flares_cm_offsets.x = 3
                self.flares_cm_offsets.y = 4
                self.flares_cm_offsets.z = 0.2
            end

            local spawn_pos = object.get_offset_from_coord_and_heading_in_world_coords(coords.x, coords.y, coords.z, heading, -self.flares_cm_offsets.x, self.flares_cm_offsets.y, self.flares_cm_offsets.z)
            misc.shoot_single_bullet_between_coords_ignore_entity_new(spawn_pos.x, spawn_pos.y, spawn_pos.z, coords.x, coords.y, coords.z, 0, true, ('WEAPON_FLAREGUN'):joaat(), players.user(), true, false, -1, 0, false, true, 0, true, 1, 0, 0)
            spawn_pos = object.get_offset_from_coord_and_heading_in_world_coords(coords.x, coords.y, coords.z, heading, self.flares_cm_offsets.x, self.flares_cm_offsets.y, self.flares_cm_offsets.z)
            misc.shoot_single_bullet_between_coords_ignore_entity_new(spawn_pos.x, spawn_pos.y, spawn_pos.z, coords.x, coords.y, coords.z, 0, true, ('WEAPON_FLAREGUN'):joaat(), players.user(), true, false, -1, 0, false, true, 0, true, 1, 0, 0)
            audio.play_sound_from_entity(-1, 'flares_released', veh.entity, 'DLC_SM_Countermeasures_Sounds', true, 0)
        end)

        self.cm:action(T'Fire Chaff', {}, T'Fire chaff countermeasure (works on all vehicles)', function()
            local veh = players.localplayer_vehicle()
            if veh.entity then
                S:RequestNamedPtfxAsset('scr_sm_counter')
                local timeout = os.time() + 15
                graphics.start_networked_particle_fx_non_looped_on_entity('scr_sm_counter_chaff', veh.entity, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, false, false, false)
                veh:set_vehicle_allow_homing_missle_lockon_synced(false)

                util.create_tick_handler(function()
                    if os.time() > timeout then
                        veh:set_vehicle_allow_homing_missle_lockon_synced(true)
                        return false
                    end
                end)
            end
        end)

        self.cm:action(T'Refill Counter Measures', {}, T'Refill vehicle countermeasures for more countering', function()
            local veh = players.localplayer_vehicle()
            if veh.entity then
                veh:set_vehicle_countermeasure_ammo(math.max_int)
            end
        end)

        self.cm:action(T'Delete All Flares', {}, T'Delete flares', function()
            for entities.get_all_objects_as_pointers() as ent do
                local model = util.reverse_joaat(entities.get_model_hash(ent))
                if model:find('flare') then
                    entities.delete_by_pointer(ent)
                end
            end
        end)
    end

    function CreateTunableOptions()
        self.tunables = self.vehicles:list(T'Tunables', {T'rtunables'}, T'Tunables')
        local base = memory.script_global(262145)

        self.tunables:action(T'Remove Vehicle Sell Timer', {}, T'Remove the sell timer so you can sell as many vehicles as you want', function()
            stats.stat_set_int(('MPPLY_VHEICLE_SELL_TIMER'):joaat(), 0, true)
        end)

        self.tunables:toggle(T'Remove Sell Limitations', {}, T'Remove sell limitations so that you can sell any vehicle regardles of the value', function()
            memory.write_int(base + 0x578, state ? math.max_int : 50000)
            memory.write_int(base + 0x9530, state ? math.max_int : 1000000)
            memory.write_int(base + 0xDD28, state ? math.max_int : 1000000)
            memory.write_int(base + 0xDD20, state ? math.max_int : 1000000)
            memory.write_int(base + 0x27648, state ? 1 : 0)
            memory.write_int(base + 0xDCE8, state ? math.max_int : 1)
        end)
    end

    function CreateHandlingEditor()
        self.handling = self.vehicles:list(T'Handling', {T'rhandling'}, T'Handling', function()
            local children = self.handling:getChildren()
            if #children > 0 then
                for children as child do
                    if child:isValid() then
                        child:delete()
                    end
                end
            end

            local localplayer = players.localplayer()

            if not localplayer:is_ped_in_any_vehicle() then
                return util.toast(T'You are not in a vehicle')
            end

            local model_flags = self.handling:list(T'Model Flags', {}, T'Model flags')
            local handling_flags = self.handling:list(T'Handling Flags', {}, T'Handling flags')
            local damage_flags = self.handling:list(T'Damage Flags', {}, T'Damage flags')
            local advanced_flags = self.handling:list(T'Advanced Flags', {}, T'Advanced flags')
            local car_handling = self.handling:list(T'Car Handling', {}, T'Car handling')
            local bike_handling = self.handling:list(T'Bike Handling', {}, T'Bike handling')
            local flying_handling = self.handling:list(T'Flying Handling', {}, T'Flying handling')
            local boat_handling = self.handling:list(T'Boat Handling', {}, T'Boat handling')
            local sea_plane_handling = self.handling:list(T'Sea Plane Handling', {}, T'Sea plane handling')
            local submarine_handling = self.handling:list(T'Submarine Handling', {}, T'Submarine handling')
            local trailer_handling = self.handling:list(T'Trailer Handling', {}, T'Trailer handling')

            local veh = entities.get_user_vehicle_as_pointer()
            local CHandlingData = entities.vehicle_get_handling(veh)
            local CBikeHandlingData = entities.handling_get_subhandling(CHandlingData, 0)
            local CFlyingHandlingData = entities.handling_get_subhandling(CHandlingData, 1)
            local CBoatHandlingData = entities.handling_get_subhandling(CHandlingData, 3)
            local CSeaPlaneHandlingData = entities.handling_get_subhandling(CHandlingData, 4)
            local CSubmarineHandlingData = entities.handling_get_subhandling(CHandlingData, 5)
            local CTrailerHandlingData = entities.handling_get_subhandling(CHandlingData, 7)
            local CCarHandlingData = entities.handling_get_subhandling(CHandlingData, 8)

            advanced_flags.visible = CCarHandlingData & 0xFFFF ~= 0
            bike_handling.visible = CBikeHandlingData & 0xFFFF ~= 0
            flying_handling.visible = CFlyingHandlingData & 0xFFFF ~= 0
            boat_handling.visible = CBoatHandlingData & 0xFFFF ~= 0
            sea_plane_handling.visible = CSeaPlaneHandlingData & 0xFFFF ~= 0
            submarine_handling.visible = CSubmarineHandlingData & 0xFFFF ~= 0
            trailer_handling.visible = CTrailerHandlingData & 0xFFFF ~= 0

            local mapped = {
                { name = 'model', offset = VehicleHandling.MF_OFFSET, root = model_flags },
                { name = 'handling', offset = VehicleHandling.HF_OFFSET, root = handling_flags },
                { name = 'damage', offset = VehicleHandling.DF_OFFSET, root = damage_flags },
                { name = 'advanced', offset = VehicleHandling.CF_OFFSET, root = advanced_flags }
            }

            for mapped as data do
                if data.root:isValid() then
                    if data.root.visible then
                        for index, flag in pairs(VehicleHandling[data.name]) do
                            if not SCRIPT_CAN_CONTINUE then return end
                            local addr = CHandlingData + data.offset
                            data.root:toggle(flag.name, {}, flag.desc, function(state)
                                if not SCRIPT_CAN_CONTINUE then return end
                                memory.write_int(addr, memory.bits:setbool(memory.read_int(addr), flag.bit, state))
                            end, memory.read_int(CHandlingData + data.offset) & flag.bit == flag.bit)
                        end
                    end
                end
            end

            mapped = {
                { name = 'bike', root = bike_handling, base = CBikeHandlingData },
                { name = 'flying', root = flying_handling, base = CFlyingHandlingData },
                { name = 'boat', root = boat_handling, base = CBoatHandlingData },
                { name = 'sea_plane', root = sea_plane_handling, base = CSeaPlaneHandlingData },
                { name = 'submarine', root = submarine_handling, base = CSubmarineHandlingData },
                { name = 'trailer', root = trailer_handling, base = CTrailerHandlingData },
            }

            for mapped as data do
                if data.root:isValid() then
                    if data.root.visible then
                        for index = 1, #VehicleHandling[data.name] do
                            local handling_data = VehicleHandling[data.name][index]
                            local name, offset = handling_data[1], handling_data[2]
                            data.root:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(memory.read_float(data.base + offset) * 100), 1.0, function(value)
                                if not SCRIPT_CAN_CONTINUE then return end
                                memory.write_float(data.base + offset, value / 100)
                            end)
                        end
                    end
                end
            end

            if car_handling.visible then
                local state, err = pcall(function()
                    for index = 1, #VehicleHandling.ccarsub do
                        local handling_data = VehicleHandling.ccarsub[index]
                        local name, offset = handling_data[1], handling_data[2]
                        car_handling:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(memory.read_float(CHandlingData + offset) * 100), 1.0, function(value)
                            if not SCRIPT_CAN_CONTINUE then return end
                            memory.write_float(CHandlingData + offset, value / 100)
                        end)
                    end
    
                    for index = 1, #VehicleHandling.ccar do
                        local handling_data = VehicleHandling.ccar[index]
                        local name, offset = handling_data[1], handling_data[2]
                        if not name:find('nInitialDriveGears') then
                            car_handling:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(memory.read_float(CCarHandlingData + offset) * 100), 1.0, function(value)
                                if not SCRIPT_CAN_CONTINUE then return end
                                memory.write_float(CCarHandlingData + offset, value / 100)
                            end)
                        else
                            car_handling:slider(T(name), {T(name)}, '', 1, 10, memory.read_int(CCarHandlingData + offset), 1, function(value)
                                if not SCRIPT_CAN_CONTINUE then return end
                                memory.write_int(CCarHandlingData + offset, value)
                            end)
                        end
                    end
                end)
            end

            mapped = nil
        end)
    end

    function CreateProximityConcealment()
        self.proxy = self.vehicles:list(T'Proximity Concealment', {T'rproxy'}, T'Proximity Concealment')
        self.last_veh_coords = v3.new()

        self.proxy:toggle_loop(T'Proximity Concealment', {}, T'Proximity based denetworking of your personal vehicle, this will prevent the vehicle being synced with other players when you are outside of a certain proximity to your vehicle', function()
            local veh = S.NewVehicle(memory.read_int(memory.script_global(Globals.ActivePVHandle)))
            local proximity = self.proximity.value / 100

            if veh ~= -1 then
                local coords = veh:get_entity_coords()
                local player_coords = players.get_position(players.user())
                local dist = coords:distance(player_coords)

                if dist >= proximity then
                    if not network.network_is_entity_concealed(veh.entity) then
                        network.network_conceal_entity(veh.entity, true)
                        self.veh_last_coords = coords
                    end
                end

                if network.network_is_entity_concealed(veh.entity) then
                    if coords:distance(self.veh_last_coords) <= proximity then
                        network.network_conceal_entity(veh.entity, false)
                    end
                end
            end
        end)

        self.proximity = self.proxy:slider_float(T'Proximity', {T'rvproximity'}, T'Set the proximity for the concealment (set this value to 2 if you want the vehicle to appear only when you are right next to it)', 0.0, math.max_float, 50.0 * 100, 1.0 * 100, function(value) end)
    end

    function CreatePVManager()
        local manager = pluto_new PVM(self.root)
    end

    function ToggleOwnerCheck(state)
        memory.write_byte(memory.script_global(Globals.PVOwnershipBypass), state ? 1 : 0)
    end

    function ClaimVehicle(slot, respawn=false)
        local data = memory.script_global(Globals:PersonalVehicleData(slot))
        local addr = data + Offsets.VehicleBitfield
        local value = memory.read_byte(addr)
        if memory.bits:check(value, VehicleBitfield.Destroyed) or memory.bits:check(value, VehicleBitfield.Impounded) then
            local mask = VehicleBitfield.Request | VehicleBitfield.Destroyed | VehicleBitfield.Impounded
            value = memory.bits:clear(value, mask)
            memory.write_byte(addr, value)
            util.yield_once()
            if not respawn then
                memory.write_byte(addr, memory.bits:set(value, VehicleBitfield.Insured))
            else
                local mask = VehicleBitfield.Request | VehicleBitfield.Insured
                memory.write_byte(addr, memory.bits:set(value, mask))
            end
        end
    end
end

return Vehicles