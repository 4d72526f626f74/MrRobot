local T, S, H = require('translations'), require('shared'), require('handler')
local Bitfield = require('bitfield')
local VehModels = require('vehicle_models')
local Globals = require('script_globals')
local ScriptOffsets = require('offsets')
local Masks = require('masks')
local Bit, BitMask = S.Bit, S.BitMask

local CharSlot, PlayerID = S.CHAR_SLOT, S.PLAYER_ID
local Properties = {}
for k, v in pairs(S.Data.PropertyIds) do table.insert(Properties, k) end
Properties = S:SortTable(Properties, |a, b| -> a < b)

local Bits = ScriptOffsets.Online.Bits
local SpoofingOffsets = ScriptOffsets.Online.SpoofingOffsets
local VehicleOffsets = ScriptOffsets.Vehicles.LSCustoms
local Offsets = ScriptOffsets.Online.RequestOffsets
local KosatkaStats = ScriptOffsets.Online.KosatkaStats
local LesterLocate = ScriptOffsets.Online.LesterLocate

local TuneRef = menu.ref_by_path('Vehicle>Los Santos Customs>Upgrade')
local Settings = Bitfield.new(Bits.ExcludeSelf | Bits.ExcludeFriends)

pluto_class Online
    ScriptGlobal = S.ScriptGlobal
    ScriptLocal = S.ScriptLocal
    WriteByte = memory.write_byte
    WriteShort = memory.write_short
    WriteInt = memory.write_int
    WriteFloat = memory.write_float
    WriteString = memory.write_string
    ReadByte = memory.read_byte
    ReadShort = memory.read_short
    ReadInt = memory.read_int
    ReadFloat = memory.read_float
    ReadString = memory.read_string
    SetPackedStatBoolCode = S.SetPackedStatBoolCode
    GetFirstBlipInfoId = S.GetFirstBlipInfoId
    GetBlipInfoIdEntityIndex = S.GetBlipInfoIdEntityIndex
    GetPlayerPed = S.GetPlayerPed
    IsEntityAGhost = S.IsEntityAGhost
    NetToVeh = S.NetToVeh
    SetRemotePlayerAsGhost = S.SetRemotePlayerAsGhost
    AddBlipForEntity = S.AddBlipForEntity
    SetBlipSprite = S.SetBlipSprite
    SetBlipColour = S.SetBlipColour
    SetBlipScale = S.SetBlipScale
    SetBlipToPlayerName = S.SetBlipToPlayerName

    function __construct(root)
        self.root = root:list(T'Online', {T'ronline'}, T'Online')
        self.nightclub = self.root:list(T'Nightclub', {T'rnightclub'}, T'Nightclub')
        self.fake_notifications = self.root:list(T'Fake Notifications', {T'rfakenotif'}, T'Fake Notifications')
        self.services = self.root:list(T'Services', {T'rservices'}, T'Services')
        self.trolling = self.root:list(T'Trolling', {T'rtrolling'}, T'Trolling')
        self.spoofing = self.root:list(T'Spoofing', {T'rspoofing'}, T'Spoofing')
        self.ghosting = self.root:list(T'Ghosting', {T'rghosting'}, T'Ghosting')
        self.other = self.root:list(T'Other', {T'rother'}, T'Other')
        self.toxic = self.root:list(T'Toxic', {T'rtoxic'}, T'Toxic')
        self.casino = self.root:list(T'Casino', {T'rcasino'}, T'Casino')

        self.beast_blip = nil

        self:CreateNC()
        self:CreateFakeNotifs()
        self:CreateServices()
        self:CreateTrolling()
        self:CreateSpoofing()
        self:CreateGhosting()
        self:CreateOther()
        self:CreateToxic()
        self:CreateCasino()
    end

    function CreateNC()
        self.nightclub:toggle(T'Clear Nightclub', {}, 'Empty your nightclub', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:ClearNightclub(state)
            end
        end, self:IsNightclubCleared())

        self.nightclub:toggle(T'Turn Off Office Lights', {}, 'Turn off the lights in your office', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:DisableNightclubOfficeLights(state)
            end
        end, self:AreNightclubOfficeLightsDisabled())

        self.nightclub:toggle(T'Dry Ice', {}, 'Enable dry ice in your nightclub', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockNightclubDryIce(state)
            end
        end, self:IsNightclubDryIceUnlocked())

        self.nightclub:action(T'Upgrade Everything', {}, 'Unlock all upgrades in your nightclub', function()
            if SCRIPT_CAN_CONTINUE then
                self:UnlockNightclubUpgrades()
            end
        end)

        self.nightclub:action(T'Bypass Setup', {}, 'Bypass setup missions in your nightclub (does not always work!)', function()
            if SCRIPT_CAN_CONTINUE then
                self:BypassNightclubSetup()
            end
        end)
    end

    function CreateFakeNotifs()
        self.fake_notifications:divider(T'Settings')
        self.fn_exclude_self = self.fake_notifications:toggle(T'Exclude Self', {T'notifsexcludeself'}, T'Exclude self from the fake notifications', function(state) 
            if state then
                Settings:Set(Bits.ExcludeSelf)
            else
                Settings:Clear(Bits.ExcludeSelf)
            end
        end, Settings:IsSet(Bits.ExcludeSelf))

        self.fn_exclude_friends = self.fake_notifications:toggle(T'Exclude Friends', {T'notifsexcludefriends'}, T'Exclude friends from the fake notifications', function(state) 
            if state then
                Settings:Set(Bits.ExcludeFriends)
            else
                Settings:Clear(Bits.ExcludeFriends)
            end
        end, Settings:IsSet(Bits.ExcludeFriends))

        self.fake_notifications:divider('')

        self.fake_notifications:toggle_loop(T'Register CEO', {}, '', function()
            self:SendNotification(S.RegisterCEO)
            util.yield(100)
        end)

        self.fake_notifications:toggle_loop(T'Register MC', {}, '', function()
            self:SendNotification(S.RegisterMC)
            util.yield(100)
        end)

        self.fake_notifications:toggle_loop(T'Register VIP', {}, '', function()
            self:SendNotification(S.RegisterVIP)
            util.yield(100)
        end)

        self.fake_notifications:toggle_loop(T'Off Radar', {}, '', function()
            self:SendNotification(S.OffRadar)
            util.yield(100)
        end)

        self.fake_notifications:toggle_loop(T'Ghost Organisation', {}, '', function()
            self:SendNotification(S.GhostOrg)
            util.yield(100)
        end)

        self.fake_notifications:toggle_loop(T'Fake Mugger', {}, '', function()
            self:SendNotification(S.SuccessfullyMugged, math.random(S.MIN_INT, S.MAX_INT))
            util.yield(100)
        end)

        self.fake_notifications:toggle_loop(T'Fake EWO', {}, '', function()
            self:SendNotification(S.PlayerEwo)
            util.yield(100)
        end)

        self.fake_notifications:toggle_loop(T'Fake Destroyed Vehicle Cargo', {}, '', function()
            self:SendNotification(S.DestroyedVehicleCargo)
            util.yield(100)
        end)

        self.fake_notifications:toggle_loop(T'Fake Ghosted', {}, '', function()
            self:SendNotification(S.BecomeGhosted)
            util.yield(100)
        end)
    end

    function CreateServices()
        self.RequestBase = self.ScriptGlobal(Globals.RequestBase)
        self.AmPiMenuBase = self.ScriptGlobal(Globals.AmPiMenuBase)

        self.services:action(T'Request Nano Drone', {T'requestnanodrone'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('NanoDrone')
        end)

        self.services:action(T'Request RC Bandito', {T'requestbandito'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('RCBandito')
        end)

        self.services:action(T'Request RC Tank', {T'requesttank'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('RCTank')
        end)

        self.services:action(T'Request MOC', {T'requestmoc'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('MOC')
        end)

        self.services:action(T'Request Avenger', {T'requestavenger'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('Avenger')
        end)

        self.services:action(T'Request Acid Lab', {T'requestacidlab'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('AcidLab')
        end)

        self.services:action(T'Request Terrorbyte', {T'requestterrorbyte'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('Terrorbyte')
        end)

        self.services:action(T'Request Dinghy', {T'requestdinghy'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('Dinghy')
        end)

        self.services:action(T'Request Kosatka', {T'requestkosatka'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('Kosatka')
        end)

        self.services:action(T'Request Sparrow', {T'requestaprrow'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('Sparrow')
        end)

        self.services:action(T'Request Avisa', {T'requestavisa'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('Avisa')
        end)

        self.services:action(T'Request Ballistic Armor', {T'requestballisticarmor'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('BallisticArmor')
        end)

        self.services:action(T'Request Ammo Drop', {T'requestammodrop'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('AmmoDrop')
        end)

        self.services:action(T'Request Helicopter', {T'requestheli'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('Helicopter')
        end)

        self.services:action(T'Request Delivery Bike', {T'requestdeliverybike'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('DeliveryBike')
        end)

        self.services:action(T'Request Rat Bike', {T'requestratbike'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('RatBike')
        end)

        self.services:action(T'Request Avenger Thruster', {T'requestthruster'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('AvengerThruster')
        end)

        self.services:action(T'Request Airstrike', {T'requestairstrike'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('Airstrike')
        end)

        self.services:action(T'Request Backup Heli', {T'requestbackupheli'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('BackupHeli')
        end)

        self.services:action(T'Request Bullshark Testosterone', {T'requestbst'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('BST')
        end)

        self.services:action(T'Request Supplies', {T'requestsupplies'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('Supplies')
        end)

        self.services:action(T'Source Motorcycle', {T'sourcebike'}, 'It does something, the name probably tells you enough', function()
            self:RequestService('SourceMotorcycle')
        end)

        self.services:divider('')

        self.services:action(T'Return Sparrow', {T'returnsparrow'}, 'It does something, the name probably tells you enough', function()
            self:ReturnSparrow()
        end)

        self.services:action(T'Return Avisa', {T'returnavisa'}, 'It does something, the name probably tells you enough', function()
            self:ReturnAvisa()
        end)

        self.services:action(T'Return Avenger (Hangar)', {T'returnavengerhangar'}, 'It does something, the name probably tells you enough', function()
            self:ReturnAvenger('Hangar')
        end)

        self.services:action(T'Return Avenger (Facility)', {T'returnavengerfacility'}, 'It does something, the name probably tells you enough', function()
            self:ReturnAvenger('Facility')
        end)

        self.services:action(T'Return Avenger Thruster', {T'returnthruster'}, 'It does something, the name probably tells you enough', function()
            self:ReturnAvengerThruster()
        end)

        self.services:action(T'Return Delivery Bike', {T'returndeliverybike'}, 'It does something, the name probably tells you enough', function()
            self:ReturnDeliveryBike()
        end)

        self.services:action(T'Return Acid Lab', {T'returnacidlab'}, 'It does something, the name probably tells you enough', function()
            self:ReturnAcidLab()
        end)

        self.services:action(T'Return Kosatka', {T'returnkosatka'}, 'It does something, the name probably tells you enough', function()
            self:ReturnKosatka()
        end)

        self.services:action(T'Return Terrorbyte', {T'returnterrorbyte'}, 'It does something, the name probably tells you enough', function()
            self:ReturnTerrorbyte()
        end)

        self.services:action(T'Return MOC', {T'returnmoc'}, 'It does something, the name probably tells you enough', function()
            self:ReturnMOC()
        end)

        self.services:action(T'Return Rat Bike', {T'returnratbike'}, 'It does something, the name probably tells you enough', function()
            self:ReturnRatBike()
        end)

        self.services:divider('')

        self.services:action(T'Locate Boat', {T'locateboat'}, 'It does something, the name probably tells you enough', function()
            self:LesterLocate(LesterLocate.Boat)
        end)

        self.services:action(T'Locate Heli', {T'locateheli'}, 'It does something, the name probably tells you enough', function()
            self:LesterLocate(LesterLocate.Heli)
        end)

        self.services:action(T'Locate Car', {T'locatecar'}, 'It does something, the name probably tells you enough', function()
            self:LesterLocate(LesterLocate.Car)
        end)

        self.services:action(T'Locate Plane', {T'locateplane'}, 'It does something, the name probably tells you enough', function()
            self:LesterLocate(LesterLocate.Plane)
        end)

        self.services:divider('')

        self.services_pegasus = self.services:list(T'Pegasus Vehicles', {T'pegasusvehicles'}, 'It does something, the name probably tells you enough')
        self.services_ceo_vehicles = self.services:list(T'CEO Vehicles', {T'ceovehicles'}, 'It does something, the name probably tells you enough')

        self.services_pegasus:text_input(T'Vehicle Model', {T'vehiclemodel'}, 'It does something, the name probably tells you enough', function(Model)
            local Hash = util.joaat(Model)
            self:RequestPegasusVehicle(Hash)
        end, 'adder')

        self.services_ceo_vehicles:text_input(T'Vehicle Model', {T'vehiclemodel'}, 'It does something, the name probably tells you enough', function(Model)
            local Hash = util.joaat(Model)
            self:RequestCEOVehicle(Hash)
        end, 'adder')

        self.pegasus_modellist = self.services_pegasus:list(T'Vehicle Model List', {T'vehiclemodellist'}, 'It does something, the name probably tells you enough')
        self.ceo_modellist = self.services_ceo_vehicles:list(T'Vehicle Model List', {T'vehiclemodellist'}, 'It does something, the name probably tells you enough')
        for VehModels as Model do
            self.pegasus_modellist:action(Model, {}, Model, function()
                local Hash = util.joaat(Model)
                self:RequestPegasusVehicle(Hash)
            end)

            self.ceo_modellist:action(Model, {}, Model, function()
                local Hash = util.joaat(Model)
                self:RequestCEOVehicle(Hash)
            end)
        end

        self.services:divider('')

        self.services:text_input(T'Rename Acid Lab', {T'renameacidlab'}, T'Rename your Acid Lab, what else?', function(Name)
            self:RenameAcidLab(Name)
        end, self:GetAcidLabName())

        self.money_remover = self.services:list(T'Money Remover', {T'moneyremover'}, T'Remove money')
        self.money_remover_amount = self.money_remover:text_input(T'Amount', {T'moneyremoveramount'}, T'Amount to remove', function(amount)
            
        end, '1')

        self.money_remover:action(T'Remove', {T'moneyremoverremove'}, T'Remove money', function()
            local Amount = tonumber(self.money_remover_amount.value)
            if Amount == nil then
                Amount = 0
            end
            self.WriteInt(self.ScriptGlobal(Globals.SinRemover), Amount)
        end)
    end

    function CreateTrolling()
        self.troll_bounty = self.trolling:list(T'Bounty', {T'rbounty'}, T'Anonymous undetectable unblockable bounties')
        self.troll_organisation = self.trolling:list(T'Organisation', {T'rorganisation'}, T'Organisation options')

        self.troll_bounty:divider('Settings')
        self.bounty_amount = self.troll_bounty:text_input(T'Bounty', {T'rbountyamount'}, T'How much will someone get for killing the player?', function() end, '10000')
        self.bounty_reward = self.troll_bounty:text_input(T'Reward', {T'rbountyreward'}, T'How much will the player get for killing someone? this will override the amount that the player will get (if you set a $1 bounty on someone and set the reward to $10000 they will get $10000 instead of $1)', function() end, '10000')
        self.troll_bounty:divider('')
        self.troll_bounty:action(T'Set Bounty', {}, T'Set a bounty on the entire session', function()
            local Amount = tonumber(self.bounty_amount.value)
            if Amount == nil then
                Amount = 0
            elseif Amount < 0 or Amount > 10000 then
                Amount = 0
            end
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    S:SetPlayerBounty(pid, 0, false)
                    S:SetPlayerBounty(pid, Amount, true)
                end
            end
        end)

        self.troll_bounty:action(T'Remove Bounty', {}, T'Remove bounty from all players in the session', function()
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    S:SetPlayerBounty(pid, 0, false)
                end
            end
        end)

        self.troll_bounty:toggle_loop(T'Loop Bounty', {T'rbountyloop'}, T'Loop a bounty on the entire session', function()
            local Amount = tonumber(self.bounty_amount.value)
            if Amount == nil then
                Amount = 0
            elseif Amount < 0 or Amount > 10000 then
                Amount = 0
            end
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    S:SetPlayerBounty(pid, Amount, true)
                    S:SetPlayerBountyReward(pid, Amount)
                end
            end
        end)

        self.troll_bounty:divider('')
        self.troll_bounty:toggle_loop(T'Set Bounty Reward', {T'rbountyrewardloop'}, T'Set a bounty reward on the entire session', function()
            local Amount = tonumber(self.bounty_reward.value)
            if Amount == nil then
                Amount = 0
            elseif Amount < 0 or Amount > 10000 then
                Amount = 0
            end
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    S:SetPlayerBountyReward(pid, Amount)
                end
            end
        end)

        self.troll_bounty:toggle_loop(T'Remove Bounty Reward', {T'rbountyrewardloop'}, T'Remove bounty reward from all players in the session', function()
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    S:SetPlayerBountyReward(pid, 0)
                end
            end
        end)

        self.troll_bounty:toggle_loop(T'Max Bounty Reward', {T'rbountyrewardloop'}, T'Set a max bounty reward on the entire session', function()
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    S:SetPlayerBountyReward(pid, 10000)
                end
            end
        end)

        self.troll_organisation:toggle_loop(T'Random Name', {}, T'Set your organisation name to something completely random', function()
            local Name = self.ScriptGlobal(Globals.OrganisationBase)
            self.WriteString(Name + 0x398, S:RandomOrgName(math.random(0, 98)))
        end)

        self.troll_organisation:toggle_loop(T'Random Player As Name', {}, T'Set your organisation name to a random player\'s name', function()
            local Name = self.ScriptGlobal(Globals.OrganisationBase)
            self.WriteString(Name + 0x398, players.get_name(S:GetRandomPlayer()))
        end)

        self.troll_organisation:text_input(T'Rename', {T'rrenameorg'}, T'', function(Name)
            local OrgName = self.ScriptGlobal(Globals.OrganisationBase)
            self.WriteString(OrgName + 0x398, Name)
        end, self.ReadString(self.ScriptGlobal(Globals.OrganisationBase) + 0x398))

        self.troll_organisation:action(T'Invite All', {}, T'Invite everyone to your organisation', function()
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    local G = self.ScriptGlobal(Globals.OrganisationInvite)
                    local EventArgs = {
                        -245642440, PlayerID, 1975684956162, 10000, 5989921060705796097, 1, 0, 0, self.ReadInt(G), self.ReadInt(G + 0x8)
                    }

                    for pid = 0, S.MAX_PLAYERS do
                        if pid ~= PlayerID then
                            util.trigger_script_event(1 << pid, EventArgs)
                        end
                    end
                end
            end
        end)

        self.trolling:divider('')
        self.trolling:toggle_loop(T'Anti-Ghosted', {}, T'Prevent anyone in the session from becoming ghosted to you (this will work on modders too)', function()
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    if pid ~= PlayerID then
                        local Ped = self.GetPlayerPed(pid)
                        if self.IsEntityAGhost(Ped) then
                            S:SetPlayerBounty(pid, -1, true)
                            util.yield_once()
                            S:SetPlayerBounty(pid, -1, false)
                        end
                    end
                end
            end
        end)

        self.trolling:toggle_loop(T'Block Passive Mode', {}, T'Prevent anyone in the session from going passive (this will work against modders too)', function()
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    if pid ~= PlayerID then
                        if not S:PlayerHasBounty(pid) then
                            S:SetPlayerBounty(pid, -1, true)
                        end
                    end
                end
            end
        end,
        function()
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    if pid ~= PlayerID then
                        if S:PlayerHasBounty(pid) then
                            S:SetPlayerBounty(pid, -1, false)
                        end
                    end
                end
            end
        end)
    end

    function CreateSpoofing()
        self.interior_spoofing = self.spoofing:list(T'Interior Spoofing', {T'rinteriorspoofing'}, T'Interior Spoofing')
        self.interior_choice = self.interior_spoofing:list_select(T'Interior', {T'interiorchoice'}, T'The interior to spoof to', Properties, 1, function(_) end)
        self.interior_spoofing:action(T'Spoof Interior', {}, T'Spoof your current interior to something else', function()
            local Interior = self.ScriptGlobal(Globals.Interior)
            local Index = self.interior_choice.value
            local InteriorID = S.Data.PropertyIds[Properties[Index]]
            local CurrentInterior = self.ReadByte(Interior)
            if CurrentInterior ~= -1 and CurrentInterior ~= InteriorID then
                self.WriteByte(Interior, -1)
                util.yield(1000)
                self.WriteByte(Interior, InteriorID)
            end 
        end)
        --[[self.interior_spoofing:action(T'Reset Spoofing', {}, T'Reset back to correct interior', function()
            local Interior = self.ScriptGlobal(Globals.Interior)
            self.WriteByte(Interior, -1)
            util.yield(1000)
            self.WriteByte(Interior, self.ReadByte(ModuleBase + 0x28C10F4))
        end)]]

        self.spoofing:action(T'Spoof Special Property Ownership', {}, T'Spoof ownership of special properties like Kosatka, Terrorbyte etc, this allows you to invite players to someone elses kosatka, terrorbyte', function()
            self.WriteInt(self.ScriptGlobal(Globals.SpoofSpecialPropertyOwner), PlayerID)
        end)

        self.hide_from_playerlist = self.spoofing:toggle(T'Hide From Player List', {}, T'Hide from the player list', function(state)
            if state then
                local G = self.ScriptGlobal(Globals.StatSpoofing)
                util.create_tick_handler(function()
                    if self.hide_from_playerlist.value == false then
                        self.WriteByte(G + SpoofingOffsets.HideFromPlayerList, 9)
                        return false
                    end
                    if self.ReadByte(G + SpoofingOffsets.HideFromPlayerList) ~= 8 then
                        self.WriteByte(G + SpoofingOffsets.HideFromPlayerList, 8)
                    end
                end)
            end
        end)

        self.stat_spoofing = self.spoofing:list(T'Stat Spoofing', {T'rstatspoofing'}, T'Stat Spoofing')
        self.s_total_money = self.stat_spoofing:list(T'Total Money', {}, T'Spoof your total money')
        self.s_total_wallet = self.stat_spoofing:list(T'Wallet Money', {}, T'Spoof your wallet money')
        self.s_rp = self.stat_spoofing:list(T'RP', {}, T'Spoof your RP')
        self.s_rank = self.stat_spoofing:list(T'Rank', {}, T'Spoof your rank')
        self.s_playerkills = self.stat_spoofing:list(T'Player Kills', {}, T'Spoof your player kills')
        self.s_playerdeaths = self.stat_spoofing:list(T'Player Deaths', {}, T'Spoof your player deaths')
        self.s_kd = self.stat_spoofing:list(T'K/D', {}, T'Spoof your K/D')

        local Amount = {
            TotalMoney = 0,
            WalletMoney = 0,
            RP = 0,
            Rank = 0,
            PlayerKills = 0,
            PlayerDeaths = 0,
            KD = 0
        }

        self.s_total_money:toggle_loop(T'Enable', {}, T'Spoof your total money', function()
            self.WriteInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.TotalMoney, Amount.TotalMoney)
        end)

        self.s_total_money:text_input(T'Value', {T'rtotalmoneyval'}, '', function(Value)
            Amount.TotalMoney = tonumber(Value)
        end, self.ReadInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.TotalMoney))

        self.s_total_wallet:toggle_loop(T'Enable', {}, T'Spoof your wallet money', function()
            self.WriteInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.Wallet, Amount.WalletMoney)
        end)

        self.s_total_wallet:text_input(T'Value', {T'rwalletmoneyval'}, '', function(Value)
            Amount.WalletMoney = tonumber(Value)
        end, self.ReadInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.Wallet))

        self.s_rp:toggle_loop(T'Enable', {}, T'Spoof your RP', function()
            self.WriteInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.RP, Amount.RP)
        end)

        self.s_rp:text_input(T'Value', {T'rrpval'}, '', function(Value)
            Amount.RP = tonumber(Value)
        end, self.ReadInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.RP))

        self.s_rank:toggle_loop(T'Enable', {}, T'Spoof your rank', function()
            self.WriteInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.RP, util.get_rp_required_for_rank(Amount.Rank))
            self.WriteInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.Rank, Amount.Rank)
        end)

        self.s_rank:text_input(T'Value', {T'rrankval'}, '', function(Value)
            Amount.Rank = tonumber(Value)
        end, self.ReadInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.Rank))

        self.s_playerkills:toggle_loop(T'Enable', {}, T'Spoof your player kills', function()
            self.WriteInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.PlayerKills, Amount.PlayerKills)
        end)

        self.s_playerkills:text_input(T'Value', {T'rplayerkillsval'}, '', function(Value)
            Amount.PlayerKills = tonumber(Value)
        end, self.ReadInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.PlayerKills))

        self.s_playerdeaths:toggle_loop(T'Enable', {}, T'Spoof your player deaths', function()
            self.WriteInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.PlayerDeaths, Amount.PlayerDeaths)
        end)

        self.s_playerdeaths:text_input(T'Value', {T'rplayerdeathsval'}, '', function(Value)
            Amount.PlayerDeaths = tonumber(Value)
        end, self.ReadInt(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.PlayerDeaths))

        self.s_kd:toggle_loop(T'Enable', {}, T'Spoof your K/D', function()
            self.WriteFloat(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.PlayerKD, Amount.KD)
        end)

        self.s_kd:text_input(T'Value', {T'rkdval'}, '', function(Value)
            Amount.KD = tonumber(Value)
        end, self.ReadFloat(self.ScriptGlobal(Globals.StatSpoofing) + SpoofingOffsets.PlayerKD))
    end

    function CreateGhosting()
        self.ghosting:toggle(T'All Players', {}, T'Ghost all players in the session', function(state)
            for pid = 0, S.MAX_PLAYERS do
                if S:PlayerInList(pid) then
                    self.SetRemotePlayerAsGhost(pid, state)
                end
            end
        end)
        self.ghosting:divider('')

        function H.GhostingLoop(pid, root)
            local Name = players.get_name(pid)
            if pid ~= PlayerID then
                local Ref = menu.ref_by_rel_path(self.ghosting, Name)
                if not Ref:isValid() then
                    self.ghosting:toggle(Name, {}, T'Ghost this player', function(state)
                        self.SetRemotePlayerAsGhost(pid, state)
                    end)
                end
            end
        end

        function H.GhostingRemovePlayer(pid, name)
            if pid ~= PlayerID then
                local Ref = menu.ref_by_rel_path(self.ghosting, name)
                if Ref:isValid() then
                    Ref:delete()
                end
            end
        end
    end

    function CreateOther()
        self.other:action(T'Toast The Beast', {}, T'Toast the name of the player that is the beast in the event', function()
            util.spoof_script('am_hunt_the_beast', function()
                local Beast = self:FindTheBeast()
                util.toast(players.get_name(Beast) .. ' is the beast')
            end)
        end)

        self.reveal_the_beast = self.other:toggle(T'Reveal The Beast', {}, T'Add a blip to the map for the player that is the beast', function(state)
            if state then
                util.create_tick_handler(function()
                    if self.reveal_the_beast == false then
                        util.remove_blip(self.beast_blip)
                        return false
                    end

                    util.spoof_script('am_hunt_the_beast', function()
                        local Beast = self:FindTheBeast()
                        if self.beast_blip == nil then
                            local Blip = self.AddBlipForEntity(self.GetPlayerPed(Beast))
                            self.SetBlipSprite(Blip, 463)
                            self.SetBlipColour(Blip, 7)
                            self.SetBlipScale(Blip, 1.5)
                            self.beast_blip = Blip
                        end
                    end)
                end)
            end
        end)
    end

    function CreateToxic()
        self.toxic:action(T'Invite All (exclude friends)', {}, T'Send a corrupted invite to everyone in the session, anyone that accepts the invite will get a black screen', function()
            self:SendInvite(true)
        end)

        self.toxic:action(T'Invite All (include friends)', {}, T'Send a corrupted invite to everyone in the session, anyone that accepts the invite will get a black screen', function()
            self:SendInvite(false)
        end)
    end

    function CreateCasino()
        self.blackjack = self.casino:list(T'Blackjack', {}, '')
        self.blackjack:toggle_loop(T'Show Dealer Cards', {}, T'Show the dealer cards', function(state)
            util.spoof_script('blackjack', function()
                local Dealer = self.ScriptLocal('blackjack', Globals.BlackjackDealerCards)
                local Player = self.ScriptLocal('blackjack', Globals.BlackjackPlayerCards)
                if Dealer ~= 0 and Player ~= 0 then
                    local DealerCards = self.ReadInt(Dealer)
                    local PlayerCards = self.ReadInt(Player)
                    util.draw_debug_text('Dealer: ' .. DealerCards .. ' | Player: ' .. PlayerCards)
                end
            end)
        end)
        self.blackjack:toggle_loop(T'Always Max Bet', {}, T'Always set your bet to max (bypasses limits on lower tables)', function()
            util.spoof_script('blackjack', function()
                local Bet = self.ScriptLocal('blackjack', Globals.BlackjackBetAmount)
                if Bet ~= 0 then
                    self.WriteInt(Bet, 55000)
                end
            end)
        end)
        self.inside_track = self.casino:list(T'Inside Track', {}, '')
        self.inside_track:toggle_loop(T'Always Max Bet', {}, T'Always set your bet to max', function()
            util.spoof_script('inside_track', function()
                local Bet = self.ScriptLocal('inside_track', Globals.InsideTrackBetAmount)
                if Bet ~= 0 then
                    self.WriteInt(Bet, 55000)
                end
            end)
        end)
    end

    function SendInvite(IncludeFriends)
        for pid = 0, S.MAX_PLAYERS do
            if S:PlayerInList(pid) then
                if pid ~= PlayerID then
                    if IncludeFriends then
                        S:InteriorInvite(pid)
                    else
                        if not S:IsPlayerFriend(pid) then
                            S:InteriorInvite(pid)
                        end
                    end
                end
            end
        end
    end

    function FindTheBeast()
        for pid = 0, S.MAX_PLAYERS do
            if S:PlayerInList(pid) then
                if S:IsPlayerTheBeast(pid) then
                    return pid
                end
            end
        end

        return nil
    end

    function RenameAcidLab(Name)
        local Lab = self.ScriptGlobal(Globals.AcidLabName) 
        self.WriteString(Lab, Name)
    end
    
    function GetAcidLabName()
        local Lab = self.ScriptGlobal(Globals.AcidLabName)
        return self.ReadString(Lab)
    end

    function RequestCEOVehicle(VehicleHash)
        local Request = self.ScriptGlobal(Globals.OrganisationBase + 10)
        self.WriteInt(Request + 0x1F0, VehicleHash)
        self.WriteByte(Request + 0x1E0, 1)
    end

    function RequestPegasusVehicle(VehicleHash)
        -- credit to acjoker for finding the globals that made this possible
        local Request = self.ScriptGlobal(Globals.PegasusRequest)
        local Request1 = Request + 0x8
    
        self.WriteInt(Request1, VehicleHash)
        self.WriteInt(Request, self.ReadInt(Request) ~ (1 << 7))
        util.yield_once()
        self.WriteInt(Request, self.ReadInt(Request) ~ (1 << 7))
    end

    function LesterLocate(bit)
        local Lester = self.ScriptGlobal(Globals.LesterLocate)
        self.WriteByte(Lester, self.ReadByte(Lester) ~ bit)
        util.yield_once()
        self.WriteByte(Lester, self.ReadByte(Lester) ~ bit)
    end

    function ReturnRatBike()
        local blip = self.GetFirstBlipInfoId(348)
        if blip ~= 0 then
            local entity = self.GetBlipInfoIdEntityIndex(blip)
            if entity ~= 0 then
                entities.delete_by_handle(entity)
            end
        end
    end

    function ReturnMOC()
        -- credit to Acjoker for helping with figuring out how to return the MOC
        local blip = self.GetFirstBlipInfoId(564)
        if blip ~= 0 then
            local entity = self.GetBlipInfoIdEntityIndex(blip)
            if entity ~=- 0 then
                local g = self.ScriptGlobal(2657704 + 1 + (PlayerID * 463) + 321)
                self.WriteInt(g, self.ReadInt(g) | 0x100040)
                self.WriteInt(g, self.ReadInt(g) & ~(1 << 5))
                self.WriteInt(g + 0x8, self.ReadInt(g) & ~0x2100001)
                self.WriteInt(g + 0x8, self.ReadInt(g) | (1 << 8))
    
                entities.delete_by_handle(entity)
            end
        end
    end

    function ReturnTerrorbyte()
        local blip = self.GetFirstBlipInfoId(632)
        if blip ~= 0 then
            local entity = self.GetBlipInfoIdEntityIndex(blip)
            if entity ~= 0 then
                local g = self.ScriptGlobal(2657704 + 1 + (PlayerID * 463) + 321 + 3)
                self.WriteInt(g, self.ReadInt(g) | 0x18000090)
                self.WriteInt(g, self.ReadInt(g) & ~(1 << 11))
    
                entities.delete_by_handle(entity)
            end
        end
    end

    function ReturnKosatka()
        local ReturnKosatka = self.ScriptGlobal(Globals.ReturnKosatka)
        self.WriteByte(ReturnKosatka, 2)
        self.WriteByte(ReturnKosatka + 0x8, 17)
    end

    function ReturnAcidLab()
        local blip = self.GetFirstBlipInfoId(840)
        if blip ~= 0 then
            local entity = self.GetBlipInfoIdEntityIndex(blip)
            if entity ~= 0 then
                local g = self.ScriptGlobal(2657704 + 1 + (PlayerID * 463) + 321 + 6)
                local lab = self.ScriptGlobal(2657704 + 1 + (PlayerID * 463) + 321 + 5)
                self.WriteInt(lab, self.ReadInt(lab) | (1 << 26))
                self.WriteInt(g, self.ReadInt(g) & ~(1 << 0))
                self.WriteInt(g, self.ReadInt(g) | 0x100002)
    
                entities.delete_by_handle(entity)
            end
        end
    end

    function ReturnDeliveryBike()
        local blip = self.GetFirstBlipInfoId(348)
        if blip ~= 0 then
            local entity = self.GetBlipInfoIdEntityIndex(blip)
            if entity ~= 0 then
                local g = self.ScriptGlobal(2657704 + 1 + (PlayerID * 463) + 321 + 6)
                self.WriteInt(g, self.ReadInt(g) & ~(1 << 6))
                self.WriteInt(g, self.ReadInt(g) | 0x300)
    
                entities.delete_by_handle(entity)
            end
        end
    end
    

    function ReturnAvengerThruster()
        local blip = self.GetFirstBlipInfoId(597)
        if blip ~= 0 then
            local entity = self.GetBlipInfoIdEntityIndex(blip)
            if entity ~=- 0 then
                entities.delete_by_handle(entity)
            end
        end
    end

    function ReturnAvenger(ReturnLocation)
        local g = self.ScriptGlobal(Globals.AvengerStatsBase)
        self.WriteInt(g, self.ReadInt(g) | (1 << 20))
        util.yield(10)
        self.WriteInt(g, self.ReadInt(g) & ~(1 << 20))
        self.WriteInt(g - (4 << 3), (ReturnLocation == 'Hangar') ? self.ReadInt(g - (4 << 3)) & ~(1 << 6) : self.ReadInt(g - (4 << 3)) | (1 << 6))
        self.WriteInt(g - (4 << 3), self.ReadInt(g - (4 << 3)) | (1 << 3))
        self.WriteInt(g, self.ReadInt(g) | (1 << 16))
        util.yield(10)
        self.WriteInt(g - (4 << 3), self.ReadInt(g - (4 << 3)) & ~(1 << 3))
    end

    function ReturnSparrow()
        local Unlock = self.ScriptGlobal(Globals.KosatkaStatsBase)
        local Stats = Bitfield.new(self.ReadByte(Unlock))
        Stats:Clear(KosatkaStats.ReturnSparrow)
        Stats(Unlock, 8)
    end
    
    function ReturnAvisa()
        local Unlock = self.ScriptGlobal(Globals.KosatkaStatsBase)
        local Stats = Bitfield.new(self.ReadByte(Unlock))
        Stats:Clear(KosatkaStats.ReturnAvisa)
        Stats(Unlock, 8)
    end

    function RequestService(service)
        switch service do
            case 'NanoDrone':
                local Drone = self.ScriptGlobal(Globals.RequestNanoDrone)
                self.WriteInt(Drone, self.ReadInt(Drone) | Masks.RequestNanoDrone)
                break
            case 'RCBandito':
                self.WriteByte(self.RequestBase + Offsets.Bandito, 1)
                break
            case 'RCTank':
                self.WriteByte(self.RequestBase + Offsets.Tank, 1)
                util.yield(3500)
                if TuneRef:isValid() then TuneRef:trigger() end
                break
            case 'MOC':
                self.WriteByte(self.RequestBase + Offsets.MOC, 1)
                break
            case 'Avenger':
                self.WriteByte(self.RequestBase + Offsets.Avenger, 1)
                break
            case 'AcidLab':
                self.WriteByte(self.RequestBase + Offsets.AcidLab, 1)
                break
            case 'Terrorbyte':
                self.WriteByte(self.RequestBase + Offsets.Terrorbyte, 1)
                break
            case 'Dinghy':
                self.WriteByte(self.RequestBase + Offsets.Dinghy, 1)
                break
            case 'Kosatka':
                self.WriteByte(self.RequestBase + Offsets.Kosatka, 1)
                break
            case 'Sparrow':
                self.WriteByte(self.AmPiMenuBase + Offsets.Sparrow, 1)
                break
            case 'Avisa':
                self.WriteByte(self.AmPiMenuBase + Offsets.Avisa, 1)
                break
            case 'BallisticArmor':
                self.WriteByte(self.RequestBase + Offsets.BallisticArmor, 1)
                break
            case 'AmmoDrop':
                self.WriteByte(self.RequestBase + Offsets.AmmoDrop, 1)
                break
            case 'Helicopter':
                self.WriteByte(self.RequestBase + Offsets.Helicopter, 1)
                break
            case 'DeliveryBike':
                self.WriteByte(self.RequestBase + Offsets.DeliveryBike, 1)
                break
            case 'RatBike':
                self.WriteByte(self.AmPiMenuBase + Offsets.RatBike, 1)
                break
            case 'AvengerThruster':
                self.WriteByte(self.AmPiMenuBase + Offsets.AvengerThruster, 1)
                break
            case 'Airstrike':
                self.SetPackedStatBoolCode(8, true,CharSlot)
                self.WriteByte(self.RequestBase + Offsets.Airstrike, 1)
                break
            case 'BackupHeli':
                self.SetPackedStatBoolCode(11, true,CharSlot)
                self.WriteByte(self.RequestBase + Offsets.BackupHeli, 1)
                break
            case 'BST':
                self.WriteByte(self.RequestBase + Offsets.BullsharkTestosterone, 1)
                break
            case 'Supplies':
                local Supplies = self.ScriptGlobal(Globals.RequestSupplies)
                self.WriteShort(Supplies, self.ReadShort(Supplies) | Masks.RequestSupplies)
                break
            case 'SourceMotorcycle':
                self.WriteByte(self.ScriptGlobal(Globals.SourceMotorcycle), 1)
                break
        end
    end

    function SendNotification(func, ...)
        for pid = 0, S.MAX_PLAYERS do
            if S:PlayerInList(pid) then
                if Settings:IsSet(Bits.ExcludeSelf) and pid == PlayerID then
                    goto continue
                elseif Settings:IsSet(Bits.ExcludeFriends) and S:IsPlayerFriend(pid) then
                    goto continue
                end
                func(S, pid, ...)
            end
            ::continue::
        end
    end

    function ClearNightclub(state)
        local Clear = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        self.WriteByte(Clear, state ? (Bit:Set(self.ReadByte(Clear), 1)) : (Bit:Clear(self.ReadByte(Clear), 1)))
    end
    
    function IsNightclubCleared()
        local Clear = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        return Bit:Check(self.ReadByte(Clear), 1)
    end
    
    function DisableNightclubOfficeLights(state)
        local Lights = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        self.WriteInt(Lights, state ? (Bit:Set(self.ReadInt(Lights), 17)) : (Bit:Clear(self.ReadInt(Lights), 17)))
    end
    
    function AreNightclubOfficeLightsDisabled()
        local Lights = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        return Bit:Check(self.ReadInt(Lights), 17)
    end
    
    function UnlockNightclubDryIce(state)
        local Ice = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        self.WriteInt(Ice, state ? (Bit:Set(self.ReadInt(Ice), 23)) : (Bit:Clear(self.ReadInt(Ice), 23)))
    end
    
    function IsNightclubDryIceUnlocked()
        local Ice = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        return Bit:Check(self.ReadInt(Ice), 23)
    end
    
    function UnlockNightclubUpgrades()
        local Upgrades = self.ScriptGlobal(Globals.NightclubStatsBase + 1)
        self.WriteInt(Upgrades, 0x7FFEFFFD)
        self:UnlockNightclubDryIce(true)
    end
    
    function BypassNightclubSetup()
        local Bypass = self.ScriptGlobal(Globals.NightclubStatsBase + 1)
        local Bypass1 = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        self.WriteInt(Bypass, 0x7FFFFFFF)
        self.WriteInt(Bypass1, 0x7FFFFFFF)
    end
end

return Online