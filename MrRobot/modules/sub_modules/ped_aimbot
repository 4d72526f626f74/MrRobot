local Shared = require('shared')
local T = require('translations')
local Bit, BitMask = Shared.Bit, Shared.BitMask
local PLAYER_ID = Shared.PLAYER_ID

local GetPlayerPed = Shared.GetPlayerPed
local IsEntityDead = Shared.IsEntityDead
local GetOffsetFromEntityInWorldCoords = Shared.GetOffsetFromEntityInWorldCoords
local GetDistanceBetweenCoords = Shared.GetDistanceBetweenCoords
local IsPedInAnyVehicle = Shared.IsPedInAnyVehicle
local GetAllPedsAsPointers = Shared.GetAllPedsAsPointers
local GetPosition = Shared.GetPosition
local GetOffsetFromEntityInWorldCoords = Shared.GetOffsetFromEntityInWorldCoords
local PointerToHandle = Shared.PointerToHandle
local HandleToPointer = Shared.HandleToPointer
local DoesEntityExist = Shared.DoesEntityExist

--[[BOOL (bool)]] local function IsPedFacingPed(--[[Ped (int)]] ped,--[[Ped (int)]] otherPed,--[[float]] angle)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(otherPed)native_invoker.push_arg_float(angle)native_invoker.end_call_2(0xD71649DB0A545AA3)return native_invoker.get_return_value_bool()end
--[[Vector3 (vector3)]] local function GetPedBoneCoords(--[[Ped (int)]] ped,--[[int]] boneId,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(boneId)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.end_call_2(0x17C07FC640E86B4E)return native_invoker.get_return_value_vector3()end
--[[BOOL (bool)]] local function HasEntityClearLosToEntity(--[[Entity (int)]] entity1,--[[Entity (int)]] entity2,--[[int]] traceType)native_invoker.begin_call()native_invoker.push_arg_int(entity1)native_invoker.push_arg_int(entity2)native_invoker.push_arg_int(traceType)native_invoker.end_call_2(0xFCDFF7B72D23A1AC)return native_invoker.get_return_value_bool()end
--[[void]] local function ShootSingleBulletBetweenCoordsIgnoreEntity(--[[float]] x1,--[[float]] y1,--[[float]] z1,--[[float]] x2,--[[float]] y2,--[[float]] z2,--[[int]] damage,--[[BOOL (bool)]] p7,--[[Hash (int)]] weaponHash,--[[Ped (int)]] ownerPed,--[[BOOL (bool)]] isAudible,--[[BOOL (bool)]] isInvisible,--[[float]] speed,--[[Entity (int)]] entity,--[[Any (int)]] p14)native_invoker.begin_call()native_invoker.push_arg_float(x1)native_invoker.push_arg_float(y1)native_invoker.push_arg_float(z1)native_invoker.push_arg_float(x2)native_invoker.push_arg_float(y2)native_invoker.push_arg_float(z2)native_invoker.push_arg_int(damage)native_invoker.push_arg_bool(p7)native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(ownerPed)native_invoker.push_arg_bool(isAudible)native_invoker.push_arg_bool(isInvisible)native_invoker.push_arg_float(speed)native_invoker.push_arg_int(entity)native_invoker.push_arg_int(p14)native_invoker.end_call_2(0xE3A7742E0B7A2F8B)end
--[[BOOL (bool)]] local function IsPedShooting(--[[Ped (int)]] ped)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.end_call_2(0x34616828CD07F1A1)return native_invoker.get_return_value_bool()end
--[[Hash (int)]] local function GetSelectedPedWeapon(--[[Ped (int)]] ped)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.end_call_2(0x0A6DB4965674D243)return native_invoker.get_return_value_int()end
--[[float]] local function GetWeaponDamage(--[[Hash (int)]] weaponHash,--[[Hash (int)]] componentHash)native_invoker.begin_call()native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(componentHash)native_invoker.end_call_2(0x3133B907D8B32053)return native_invoker.get_return_value_float()end

local RefByRelPath = Shared.RefByRelPath

local inspect = require('inspect')

pluto_class PedAimbot
    function __construct(root)
        self.root = root:list(T'Ped', {}, T'Ped Aimbot')
        self.bounds = { x = 0.5 - (0.02 / 2), y = 0.5 - (0.03 / 2) }
        self.use_fov = true
        self.ignore_vehicles = true
        self.show_target = true
        self.damage_override = false
        self.visible_check = true

        self.bone = 31086
        self.fov = 1
        self.damage = 100
        self.in_fov = false

        self.max_distance = 50000.0
        self.sx_ptr = memory.alloc(4)
        self.sy_ptr = memory.alloc(4)

        self:Init()
    end

    function Init()
        self.root:toggle_loop(T'Aimbot', {}, T'Ped Aimbot', Shared:Partial(self.Aimbot, self))
        self.root:divider('')

        self.root:toggle(T'Use FOV', {}, T'Will the aimbot use FOV or just annihilate them regardless of where you aim?', function(state)
            self.use_fov = state
        end, self.use_fov)

        self.root:toggle(T'Ignore Vehicles', {}, T'Will the aimbot ignore vehicles?', function(state)
            self.ignore_vehicles = state
        end, self.ignore_vehicles)

        self.root:toggle(T'Show Target', {}, T'Will the aimbot show the target?', function(state)
            self.show_target = state
        end, self.show_target)

        self.root:toggle(T'Damage Override', {}, T'Will the aimbot override the damage?', function(state)
            self.damage_override = state
        end, self.damage_override)

        self.root:toggle(T'Visible Check', {}, T'Will the aimbot check if the target is visible?', function(state)
            self.visible_check = state
        end, self.visible_check)

        self.root:list_select(T'Bone', {}, T'Bone to target', {'Head', 'Chest', 'Stomach', 'Left Foot', 'Right Leg', 'Left Hand', 'Right Hand', 'Pelvis', 'Left Leg', 'Left Knee', 'Left Arm'}, 1, function(index)
            self.bone = Shared.AimbotBones[index] or 31086
        end, self.bone)

        self.root:slider(T'FOV', {}, T'The FOV of the aimbot', 0, 180, self.fov, 1, function(value)
            self.fov = value
        end)

        self.root:slider(T'Damage', {}, T'The damage of the aimbot', 0, Shared.MAX_INT, self.damage, 1, function(value)
            self.damage = value
        end)

        self.root:text_input(T'Max Distance', {T'rpedaimbotmaxdist'}, T'The max distance of the aimbot', function(value)
            self.max_distance = tonumber(value) + 0.0
        end, tostring(self.max_distance))
    end

    function Aimbot()
        local ped = self:GetClosestPed()
        if ped == nil and not DoesEntityExist(ped) then
            return
        end

        local player_ped = players.user_ped()

        local weapon = GetSelectedPedWeapon(player_ped)
        local damage = self.damage_override ? self.damage : GetWeaponDamage(weapon, self.bone)

        if self.show_target then
            local bone_coords = GetPedBoneCoords(ped, self.bone, 0.0, 0.0, 0.0)
            util.draw_ar_beacon(bone_coords)
        end

        if self.use_fov then
            for Shared.AimbotBones as bone do
                if self:BoneWithinBounds(ped, bone) then
                    self.in_fov = true
                    break
                else
                    self.in_fov = false
                end
            end
        else
            self.in_fov = true
        end

        if IsPedShooting(player_ped) then
            if self.in_fov then
                if not IsPedInAnyVehicle(ped) then
                    if self.visible_check then
                        if HasEntityClearLosToEntity(player_ped, ped, 17) then
                            local from = GetPedBoneCoords(player_ped, 31086, 0.0, 0.0, 0.0)
                            local to = GetPedBoneCoords(ped, self.bone, 0.0, 0.0, 0.0)

                            self:ShootBullet(player_ped, weapon, damage, from, to)
                        end
                    else
                        local from = GetPedBoneCoords(ped, 24816, 1.0, 0.0, 0.0)
                        local to = GetPedBoneCoords(ped, self.bone, 0.0, 0.0, 0.0)

                        self:ShootBullet(player_ped, weapon, damage, from, to)
                    end
                else
                    local from = GetPedBoneCoords(ped, 24816, 1.0, 0.0, 0.0)
                    local to = GetPedBoneCoords(ped, self.bone, 0.0, 0.0, 0.0)

                    self:ShootBullet(player_ped, weapon, damage, from, to)
                end
            end
        end
    end

    function ShootBullet(owner, weapon, damage, from, to)
        ShootSingleBulletBetweenCoordsIgnoreEntity(from.x, from.y, from.z, to.x, to.y, to.z, damage, true, weapon, owner, true, false, 1.0, owner, true)
    end

    function GetClosestPed()
        local peds = GetAllPedsAsPointers()
        local player_pos = GetOffsetFromEntityInWorldCoords(players.user_ped(), 0.0, 0.0, 0.0)
        local distances = {}

        for peds as ptr do
            local entity = PointerToHandle(ptr)
            if not IsEntityDead(entity) and entity ~= players.user_ped() then
                if self.ignore_vehicles and IsPedInAnyVehicle(entity, false) then
                    goto continue
                end

                if self.visible_check and not HasEntityClearLosToEntity(players.user_ped(), entity, 17) then
                    goto continue
                end

                local pos = GetOffsetFromEntityInWorldCoords(entity, 0.0, 0.0, 0.0)
                local distance = player_pos:distance(pos)

                distances[distance] = entity
            end

            ::continue::
        end

        local smallest_distance = self.max_distance
        local closest_entity = nil

        for distance, entity in pairs(distances) do
            if distance < smallest_distance then
                smallest_distance = distance
                closest_entity = entity
            end
        end

        return closest_entity
    end

    function BoneWithinBounds(ped, bone)
        local bone_coords = GetPedBoneCoords(ped, bone, 0.0, 0.0, 0.0)
        local world_coords = Shared:WorldToScreen(bone_coords, self.sx_ptr, self.sy_ptr)
        bone_coords.z = bone_coords.z + 0.15
        
        if world_coords ~= nil then
            local x1, y1 = world_coords.x, world_coords.y
            local x2, y2 = self.bounds.x, self.bounds.y
            local dist = (x2 - x1) ^ 2 + (y2 - y1) ^ 2
    
            if dist <= self.fov / 180 then
                return true
            else
                return false
            end
        end
    end
end

return PedAimbot