local T, S = require('translations'), require('shared')
local PedList = require('pedlist')
local Cutscenes = require('cutscenes')
local ScriptOffsets = require('offsets')
local Globals = require('script_globals')
local Bitfield = require('bitfield')

PedList = S:SortTable(PedList, |a, b| -> a < b)
Cutscenes = S:SortTable(Cutscenes, |a, b| -> a < b)

local CharSlot, PlayerID = util.get_char_slot(), players.user()
local Bits = ScriptOffsets.Self.Bits
local Settings = Bitfield.new(100)

local ScriptHostRef = menu.ref_by_path('Online>Session>Become Script Host')
local SuicideRef = menu.ref_by_path('Self>Suicide')

pluto_class SelfOptions
    ClearAllPedProps = S.ClearAllPedProps
    TaskPlayAnim = S.TaskPlayAnim
    SetCurrWeatherState = S.SetCurrWeatherState
    SetEntityInvincible = S.SetEntityInvincible
    SetPedArmour = S.SetPedArmour
    SetEntityCanBeDamaged = S.SetEntityCanBeDamaged
    SetArtificialLightsState = S.SetArtificialLightsState
    FreezeEntityPosition = S.FreezeEntityPosition
    SetArtificialVehicleLightsState = S.SetArtificialVehicleLightsState
    NetworkHasControlOfEntity = S.NetworkHasControlOfEntity
    FinalizeHeadBlend = S.FinalizeHeadBlend
    IsAudioSceneActive = S.IsAudioSceneActive
    NetworkStartSynchronisedScene = S.NetworkStartSynchronisedScene
    NetworkAddSynchronisedSceneCamera = S.NetworkAddSynchronisedSceneCamera
    GetEntityMaxHealth = S.GetEntityMaxHealth
    SetPlayerMeleeWeaponDamageModifier = S.SetPlayerMeleeWeaponDamageModifier
    SetPedMaxHealth = S.SetPedMaxHealth
    GiveWeaponToPed = S.GiveWeaponToPed
    SetParkedVehicleDensityMultiplierThisFrame = S.SetParkedVehicleDensityMultiplierThisFrame
    SetTimecycleModifierStrength = S.SetTimecycleModifierStrength
    GetGameplayCamRot = S.GetGameplayCamRot
    SetPlayerVehicleDamageModifier = S.SetPlayerVehicleDamageModifier
    StartAudioScene = S.StartAudioScene
    SetPlayerIsInAnimalForm = S.SetPlayerIsInAnimalForm
    SetEntityRotation = S.SetEntityRotation
    ShootSingleBulletBetweenCoords = S.ShootSingleBulletBetweenCoords
    NetworkForceLocalUseOfSyncedSceneCamera = S.NetworkForceLocalUseOfSyncedSceneCamera
    SetPedUpperBodyDamageOnly = S.SetPedUpperBodyDamageOnly
    SetEntityAlpha = S.SetEntityAlpha
    ClearTimecycleModifier = S.ClearTimecycleModifier
    SetPlayerLeavePedBehind = S.SetPlayerLeavePedBehind
    SetEntityHealth = S.SetEntityHealth
    SetPedSuffersCriticalHits = S.SetPedSuffersCriticalHits
    IsPedInAnyVehicle = S.IsPedInAnyVehicle
    GetVehiclePedIsIn = S.GetVehiclePedIsIn
    GetPedMaxHealth = S.GetPedMaxHealth
    SetTransitionTimecycleModifier = S.SetTransitionTimecycleModifier
    AddOwnedExplosion = S.AddOwnedExplosion
    SetDisableHighFallDeath = S.SetDisableHighFallDeath
    StopAudioScene = S.StopAudioScene
    SetRandomVehicleDensityMultiplierThisFrame = S.SetRandomVehicleDensityMultiplierThisFrame
    AnimpostfxIsRunning = S.AnimpostfxIsRunning
    SetTimecycleModifier = S.SetTimecycleModifier
    NetworkRequestControlOfEntity = S.NetworkRequestControlOfEntity
    StatSetFloat = S.StatSetFloat
    GetPlayerMaxArmour = S.GetPlayerMaxArmour
    SetPedComponentVariation = S.SetPedComponentVariation
    GetLightOverrideMaxIntensityScale = S.GetLightOverrideMaxIntensityScale
    SetAmbientVehicleRangeMultiplierThisFrame = S.SetAmbientVehicleRangeMultiplierThisFrame
    ForcePedAiAndAnimationUpdate = S.ForcePedAiAndAnimationUpdate
    ForceLightningFlash = S.ForceLightningFlash
    SetPedConfigFlag = S.SetPedConfigFlag
    NetworkDisableLeaveRemotePedBehind = S.NetworkDisableLeaveRemotePedBehind
    GetPedLastWeaponImpactCoord = S.GetPedLastWeaponImpactCoord
    SetPlayerMaxExplosiveDamage = S.SetPlayerMaxExplosiveDamage
    GetSelectedPedWeapon = S.GetSelectedPedWeapon
    SetEntityCollision = S.SetEntityCollision
    GetPlayerPed = S.GetPlayerPed
    GetOffsetFromEntityInWorldCoords = S.GetOffsetFromEntityInWorldCoords
    NetworkCreateSynchronisedScene = S.NetworkCreateSynchronisedScene
    AnimpostfxStop = S.AnimpostfxStop
    StatSetInt = S.StatSetInt
    SetVehicleDensityMultiplierThisFrame = S.SetVehicleDensityMultiplierThisFrame
    IsEntityDead = S.IsEntityDead
    SetWeatherTypeNowPersist = S.SetWeatherTypeNowPersist
    GetEntityHeading = S.GetEntityHeading
    AnimpostfxStopAll = S.AnimpostfxStopAll
    ClearPedTasksImmediately = S.ClearPedTasksImmediately
    SetRunSprintMultiplierForPlayer = S.SetRunSprintMultiplierForPlayer
    AnimpostfxPlay = S.AnimpostfxPlay
    GetNetworkTime = S.GetNetworkTime
    SetLightOverrideMaxIntensityScale = S.SetLightOverrideMaxIntensityScale
    SetEntityVisible = S.SetEntityVisible
    GetEntityHealth = S.GetEntityHealth
    SetPedDensityMultiplierThisFrame = S.SetPedDensityMultiplierThisFrame
    SetEntityProofs = S.SetEntityProofs
    ClearPedStoredHatProp = S.ClearPedStoredHatProp
    SetPlayerVehicleDefenseModifier = S.SetPlayerVehicleDefenseModifier
    SetScenarioPedDensityMultiplierThisFrame = S.SetScenarioPedDensityMultiplierThisFrame
    TogglePausedRenderphases = S.TogglePausedRenderphases
    PlaySoundFrontend = S.PlaySoundFrontend
    SetEntityCoordsNoOffset = S.SetEntityCoordsNoOffset
    SetPedMoveRateOverride = S.SetPedMoveRateOverride
    SetPedStrafeClipset = S.SetPedStrafeClipset
    ResetPedStrafeClipset = S.ResetPedStrafeClipset
    GetEntitySpeed = S.GetEntitySpeed
    StartNetworkedParticleFxNonLoopedOnPedBone = S.StartNetworkedParticleFxNonLoopedOnPedBone
    GetEntityRotation = S.GetEntityRotation
    SetPlayerModel = S.SetPlayerModel

    ReadByte = memory.read_byte
    ReadShort = memory.read_short
    ReadInt = memory.read_int
    ReadFloat = memory.read_float
    WriteByte = memory.write_byte
    WriteShort = memory.write_short
    WriteInt = memory.write_int
    WriteFloat = memory.write_float
    WriteLong = memory.write_long
    ScriptGlobal = S.ScriptGlobal
    ScriptLocal = S.ScriptLocal

    ImpactCoords = v3.new()

    function __construct(root)
        self.root = root:list(T'Self', {T'rself'}, T'Self')
        self.healing = self.root:list(T'Healing', {T'healing'}, T'Healing options')
        self.healthmod = self.root:list(T'Health', {T'health'}, T'Modded health options')
        self.superpunch = self.root:list(T'Super Punch', {T'superpunch'}, T'Super Punch options')
        self.hiding = self.root:list(T'Hiding', {T'hiding'}, T'Hiding options')
        self.mental_state = self.root:list(T'Mental State', {T'mentalstate'}, T'Mental State options')
        self.noclip = self.root:list(T'No Clip', {T'noclip'}, T'No Clip options')
        self.bounty = self.root:list(T'Bounty', {T'bounty'}, T'Bounty options')
        self.model_changer = self.root:list(T'Model Changer', {T'modelchanger'}, T'Model Changer options')
        self.cutscene = self.root:list(T'Cutscenes', {T'cutscene'}, T'Cutscene options')
        self.pvp_helper = self.root:list(T'PvP Helper', {T'pvphelper'}, T'PvP Helper options')
        self.root:divider('')

        self.auto_heal = self.healing:toggle_loop(T'Auto Heal', {T'rautoheal'}, T'Automatically heal when your health falls below the threshold that you have set', function()
            local Ped = players.user_ped()
            local MaxHealth = self.GetEntityMaxHealth(Ped)
            local CurrentHealth = self.GetEntityHealth(Ped)
            local HealthPercent = math.floor((CurrentHealth / MaxHealth) * 100)

            if HealthPercent < Settings:Get(Bits.HealthThreshold) then
                self.SetEntityHealth(Ped, MaxHealth)
            end
        end)

        self.display_health_percent = self.healing:toggle_loop(T'Display Current Health Percentage', {T'rdisplayhealthpercent'}, T'Displays your current health as a percentage', function()
            local Ped = players.user_ped()
            local MaxHealth = self.GetEntityMaxHealth(Ped)
            local CurrentHealth = self.GetEntityHealth(Ped)
            local HealthPercent = math.floor((CurrentHealth / MaxHealth) * 100)
            util.draw_debug_text(T'Current Health: ' .. HealthPercent .. '%')
        end)

        self.health_threshold = self.healing:slider(T'Health Threshold', {T'rhealthreshold'}, T'Health threshold to start healing', 0, 100, Settings:Get(Bits.HealthThreshold), 1, function(value)
            Settings:Clear(Bits.HealthThreshold)
            Settings:Set(value)
        end)

        self.mod_maxhealth = self.healthmod:toggle(T'Mod Max Health', {T'rmoddedhealth'}, T'Modded max health', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            local Ped = players.user_ped()
            if state then
                Settings:Set(Bits.ModdedHealth)
            else
                Settings:Clear(Bits.ModdedHealth)
                self.SetPedMaxHealth(Ped, 328)
                self.SetEntityHealth(Ped, 328)
            end
        end, Settings:IsSet(Bits.ModdedHealth))

        self.moddedhealth_amount = self.healthmod:text_input(T'Max Health', {T'rmaxhealth'}, T'Change your max health', function(Health)
            local Ped = players.user_ped()
            
            if Settings:IsSet(Bits.ModdedHealth) then
                pcall(function()
                    self.SetPedMaxHealth(Ped, tonumber(Health))
                    self.SetEntityHealth(Ped, tonumber(Health))
                end)
            end
        end)

        self.p_superpunch = self.superpunch:toggle_loop(T'Super Punch', {}, T'Kill players and peds in a single hit', function()
            self:SuperPunch(17, 1000.0, false, true, 0.0)
        end)

        self.orbital_superpunch = self.superpunch:toggle_loop(T'Orbital Cannon Super Punch', {}, T'Kill players and peds in a single hit', function()
            local OrbitalCannon = self.ScriptGlobal(Globals.OrbitalCannon)
            self.WriteByte(OrbitalCannon, 1)
            self:SuperPunch(60, 1000.0, false, true, 0.0)
        end)

        self.hide_m1 = self.hiding:toggle(T'Hide Method 1', {T'rdisappear'}, T'Just a shortcut for enabling stealth mode and invisibility', function(state)
            self.stealth_mode.value = state
            self.invisibility.value = state
        end)

        self.hide_m2 = self.hiding:toggle(T'Hide Method 2', {T'rdisappear1'}, T'Just a shortcut for enabling interior state spoofing and invisibility', function(state)
            self.spoof_interior_state.value = state
            self.invisibility.value = state
        end)

        self.anti_psychpath = self.mental_state:toggle_loop(T'Anti-Psychopath', {T'rantipsychopath'}, T'Disables killing players, peds and cops affecting your mental state', function()
            local MentalState = self.ScriptGlobal(Globals.MentalState)
            local MentalStateValue = self.ScriptGlobal(Globals.MentalStateValue)
    
            self.WriteByte(MentalState, 1)
            self.WriteFloat(MentalStateValue, 0.0)
        end,
        function()
            local MentalState = self.ScriptGlobal(Globals.MentalState)
            self.WriteByte(MentalState, 0)
        end)

        self.psychopath = self.mental_state:toggle_loop(T'Psychopath', {T'rpsychopath'}, T'Show your inner psychopath', function()
            local MentalStateValue = self.ScriptGlobal(Globals.MentalStateValue)
            self.WriteFloat(MentalStateValue, 100.0)
        end)
    
        self.display_mental_state = self.mental_state:toggle_loop(T'Display Mental State', {T'rdisplaymentalstate'}, T'Displays your current mental state', function()
            local MentalStateValue = self.ScriptGlobal(Globals.MentalStateValue)
            local Value = self.ReadFloat(MentalStateValue)
            util.draw_debug_text('Mental State: ' .. Value)
        end)

        self.p_noclip = self.noclip:toggle_loop(T'No Clip', {T'rnoclip'}, T'Fly around the map', function()
            if self.IsPedInAnyVehicle(players.user_ped()) then
                local Veh = self.GetVehiclePedIsIn(players.user_ped(), false)
                if Veh ~= 0 then
                    self.FreezeEntityPosition(Veh, true)
                    self.SetEntityCollision(Veh, false, false)
    
                    local Rot = self.GetGameplayCamRot(5)
                    self.SetEntityRotation(Veh, Rot.x, Rot.y, Rot.z, 5, true)
    
                    if util.is_key_down(0x57) then -- W
                        local Pos = self.GetOffsetFromEntityInWorldCoords(Veh, 0, 1 * self.noclip_speed.value, 0)
                        self.SetEntityCoordsNoOffset(Veh, Pos.x, Pos.y, Pos.z, false, false, false)
                    elseif util.is_key_down(0x53) then -- S
                        local Pos = self.GetOffsetFromEntityInWorldCoords(Veh, 0, -1 * self.noclip_speed.value, 0)
                        self.SetEntityCoordsNoOffset(Veh, Pos.x, Pos.y, Pos.z, false, false, false)
                    end
    
                    if util.is_key_down(0x41) then -- A
                        local Pos = self.GetOffsetFromEntityInWorldCoords(Veh, -1 * self.noclip_speed.value, 0, 0)
                        self.SetEntityCoordsNoOffset(Veh, Pos.x, Pos.y, Pos.z, false, false, false)
                    elseif is_key_down(0x44) then -- D
                        local Pos = self.GetOffsetFromEntityInWorldCoords(Veh, 1 * self.noclip_speed.value, 0, 0)
                        self.SetEntityCoordsNoOffset(Veh, Pos.x, Pos.y, Pos.z, false, false, false)
                    end
    
                    -- left shift
                    if util.is_key_down(0x10) then
                        local Pos = self.GetOffsetFromEntityInWorldCoords(Veh, 0, 0, 1 * self.noclip_speed.value)
                        self.SetEntityCoordsNoOffset(Veh, Pos.x, Pos.y, Pos.z, false, false, false)
                    end
    
                    -- left control
                    if util.is_key_down(0x11) then
                        local Pos = self.GetOffsetFromEntityInWorldCoords(Veh, 0, 0, -1 * self.noclip_speed.value)
                        self.SetEntityCoordsNoOffset(Veh, Pos.x, Pos.y, Pos.z, false, false, false)
                    end
                end
            else
                local Ped = players.user_ped()
                self.FreezeEntityPosition(Ped, true)
                self.SetEntityCollision(Ped, false, false)
    
                local Rot = self.GetGameplayCamRot(5)
                self.SetEntityRotation(Ped, Rot.x, Rot.y, Rot.z, 5, true)
    
                if util.is_key_down(0x57) then -- W
                    local Pos = self.GetOffsetFromEntityInWorldCoords(Ped, 0, 1 * self.noclip_speed.value, 0)
                    self.SetEntityCoordsNoOffset(Ped, Pos.x, Pos.y, Pos.z, false, false, false)
                elseif util.is_key_down(0x53) then -- S
                    local Pos = self.GetOffsetFromEntityInWorldCoords(Ped, 0, -1 * self.noclip_speed.value, 0)
                    self.SetEntityCoordsNoOffset(Ped, Pos.x, Pos.y, Pos.z, false, false, false)
                end
    
                if util.is_key_down(0x41) then -- A
                    local Pos = self.GetOffsetFromEntityInWorldCoords(Ped, -1 * self.noclip_speed.value, 0, 0)
                    self.SetEntityCoordsNoOffset(Ped, Pos.x, Pos.y, Pos.z, false, false, false)
                elseif util.is_key_down(0x44) then -- D
                    local Pos = self.GetOffsetFromEntityInWorldCoords(Ped, 1 * self.noclip_speed.value, 0, 0)
                    self.SetEntityCoordsNoOffset(Ped, Pos.x, Pos.y, Pos.z, false, false, false)
                end
    
                -- left shift
                if util.is_key_down(0x10) then
                    local Pos = self.GetOffsetFromEntityInWorldCoords(Ped, 0, 0, 1 * self.noclip_speed.value)
                    self.SetEntityCoordsNoOffset(Ped, Pos.x, Pos.y, Pos.z, false, false, false)
                end
    
                -- left control
                if util.is_key_down(0x11) then
                    local Pos = self.GetOffsetFromEntityInWorldCoords(Ped, 0, 0, -1 * self.noclip_speed.value)
                    self.SetEntityCoordsNoOffset(Ped, Pos.x, Pos.y, Pos.z, false, false, false)
                end
            end
        end,
        function()
            if self.IsPedInAnyVehicle(players.user_ped()) then
                local Veh = self.GetVehiclePedIsIn(players.user_ped(), false)
                if Veh ~= 0 then
                    self.FreezeEntityPosition(Veh, false)
                    self.SetEntityCollision(Veh, true, true)
                end
            else
                local Ped = players.user_ped()
                self.FreezeEntityPosition(Ped, false)
                self.SetEntityCollision(Ped, true, true)
                self.ClearPedTasksImmediately(Ped)
            end
        end)
    
        self.noclip_speed = self.noclip:slider(T'Speed', {}, T'Speed multiplier', 1, 100, 1, 1, function(value) end)

        self.stealth_mode = self.root:toggle(T'Stealth', {T'rstealthmode'}, T'Removes your blip from the radar for the entire session (this does not trigger off the radar detection)', function(state)
            local Stealth = self.ScriptGlobal(Globals.StealthMode)
            local SBitfield = Bitfield.new(self.ReadInt(Stealth))
            SBitfield.address = Stealth
            if state then
                SBitfield:Set(Bits.StealthMode)
            else
                SBitfield:Clear(Bits.StealthMode)
            end
        end)

        self.bribe_authorities = self.root:toggle(T'Bribe Authorities', {T'rbribeauthorities'}, T'Bribe the authorities to remove your wanted level', function(state)
            local Bribe = self.ScriptGlobal(Globals.BribeAuthorities)
            local BBitfield = Bitfield.new(self.ReadByte(Bribe))
            BBitfield.address = Bribe
            if state then
                util.create_tick_handler(function()
                    if self.bribe_authorities.value == false then
                        BBitfield:Clear(Bits.BribeAuthorities)                      
                        return false
                    end

                    BBitfield:Set(Bits.BribeAuthorities)
                end)
            end
        end)

        self.invisibility = self.root:toggle(T'Invisibility', {T'rinvis'}, T'Makes your character invisible, Stand\'s reveal invisible players does not reveal you when using this', function(state)
            if state then
                util.create_tick_handler(function()
                    local Invisible = self.ScriptGlobal(Globals.Invisibility)
                    if self.invisibility.value == false then
                        self.WriteByte(Invisible, 0)
                        return false
                    end

                    if not self.IsEntityDead(players.user_ped()) then
                        self.WriteByte(Invisible, 1)
                    end
                end)
            end
        end)

        self.spoof_interior_state = self.root:toggle(T'Spoof Interior State', {}, T'Spoofs your interior state, you will appear to be in an invalid interior while this is enabled', function(state)
            local InteriorState = self.ScriptGlobal(Globals.SpoofInteriorState)
            local IBitfield = Bitfield.new(self.ReadShort(InteriorState))
            IBitfield.address = InteriorState
            if state then
                IBitfield:Set(Bits.SpoofInteriorState)
            else
                IBitfield:Clear(Bits.SpoofInteriorState)
            end
        end)

        self.harden_player = self.root:toggle(T'Harden Player', {T'rhardplayer'}, T'Hardens your player', function(state)
            self.SetPedSuffersCriticalHits(players.user_ped(), not state)
            self.SetPedUpperBodyDamageOnly(players.user_ped(), state)
        end)

        self.fast_respawn = self.root:toggle_loop(T'Fast Respawn', {T'rfastrespawn'}, T'Respawns you instantly', function()
            local Respawn = self.ScriptGlobal(Globals.FastRespawn)
            local RespawnState = self.ScriptGlobal(Globals.RespawnState)
    
            if self.ReadByte(RespawnState) ~= 0 then
                self.WriteByte(Respawn, 1)
                util.yield_once()
                self.WriteByte(Respawn, 0)
            end
        end)

        self.killer_karma = self.root:toggle_loop(T'Killer Karma', {T'rkillerkarma'}, T'Karma the player that killed you', function()
            local KillerKarma = self.ScriptGlobal(Globals.PlayerKiller)
            local RespawnState = self.ScriptGlobal(Globals.RespawnState)
            local Respawn = self.ScriptGlobal(Globals.FastRespawn)
    
            if self.ReadByte(RespawnState) ~= 0 then
                local pid = self.ReadByte(KillerKarma)
                pcall(function()
                    local Ped = self.GetPlayerPed(pid)
                    local Pos = self.GetOffsetFromEntityInWorldCoords(Ped, 0.0, 0.0, 0.0)
    
                    if not self.IsEntityDead(Ped) then
                        self.AddOwnedExplosion(players.user_ped(), Pos.x, Pos.y, Pos.z, 18, 100, false, true, 0.0)
                        self.WriteByte(KillerKarma, -1)
                        self.WriteByte(Respawn, 1)
                        util.yield_once()
                        self.WriteByte(Respawn, 0)
                    end
                end)
            end
        end)

        self.infinite_otr_ghost = self.root:toggle_loop(T'Infinite OTR / Ghost Org', {T'rinfiniteotr'}, T'Freezes the timer so it never decreases', function()
            local Timer = self.ScriptGlobal(Globals.OtrGhostTimer)
            self.WriteInt(Timer, self.GetNetworkTime())
        end)

        self.force_ghost_org = self.root:toggle(T'Force Ghost Org', {T'rforceghostorg'}, T'Force ghost org, this will only work if you are in an organisation', function(state)
            if state then
                local Force = self.ScriptGlobal(Globals.AbilitiesBitfield)
                local FBitfield = Bitfield.new(self.ReadByte(Force))
                util.create_tick_handler(function()
                    if self.force_ghost_org.value == false then
                        FBitfield:Clear(Bits.ForceGhostOrg)
                        FBitfield(Force, 8)
                        return false
                    end

                    FBitfield:Set(Bits.ForceGhostOrg)
                    FBitfield(Force, 8)
                end)
            end
        end)

        self.snack_insta_restore = self.root:toggle(T'Snacks Instant Restore', {T'rsnacksinstantrestore'}, T'Eating any snacks will instantly restore all your health', function(state)
            for i = Globals.SnacksInstantRestoreStart, Globals.SnacksInstantRestoreEnd do
                self.WriteFloat(self.ScriptGlobal(262145 + i), state ? 100.0 : 1.0)
            end
        end)

        self.beast_mode = self.root:toggle(T'Beast Mode', {T'rbeastmode'}, T'Enables beast mode which makes you stronger, faster and more durable than normal', function(state)
            local Ped = players.user_ped()
            if not util.is_session_started() then
                self.beast_mode.value = false
                return
            end
    
            if state then
                util.create_tick_handler(function()
                    if not self.beast_mode.value then
                        return false
                    end
    
                    self.SetEntityHealth(Ped, 328)
                end)
                self.GiveWeaponToPed(Ped, util.joaat('WEAPON_UNARMED'), 0, true, true)
                for _ = 0, 5 do self.ClearPedTasksImmediately(Ped) end
                util.yield_once()
                local Pos = self.GetOffsetFromEntityInWorldCoords(Ped, 0.05, 0.5, -1.11)
                local Scene = self.NetworkCreateSynchronisedScene(Pos.x, Pos.y, Pos.z, 0.0, 0.0, self.GetEntityHeading(Ped) + 90.0, 2, false, false, 1.0, 0.0, 1.0)
                self.NetworkAddSynchronisedSceneCamera(Scene, 'ANIM@MP_FM_EVENT@INTRO', 'BEAST_TRANSFORM_CAM')
                self.TaskPlayAnim(Ped, 'ANIM@MP_FM_EVENT@INTRO', 'BEAST_TRANSFORM', 1000.0, -2.0, -1, 0, 0.0, false, false, false)
                self.ForcePedAiAndAnimationUpdate(Ped, false, false)
                self.NetworkForceLocalUseOfSyncedSceneCamera(Scene)
                self.NetworkStartSynchronisedScene(Scene)
    
                if not self.AnimpostfxIsRunning('BeastIntroScene') then
                    self.AnimpostfxPlay('BeastIntroScene', 0, false)
                end
    
                self.StartAudioScene('FM_Event_Beast_Transform_Sequence_Scene')
                self.PlaySoundFrontend(-1, 'Frontend_Beast_Transform_Back', 'FM_Events_Sasquatch_Sounds', false)
    
                self.ClearPedStoredHatProp(Ped)
                self.ClearAllPedProps(Ped, 1)
                self.SetPedConfigFlag(Ped, 189, true)
                self.SetPedConfigFlag(Ped, 407, true)
                self.SetPlayerMeleeWeaponDamageModifier(PlayerID, 100.0, true)
                self.SetPedSuffersCriticalHits(Ped, false)
                self.SetDisableHighFallDeath(Ped, true)
                self.SetPlayerMaxExplosiveDamage(PlayerID, 500.0)
                self.SetPedConfigFlag(Ped, 410, true)
                self.SetPlayerVehicleDefenseModifier(PlayerID, S.MAX_INT + 0.0)
                self.SetPlayerVehicleDamageModifier(PlayerID, S.MAX_INT + 0.0)
                self.SetPedConfigFlag(Ped, 411, true)
                self.SetPlayerIsInAnimalForm(true)
                self.SetPlayerLeavePedBehind(PlayerID, false)
                self.NetworkDisableLeaveRemotePedBehind(true)
                self.FinalizeHeadBlend(Ped)
                self.SetRunSprintMultiplierForPlayer(PlayerID, 1.49)
            else
                self.ClearPedStoredHatProp(Ped)
                self.ClearAllPedProps(Ped, 1)
                self.SetPedConfigFlag(Ped, 189, false)
                self.SetPedConfigFlag(Ped, 407, false)
                self.SetPlayerMeleeWeaponDamageModifier(PlayerID, 1.0, true)
                self.SetPedMaxHealth(Ped, 328)
                self.SetEntityHealth(Ped, 328)
                self.SetPedSuffersCriticalHits(Ped, true)
                self.SetDisableHighFallDeath(Ped, false)
                self.SetPlayerMaxExplosiveDamage(PlayerID, 100.0)
                self.SetPedConfigFlag(Ped, 410, false)
                self.SetEntityAlpha(Ped, 255, false)
                self.SetPlayerVehicleDefenseModifier(PlayerID, 1.0)
                self.SetPlayerVehicleDamageModifier(PlayerID, 1.0)
                self.SetPedConfigFlag(Ped, 411, false)
                self.SetPlayerIsInAnimalForm(false)
                self.SetPlayerLeavePedBehind(PlayerID, true)
                self.NetworkDisableLeaveRemotePedBehind(false)
                self.SetPedComponentVariation(Ped, 1, 0, 0, 0)
                self.SetRunSprintMultiplierForPlayer(PlayerID, 1.0)
            end
        end)

        self.crouch_strafe = self.root:toggle_loop(T'Crouch Strafe', {}, T'Make your player strafe a crouched position (only works in first person)', function()
            self.SetPedStrafeClipset(players.user_ped(), 'move_ped_crouched_strafing')
        end, function()
            self.ResetPedStrafeClipset(players.user_ped())
        end)
    
        self.tbag = self.root:toggle_loop(T'Tbag', {}, T'Make you tbag the ground (only works in first person)', function()
            local Ped = players.user_ped()
            self.SetPedStrafeClipset(Ped, 'move_ped_crouched_strafing')
            util.yield_once()
            self.ResetPedStrafeClipset(Ped)
        end, function()
            self.ResetPedStrafeClipset(players.user_ped())
        end)

        S.Refs.BecomeInterior = self.root:toggle(T'Become An Interior', {}, T'Makes your blip look like you\'re inside of an interior when you are not', function(state)
            local BecomeInterior = self.ScriptGlobal(Globals.BecomeInterior)
            local BBitfield = Bitfield.new(self.ReadByte(BecomeInterior))
            if state then
                BBitfield:Set(Bits.BecomeInterior)
            else
                BBitfield:Clear(Bits.BecomeInterior)
            end
            BBitfield(BecomeInterior, 8)
        end)

        self.delete_all_players = self.root:toggle(T'Delete All Players', {}, T'Delete all players from existence, this does not kick them', function(state)
            for pid = 0, S.MAX_PLAYERS do
                if pid ~= PlayerID then
                    if S:PlayerInList(pid) then
                        S:DeletePlayer(pid, state)
                    end
                end
            end
        end)

        self.pause_menu_active = self.root:toggle(T'Pause Menu Active', {}, T'Make it look like you\'re in the pause menu when you are not', function(state)
            self.WriteByte(self.ScriptGlobal(Globals.PauseMenuActive), state and 1 or 0)
        end)
    
        self.bypass_oncall = self.root:toggle_loop(T'Bypass On Call', {}, T'Bypass the game preventing you leave interiors due to being on call (untested because cannot seem to force the requirements to test it)', function()
            self.WriteByte(self.ScriptGlobal(Globals.BypassOnCall), -1)
        end)

        self.out_of_sight = self.root:toggle_loop(T'Out Of Sight', {}, T'Enable out of sight, what else?', function()
            local G = self.ScriptGlobal(Globals.OutOfSight)
            local G1 = G + 0x8

            local Coords = self.GetOffsetFromEntityInWorldCoords(players.user_ped(), 0.0, 0.0, 0.0)
            local X, Y, Z = Coords.x, Coords.y, Coords.z

            if self.ReadByte(G) == 0 then
                self.WriteByte(G, 1)
            else
                self.WriteFloat(G1, X)
                self.WriteFloat(G1 + 0x8, Y)
                self.WriteFloat(G1 + 0x10, Z)
            end
        end,
        function()
            self.WriteByte(self.ScriptGlobal(Globals.OutOfSight), 0)
        end)

        self.cops_ignore_crimes = self.root:toggle(T'Cops Ignore Crimes', {}, T'Crimes do not increase your wanted level', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            if state then
                -- WARNING: DO NOT EDIT THESE VALUES, THEY ARE MODIFYING THE GAME'S CODE
                self.WriteLong(ModuleBase + 0x660143, 0xB883C7) -- mov [rbx+B8],00000000
                self.WriteLong(ModuleBase + 0x660117, 0xB883C7) -- mov [rbx+B8],00000000
                self.WriteLong(ModuleBase + 0x6600DD, 0xB883C7) -- mov [rbx+B8],00000000
                self.WriteLong(ModuleBase + 0x6600B1, 0xB883C7) -- mov [rbx+B8],00000000
                self.WriteLong(ModuleBase + 0x660081, 0xB883C7) -- mov [rbx+B8],00000000

                self.WriteShort(ModuleBase + (0x660143 - 0x2), 0x1A75) -- jne GTA5.exe+66012D
                self.WriteShort(ModuleBase + (0x660117 - 0x2), 0x1A75) -- jne GTA5.exe+660131
                self.WriteShort(ModuleBase + (0x6600DD - 0x2), 0x2675) -- jne GTA5.exe+660103
                self.WriteShort(ModuleBase + (0x6600B1 - 0x2), 0x1875) -- jne GTA5.exe+6600C9
                self.WriteShort(ModuleBase + (0x660081 - 0x2), 0x1C75) -- jne GTA5.exe+66009D
            else
                self.WriteLong(ModuleBase + 0x660143, 0x1000000B883C7) -- mov [rbx+B8],00000001
                self.WriteLong(ModuleBase + 0x660117, 0x2000000B883C7) -- mov [rbx+B8],00000002
                self.WriteLong(ModuleBase + 0x6600DD, 0x3000000B883C7) -- mov [rbx+B8],00000003
                self.WriteLong(ModuleBase + 0x6600B1, 0x4000000B883C7) -- mov [rbx+B8],00000004
                self.WriteLong(ModuleBase + 0x660081, 0x5000000B883C7) -- mov [rbx+B8],00000005

                self.WriteShort(ModuleBase + (0x660143 - 0x2), 0x1A7C) -- jl GTA5.exe+66012D
                self.WriteShort(ModuleBase + (0x660117 - 0x2), 0x1A7C) -- jl GTA5.exe+660131
                self.WriteShort(ModuleBase + (0x6600DD - 0x2), 0x267C) -- jl GTA5.exe+660103
                self.WriteShort(ModuleBase + (0x6600B1 - 0x2), 0x187C) -- jl GTA5.exe+6600C9
                self.WriteShort(ModuleBase + (0x660081 - 0x2), 0x1C7C) -- jl GTA5.exe+66009D
            end
        end)

        self.force_scripthost = self.root:toggle_loop(T'Force Script Host', {}, T'Force you to become script host', function()
            ScriptHostRef:trigger()
        end)

        self.infinite_bst = self.root:toggle_loop(T'Infinite BST', {}, T'BST timer will never decrease', function()
            util.spoof_script('freemode', function()
                local BST = self.ScriptLocal('freemode', Globals.BSTTimer)
                self.WriteInt(BST, self.GetNetworkTime())
            end)
        end)

        self.infinite_blindeye = self.root:toggle_loop(T'Infinte Cops Turn Blind Eye', {}, T'Timer will never decrease', function()
            local BlindEyeTimer = self.ScriptGlobal(Globals.BribeAuthoritiesTimer)
            self.WriteInt(BlindEyeTimer, self.GetNetworkTime())
        end)

        self.auto_restock = self.root:toggle_loop(T'Auto Restock Snacks And Armour', {}, T'Fully stocked snacks and armour in your inventory at all times', function()
            local Value = S.MAX_INT
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NO_BOUGHT_YUM_SNACKS'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_'.. 'NO_BOUGHT_HEALTH_SNACKS'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NO_BOUGHT_EPIC_SNACKS'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NUMBER_OF_CHAMP_BOUGHT'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NUMBER_OF_ORANGE_BOUGHT'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NUMBER_OF_BOURGE_BOUGHT'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NUMBER_OF_SPRUNK_BOUGHT'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'CIGARETTES_BOUGHT'), 0)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'MP_CHAR_ARMOUR_5_COUNT'), Value)
        end)

        self.auto_restock.value = true

        self.remove_bounty = self.bounty:action(T'Remove Bounty', {T'rremovebounty'}, T'Removes your bounty, this does NOT work the same as Stand\'s remove bounty feature', function()
            S:SetPlayerBounty(PlayerID, 0, false)
            S:SetPlayerBountyReward(PlayerID, 0)
        end)
    
        self.collect_bounty = self.bounty:action(T'Collect Bounty', {T'rcollectbounty'}, T'Collect your bounty, if this does not work then remove all bounties from the entire session and re-set them', function()
            self.WriteInt(self.ScriptGlobal(Globals.BountyTimer), 2880000)
            self.WriteByte(self.ScriptGlobal(Globals.BountyLocal), -1)
        end)

        self.model_custom_ped = self.model_changer:text_input(T'Custom Ped Model', {T'rmodelcustomped'}, T'Change your model to a custom ped model', function(Model)
            local Hash = util.joaat(Model)
            if self.IsModelValid(Hash) then
                self.RequestModel(Hash)
                while not self.HasModelLoaded(Hash) do
                    util.yield()
                end
                self.SetPlayerModel(PlayerID, Hash)
                self.SetModelAsNoLongerNeeded(Hash)
            end
        end, 'A_C_Cat_01')

        self.random_ped_model = self.model_changer:action(T'Random Ped Model', {T'rrandompedmodel'}, T'Change your model to a random ped model', function()
            local Hash = util.joaat(PedList[math.random(1, #PedList)])
            self.RequestModel(Hash)
            while not self.HasModelLoaded(Hash) do
                util.yield()
            end
            self.SetPlayerModel(PlayerID, Hash)
            self.SetModelAsNoLongerNeeded(Hash)
        end)

        self.model_changer_ped_list = self.model_changer:list(T'Models', {}, T'A list of possible peds in the game')

        for PedList as Model do
            self.model_changer_ped_list:action(Model, {}, T'Change your model to this ped', function()
                local Hash = util.joaat(Model)
                self.RequestModel(Hash)
                while not self.HasModelLoaded(Hash) do
                    util.yield()
                end
                self.SetPlayerModel(PlayerID, Hash)
                self.SetModelAsNoLongerNeeded(Hash)
            end)
        end

        self.play_cutscene = self.cutscene:text_input(T'Play Cutscene', {T'rplaycutscene'}, T'Play a cutscene', function(Cutscene)
            self.RequestCutscene(Cutscene, 8)
            while not self.HasCutsceneLoaded(Cutscene) do
                util.yield()
            end
            self.StartCutscene(Cutscene)
        end, 'abigail_mcs_1_concat')

        self.stop_cutscene = self.cutscene:action(T'Stop Cutscene', {T'rstopcutscene'}, T'Stop the cutscene you are currently playing', function()
            self.StopCutsceneImmediately()
        end)

        self.cutscene_list = self.cutscene:list(T'Cutscenes', {}, T'A list of cutscenes in the game')

        for Cutscenes as Cutscene do
            self.cutscene_list:action(Cutscene, {}, T'Play this cutscene', function()
                self.RequestCutscene(Cutscene, 8)
                while not self.HasCutsceneLoaded(Cutscene) do
                    util.yield()
                end
                self.StartCutscene(Cutscene)
            end)
        end

        self.auto_bst = self.pvp_helper:toggle(T'Auto BST', {T'rautobst'}, T'Automatically use BST when another player drops it', function(state)
            if state then
                local BSTPickups = {}
                util.create_tick_handler(function()
                    if self.auto_bst == false then
                        return false
                    end

                    for entities.get_all_pickups_as_pointers() as Pickup do
                        local Model = util.reverse_joaat(entities.get_model_hash(Pickup))
                        if Model:find(S.Data.Models.BST) then
                            if not BSTPickups[Pickup] then
                                BSTPickups[Pickup] = true
                                local Ref = self.instant_bst
                                if Ref:isValid() then
                                    util.yield(3000)
                                    Ref:trigger()
                                end
                            end
                        end
                    end
                end)
            end
        end)

        if S.Settings:IsSet(S.SettingsBits.DevMode) then
            self.auto_ewo = self.pvp_helper:toggle_loop(T'Auto EWO', {}, T'Automatically ewo when you are low on health', function()
                local Ped = players.user_ped()
                local Health = self.GetEntityHealth(Ped)
                local MaxHealth = self.GetEntityMaxHealth(Ped)
                local HealthPercent = (Health / MaxHealth) * 100

                if HealthPercent < 90 and not self.IsEntityDead(Ped) then
                    self:ShootPlayer(PlayerID, util.joaat('WEAPON_RPG'), 9999)
                end
            end)
        end

        self.root:divider('')

        self.root:action(T'Max Health', {T'rmaxhealth'}, T'Set your health to max', function()
            local Ped = players.user_ped()
            self.SetEntityHealth(Ped, self.GetEntityMaxHealth(Ped))
        end)
    
        self.root:action(T'Max Armour', {T'rmaxarmour'}, T'Set your armour to max', function()
            local Ped = players.user_ped()
            self.SetPedArmour(Ped, self.GetPlayerMaxArmour(PlayerID))
        end)

        self.root:action(T'Infinite Snacks And Armor', {T'rinfiniteinventory'}, T'Gives you infinite snacks and armor in your inventory', function()
            local Value = S.MAX_INT
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NO_BOUGHT_YUM_SNACKS'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_'.. 'NO_BOUGHT_HEALTH_SNACKS'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NO_BOUGHT_EPIC_SNACKS'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NUMBER_OF_CHAMP_BOUGHT'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NUMBER_OF_ORANGE_BOUGHT'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NUMBER_OF_BOURGE_BOUGHT'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'NUMBER_OF_SPRUNK_BOUGHT'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'CIGARETTES_BOUGHT'), 0)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'MP_CHAR_ARMOUR_1_COUNT'), 0)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'MP_CHAR_ARMOUR_2_COUNT'), 0)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'MP_CHAR_ARMOUR_3_COUNT'), 0)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'MP_CHAR_ARMOUR_4_COUNT'), 0)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'MP_CHAR_ARMOUR_5_COUNT'), Value)
            self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'BREATHING_APPAR_BOUGHT'), Value)
        end)

        self.instant_bst = self.root:action(T'Instant BST', {T'rinstantbst'}, T'Instantly reap the reward of bst', function()
            local BSTLocal = self.ScriptLocal('freemode', Globals.InstantBSTLocal)
            local BST = self.ScriptGlobal(Globals.InstantBST)

            if BSTLocal ~= 0 then
                self.WriteByte(BST, 1)
                self.WriteByte(BSTLocal, 0)
            end
        end)

        self.teleport_hospital = self.root:action(T'Teleport To Nearest Hospital', {T'rtpnearbyhospital'}, T'Teleport you to the nearest hospital as if someone just used the orbital cannon on you', function()
            local HospitalTP = self.ScriptGlobal(Globals.TeleportNearestHospital)
            self.WriteByte(HospitalTP, 1)
            util.yield(2000)
            self.WriteByte(HospitalTP, 0)
        end)

        self.equip_ballistic_armor = self.root:action(T'Equip Ballistic Armor', {T'requiparmor'}, T'Equip ballistic armor', function()
            local Armor = self.ScriptGlobal(Globals.EquipBallisticArmor)
            if self.ReadByte(Armor) == 0 then
                self.WriteByte(Armor, 1)
            end
        end)
    
        self.cops_turn_blind_eye = self.root:action(T'Cops Turn Blind Eye', {T'rcopsturnblindeye'}, T'Makes the cops turn a blind eye to you', function()
            local BlindEye = self.ScriptGlobal(Globals.BribeAuthorities)
            self.WriteByte(BlindEye, S.BitMask:Set(self.ReadByte(BlindEye), Bits.BribeAuthorities))
            util.yield(100)
            self.WriteByte(BlindEye, S.BitMask:Clear(self.ReadByte(BlindEye), Bits.BribeAuthorities))
            self.WriteByte(BlindEye, S.BitMask:Set(self.ReadByte(BlindEye), 0xFFFFFFFF))
            self.WriteByte(BlindEye, S.BitMask:Clear(self.ReadByte(BlindEye), 0xFFFFFFFF))
            util.yield_once()
            self.WriteByte(BlindEye, S.Bit:Set(self.ReadByte(BlindEye), Bits.CopsTurnBlindEye))
        end)

        self.off_the_radar = self.root:action(T'Off The Radar', {T'rofftheradar'}, T'Gives you off the radar', function()
            self:OffTheRadar(false)
        end)

        self.ghost_org = self.root:action(T'Ghost Organisation', {T'rghostorg'}, T'Gives you ghost organisation', function()
            self:OffTheRadar(true)
        end)

       self.reset_otr_timer = self.root:action(T'Reset OTR/Ghost Org Timer', {T'rresetotrghostorgtimer'}, T'Reset the timer for off the radar/ghost org', function()
            self.WriteInt(self.ScriptGlobal(Globals.OtrGhostTimer), self.GetNetworkTime())
        end)
    
        self.disable_otr = self.root:action(T'Disable Ghost Org / OTR', {T'rstophiding'}, T'Disable off the radar / ghost org', function()
            self:DisableOffTheRadar()
        end)

        self.disable_blindeye = self.root:action(T'Disable Blind Eye', {T'stopblindeye'}, T'Disable the cops turning a blind eye to you', function()
            self.WriteByte(self.ScriptGlobal(Globals.BribeAuthorities), 0)
        end)
    
        self.root:action(T'Disable BST', {T'disablebst'}, T'Disable bst', function()
            local BST = self.ScriptGlobal(Globals.DisableBST)
            local BBitfield = Bitfield.new(self.ReadByte(BST))
            if BBitfield:IsSet(1 << 0) then
                BBitfield:Set(0b00000111)
                BBitfield(BST, 8)
            end
        end)

        self.root:action(T'Suicide', {}, T'Kill yourself using an RPG', function()
            self:ShootPlayer(PlayerID, util.joaat('WEAPON_RPG'), 9999)
        end)

        self.root:action(T'Improved Suicide', {}, T'Same as Stand\'s but doesn\'t give the other player the kill', function()
            for pid = 0, S.MAX_PLAYERS do
                local ped = self.GetPlayerPed(pid)
                self.ClearEntityLastDamageEntity(ped)
            end
            util.yield_once()
            self.SetEntityHealth(players.user_ped(), 0)
        end)
    end

    function SuperPunch(ExplosionType, Damage, isAudible, isInvisible, cameraShake)
        local Ped = players.user_ped()
        if util.reverse_joaat(self.GetSelectedPedWeapon(Ped)) == 'WEAPON_UNARMED' then
            if self.GetPedLastWeaponImpactCoord(Ped, self.ImpactCoords) then
                self.SetEntityProofs(Ped, true, true, true, true, true, true, true, true)
                self.AddOwnedExplosion(Ped, self.ImpactCoords.x, self.ImpactCoords.y, self.ImpactCoords.z, ExplosionType, Damage, isAudible, isInvisible, cameraShake)
                util.yield(500)
                self.SetEntityProofs(Ped, false, false, false, false, false, false, false, false)
            end
        end
    end

    function ShootPlayer(Target, WeaponHash, Damage)
        local Player = self.GetPlayerPed(Target)
        local Pos = self.GetOffsetFromEntityInWorldCoords(Player, 0.0, 0.0, 0.0)
        self.ShootSingleBulletBetweenCoords(Pos.x, Pos.y, Pos.z, Pos.x, Pos.y, Pos.z, Damage or 100, true, WeaponHash, Player, true, false, 1000.0)
    end

    function OffTheRadar(GhostOrg=false)
        local Radar = self.ScriptGlobal(Globals.LegitOffTheRadar)
        local Timer = self.ScriptGlobal(Globals.OtrGhostTimer)
        local ForceGhost = self.ScriptGlobal(Globals.AbilitiesBitfield)

        if self.ReadByte(Radar) == 0 then
            local GBitfield = Bitfield.new(self.ReadInt(ForceGhost))
            if GhostOrg then GBitfield:Set(Bits.OffRadar) else GBitfield:Clear(Bits.OffRadar) end
            GBitfield(ForceGhost, 8)
            self.WriteByte(Radar, 1)
            self.WriteInt(Timer, self.GetNetworkTime())
        end
    end

    function DisableOffTheRadar()
        local Radar = self.ScriptGlobal(Globals.LegitOffTheRadar)
        local Timer = self.ScriptGlobal(Globals.OtrGhostTimer)

        if self.ReadByte(Radar) then
            self.WriteByte(Radar, 0)
            self.WriteByte(Timer, 0)
        end
    end

    --[[void]] static function ClearEntityLastDamageEntity(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0xA72CD9CA74A5ECBA)end
    --[[BOOL (bool)]] static function HasModelLoaded(--[[Hash (int)]] model)native_invoker.begin_call()native_invoker.push_arg_int(model)native_invoker.end_call_2(0x98A4EB5D89A0C952)return native_invoker.get_return_value_bool()end
    --[[void]] static function RequestModel(--[[Hash (int)]] model)native_invoker.begin_call()native_invoker.push_arg_int(model)native_invoker.end_call_2(0x963D27A58DF860AC)end
    --[[BOOL (bool)]] static function IsModelValid(--[[Hash (int)]] model)native_invoker.begin_call()native_invoker.push_arg_int(model)native_invoker.end_call_2(0xC0296A2EDF545E92)return native_invoker.get_return_value_bool()end
    --[[void]] static function SetModelAsNoLongerNeeded(--[[Hash (int)]] model)native_invoker.begin_call()native_invoker.push_arg_int(model)native_invoker.end_call_2(0xE532F5D78798DAAB)end
    --[[void]] static function RequestCutscene(--[[string]] cutsceneName,--[[int]] flags)native_invoker.begin_call()native_invoker.push_arg_string(cutsceneName)native_invoker.push_arg_int(flags)native_invoker.end_call_2(0x7A86743F475D9E09)end
    --[[BOOL (bool)]] static function HasCutsceneLoaded()native_invoker.begin_call()native_invoker.end_call_2(0xC59F528E9AB9F339)return native_invoker.get_return_value_bool()end
    --[[void]] static function StartCutscene(--[[int]] flags)native_invoker.begin_call()native_invoker.push_arg_int(flags)native_invoker.end_call_2(0x186D5CB5E7B0FF7B)end
    --[[BOOL (bool)]] static function StatSetInt(--[[Hash (int)]] statName,--[[int]] value,--[[BOOL (bool)]] save)native_invoker.begin_call()native_invoker.push_arg_int(statName)native_invoker.push_arg_int(value)native_invoker.push_arg_bool(save)native_invoker.end_call_2(0xB3271D7AB655B441)return native_invoker.get_return_value_bool()end
    --[[void]] static function StopCutsceneImmediately()native_invoker.begin_call()native_invoker.end_call_2(0xD220BDD222AC4A1E)end
end

return SelfOptions