local T, S = require('translations'), require('shared')
local Bitfield = require('bitfield')
local G = require('script_globals')
local Globals = G.globals

pluto_class Arcade
    arcade_setups = {
        28192,
        28155,
        27227,
        28156,
        28157
    }

    function __construct(root)
        self.root = root:list(T'Arcade', {T'rarcade'}, '')
        self.arcade_bitfield = pluto_new Bitfield(0, Globals.UnlockArcades:g())

        self:Init()
    end

    function Init()
        self:CreateSafe()
        self:CreateArcade()
    end

    function CreateSafe()
        self.arcade = self.root:list(T'Arcade Safe', {}, T'Arcade Safe related options')
        self.trigger_production = self.arcade:action(T'Trigger Production', {}, T'Trigger production for arcade safe', function()
            self:TriggerArcadeSafeProduction()
        end)

        self.arcade:action(T'Collect', {T'rarsafe'}, T'Collect money from the safe remotely without having to open it or even be near it', function()
            self:CollectSafeMoney()
        end)

        self.arcade:divider('')

        self.auto_collect = self.arcade:toggle_loop(T'Auto Collect', {}, T'Auto collect money from the safe when entering your arcade', function()
            if memory.read_int(Globals.ArcadeSafeValue:g()) ~= 0 then
                self:CollectSafeMoney()
                util.yield(500)
            end
        end)

        local is_running = false
        self.afk_loop = self.arcade:toggle_loop(T'AFK Loop', {}, T'AFK Loop you only need to be in your arcade for this', function()
            util.spoof_script(G.NCS, function() is_running = true end)
            if not is_running then return end
            self.trigger_production:trigger()
            repeat
                util.yield_once()
            until memory.read_int(Globals.ArcadeSafeValue:g()) ~= 0
            self:CollectSafeMoney()
            repeat
                util.yield_once()
            until memory.read_int(Globals.ArcadeSafeValue:g()) == 0
            is_running = false
        end)

        self.display_money = self.arcade:toggle_loop(T'Safe Value', {}, T'Shows how much money you have in your safe', function()
            local money = memory.read_int(Globals.ArcadeSafeValue:g())
            util.draw_debug_text($'Arcade Safe: ${money}')
        end)

        self.root:divider('')
    end

    function CreateArcade()
        self.root:action(T'Bypass Setup', {}, T'Bypass arcade setup missions', function()
            if SCRIPT_CAN_CONTINUE then
                self:BypassArcadeSetup()
            end
        end)

        self.unlock_arcades = self.root:action(T'Unlock Arcades', {T'raunlockarcades'}, T'Unlocks arcades on mazebank without going to Lester', function()
            self.arcade_bitfield.value = memory.read_int(self.arcade_bitfield.addr)
            self.arcade_bitfield:Set(memory.bits.masks.UnlockArcades)
        end)

        self.root:toggle(T'Wonderama', {}, T'Unlock Wonderama arcade', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockArcade(1, state)
            end
        end, self:IsWonderamaArcadeUnlocked())

        self.root:toggle(T'Eight Bit', {}, T'Unlock Eight Bit arcade', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockArcade(2, state)
            end
        end, self:IsEightBitArcadeUnlocked())

        self.root:toggle(T'Garage', {}, T'Unlock garage without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockArcadeGarage(state)
            end
        end, self:IsArcadeGarageUnlocked())

        self.root:toggle(T'Master Control Terminal', {}, T'Unlock master control terminal without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockArcadeMasterControlTerminal(state)
            end
        end, self:IsArcadeMasterControlTerminalUnlocked())

        self.root:toggle(T'Weapon Workshop', {}, T'Unlock weapon workshop without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockArcadeWeaponWorkshop(state)
            end
        end, self:IsArcadeWeaponWorkshopUnlocked())
    end

    function TriggerArcadeSafeProduction()
        local char_slot = util.get_char_slot()
        for i = Globals.ArcadeSafeIncomeStart, Globals.ArcadeSafeIncomeEnd do
            memory.write_int(memory.script_global(262145 + i), 200000)
        end
        memory.write_int(Globals.ArcadeSafeCapacity:g(), 200000)
        stats.stat_set_int(($'MP{char_slot}_ARCADE_PAY_TIME_LEFT'):joaat(), 1, true)
    end

    function CollectSafeMoney()
        local trigger = memory.script_local(table.unpack(Globals.TriggerArcadeSafeCollection))
        local trigger1 = memory.script_local(table.unpack(Globals.TriggerArcadeSafeCollection1))

        if trigger ~= 0 and trigger1 ~= 0 then
            memory.write_byte(trigger, 1)
            memory.write_int(trigger1, 15)
        end
    end

    function IsArcadeSetup()
        local bypass = Globals.ArcadeStatsBase:g() + 0x8
        return memory.bits:check(memory.read_int(bypass), memory.bits.masks.ArcadeSetup)
    end

    function UnlockArcade(index, state)
        local unlock = Globals.ArcadeStatsBase:g()
        memory.write_byte(unlock, memory.bits:clear(memory.read_byte(unlock), memory.bits.masks.ClearUnlockedArcade))
        memory.write_byte(unlock, memory.bits:set(memory.read_byte(unlock), index))
    end

    function IsWonderamaArcadeUnlocked()
        local unlock = Globals.ArcadeStatsBase:g()
        return memory.bits:check(memory.read_byte(unlock), memory.bits.masks.ArcadeWonderama)
    end

    function IsEightBitArcadeUnlocked()
        local unlock = Globals.ArcadeStatsBase:g()
        return memory.bits:check(memory.read_byte(unlock), memory.bits.masks.ArcadeEightBit)
    end

    function BypassArcadeSetup()
        local char_slot = util.get_char_slot()
        for self.arcade_setups as setup do stats.set_packed_stat_bool_code(setup, true, char_slot) end
        S:NewSessionMsg()
    end

    function UnlockArcadeGarage(state)
        local unlock = Globals.ArcadeStatsBase:g() + 0x8
        memory.write_byte(unlock, memory.bits:setbool(memory.read_byte(unlock), memory.bits.masks.ArcadeGarageUnlock, state))
    end

    function IsArcadeGarageUnlocked()
        local unlock = Globals.ArcadeStatsBase:g() + 0x8
        return memory.bits:check(memory.read_byte(unlock), memory.bits.masks.ArcadeGarageUnlock)
    end

    function UnlockArcadeMasterControlTerminal(state)
        local unlock = Globals.ArcadeStatsBase:g() + 0x8
        memory.write_int(unlock, memory.bits:setbool(memory.read_int(unlock), memory.bits.masks.ArcadeMCTUnlock, state))
    end

    function IsArcadeMasterControlTerminalUnlocked()
        local unlock = Globals.ArcadeStatsBase:g() + 0x8
        return memory.bits:check(memory.read_int(unlock), memory.bits.masks.ArcadeMCTUnlock)
    end

    function UnlockArcadeWeaponWorkshop(state)
        local unlock = Globals.ArcadeStatsBase:g() + 0x8
        memory.write_short(unlock, memory.bits:setbool(memory.read_short(unlock), memory.bits.masks.ArcadeWeaponWorkshopUnlock, state))
    end

    function IsArcadeWeaponWorkshopUnlocked()
        local unlock = Globals.ArcadeStatsBase:g() + 0x8
        return memory.bits:check(memory.read_short(unlock), memory.bits.masks.ArcadeWeaponWorkshopUnlock)
    end

    function ArcadeUnlockNanoDroneStation(state)
        local unlock = Globals.ArcadeStatsBase:g() + 0x8
        memory.write_int(unlock, memory.bits:setbool(memory.read_int(unlock), memory.bits.masks.ArcadeUnlockNanoDroneStation, state))
    end

    function IsArcadeNanoDroneStationUnlocked()
        local unlock = Globals.ArcadeStatsBase:g() + 0x8
        return memory.bits:check(memory.read_int(unlock), memory.bits.masks.ArcadeUnlockNanoDroneStation)
    end
end

return Arcade