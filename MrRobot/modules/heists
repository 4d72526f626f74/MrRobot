local T, S = require('translations'), require('shared')
local Globals = require('script_globals')
local Bit, BitMask = S.Bit, S.BitMask

local CharSlot, PlayerID = S.CharSlot, S.PLAYER_ID

pluto_class Heists
    ScriptGlobal = S.ScriptGlobal
    ScriptLocal = S.ScriptLocal
    Alloc = memory.alloc
    ReadByte = memory.read_byte
    ReadShort = memory.read_short
    ReadInt = memory.read_int
    ReadFloat = memory.read_float
    ReadString = memory.read_string
    WriteByte = memory.write_byte
    WriteShort = memory.write_short
    WriteInt = memory.write_int
    WriteFloat = memory.write_float
    WriteString = memory.write_string

    function __construct(root)
        self.root = root:list(T'Heists', {T'rheists'}, T'Heists')
        self.cayo = self.root:list(T'Cayo Perico', {T'cayo'}, T'Cayo Perico')
        self.casino = self.root:list(T'Diamond Casino', {T'casino'}, T'Diamond Casino')
        self.gate_ptr = memory.alloc(4)
        self.impact_coords = v3.new()
        self.gate_coords = {
            SECONDARY_TARGET_BASEMENT_DOOR = v3.new(5002.2915039062, -5746.7397460938, 14.941325187683),
            BASEMENT_ENTRY_DOOR_1 = v3.new(5006.6015625, -5734.466796875, 15.936750411987),
            BASEMENT_ENTRY_DOOR_2 = v3.new(4992.8266601562, -5756.6586914062, 15.988387107849),
            MAIN_GATE = v3.new(4987.5874023438, -5718.634765625, 20.781032562256),
            MAIN_GATE_1 = v3.new(4984.1337890625, -5709.2485351562, 20.781032562256),
            MAIN_GATE_2 = v3.new(4981.0122070312, -5712.7470703125, 20.781032562256),
            MAIN_GATE_3 = v3.new(4990.6811523438, -5715.1059570312, 20.781032562256),
            ARCH_GATE_RIGHT = v3.new(4993.048828125, -5758.0986328125, 20.270370483398),
            ARCH_GATE_RIGHT_1 = v3.new(4998.6025390625, -5733.0712890625, 20.270597457886),
            ARCH_GATE_LEFT = v3.new(4994.3681640625, -5755.9975585938, 20.270370483398),
            ARCH_GATE_LEFT_1 = v3.new(5000.2680664062, -5731.2290039062, 20.270597457886),
            PRIMARY_TARGET_GATE = v3.new(5007.6196289062, -5753.6083984375, 15.572952270508),
            BASEMENT_FINGERPRINT_ENTRY_GATE = v3.new(4998.0825195312, -5743.1323242188, 14.941325187683)
        }

        self:CreateCayoPerico()
        self:CreateDiamondCasino()
    end

    function CreateCayoPerico()
        self.cayo:action(T'Delete Primary Target', {}, T'Will not work if you are not the host', function()
            local glass = self:FindEntityByModel(entities.get_all_objects_as_pointers, 'glass_disp')
            local vault = self:FindEntityByModel(entities.get_all_objects_as_pointers, 'h4_safe')
            local blip_id = BitMask:Get(S.BlipIds >> 0x32, 0x3FF)
    
            if glass ~= 0 then entities.delete_by_pointer(glass) end
            if vault ~= 0 then entities.delete_by_pointer(vault) end
    
            local blip = self.GetFirstBlipInfoId(blip_id)
            repeat
                util.yield_once()
                blip = self.GetNextBlipInfoId(blip_id)
            until blip ~= 0
    
            if blip ~= 0 then
                local entity = self.GetBlipInfoIdEntityIndex(blip)
                if entity ~= 0 and self.DoesEntityExist(entity) then
                    entities.delete_by_handle(entity)
                end
            end
        end)
    
        self.cayo:action(T'Delete Gate Key', {}, T'Will not work  if yu are not the host', function()
            local key = self:FindEntityByModel(entities.get_all_pickups_as_pointers, 'key')
            if key ~= 0 then entities.delete_by_pointer(key) end
        end)
    
        self.cayo:action(T'Delete Keycards', {}, T'Will not work if you are not the host', function()
            self:DeleteEntitiesByModel(entities.get_all_pickups_as_pointers, 'keycard')
        end)
    
        self.cayo:action(T'Delete Vault Cash', {}, T'Will not work if you are not the host', function()
            local cash = self:FindEntityByModel(entities.get_all_pickups_as_pointers, 'cash')
            if cash ~= 0 then entities.delete_by_pointer(cash) end
        end)
    
        self.cayo:action(T'Give Guards Minigun', {}, T'Give all the guards a minigun', function()
            for i, entity in pairs(entities.get_all_peds_as_pointers()) do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('cartelguard') or model:find('hc_gun') then
                    local handle = entities.pointer_to_handle(entity)
                    self.RemoveAllPedWeapons(handle, true)
                    self.GiveWeaponToPed(handle, util.joaat('WEAPON_MINIGUN'), 9999, true)
                    self.SetPedFiringPattern(handle, util.joaat('FIRING_PATTERN_FULL_AUTO'))
                    self.SetPedAccuracy(handle, 100)
                end
            end
        end)
    
        self.cayo:action(T'Disarm Guards', {}, T'Remove all weapons from guards', function()
            for i, entity in pairs(entities.get_all_peds_as_pointers()) do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('cartelguard') or model:find('hc_gun') then
                    local handle = entities.pointer_to_handle(entity)
                    S.RequestControl(handle)
                    entities.set_can_migrate(entity, false)
                    self.RemoveAllPedWeapons(handle, true)
                end
            end
        end)
    
        self.cayo:action(T'Remove Drainage Pipe', {}, T'Deletes the drainage pipe', function()
            for entities.get_all_objects_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('prop_chem_grill') then
                    entities.delete_by_pointer(entity)
                end
            end
        end)
    
        self.cayo:action(T'Remove All Cameras', {}, T'Deletes all the cameras', function()
            for entities.get_all_objects_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('cctv_cam') then
                    entities.delete_by_pointer(entity)
                end
            end
        end)
    
        self.cayo:action(T'Remove All Guards', {}, T'Delete all the guards', function()
            for entities.get_all_peds_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('cartelguard') or model:find('hc_gun') then
                    entities.delete_by_pointer(entity)
                end
            end
        end)

        self.cayo:action(T'Make Guards Useless', {}, T'Forces the guards to fall over then binds their ankles preventing them from getting up', function()
            for entities.get_all_peds_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('cartelguard') or model:find('hc_gun') then
                    local handle = entities.pointer_to_handle(entity)
                    S.RequestControl(handle)
                    entities.set_can_migrate(entity, false)

                    local pos = self.GetEntityCoords(handle)
                    local health = self.GetEntityHealth(handle)

                    self.SetPedCanRagdoll(handle, true)
                    self.SetPedToRagdoll(handle, 1, 1, 0, true, true, false)
                    self.ApplyForceToEntityCenterOfMass(handle, 1, 0.0, pos.y - 2, 0.0, true, true, false, true)
                    self.SetEnableBoundAnkles(handle, true)
                    self.SetEntityHealth(handle, health)
                end
            end
        end)
    
        self.cayo:action(T'Ragdoll Guards', {}, T'Make all the guards fall over', function()
            for entities.get_all_peds_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('cartelguard') or model:find('hc_gun') then
                    local handle = entities.pointer_to_handle(entity)
                    S.RequestControl(handle)
                    entities.set_can_migrate(entity, false)

                    local pos = self.GetEntityCoords(handle)
                    local health = self.GetEntityHealth(handle)

                    self.SetPedCanRagdoll(handle, true)
                    self.SetPedToRagdoll(handle, 1, 1, 0, true, true, false)
                    self.ApplyForceToEntityCenterOfMass(handle, 1, 0.0, pos.y - 2, 0.0, true, true, false, true)
                    self.SetEntityHealth(handle, health)
                end
            end
        end)
    
        self.cayo:action(T'Collect Primary Target', {}, T'Collect the primary target instantly', function()
            local glass = self:FindEntityByModel(entities.get_all_objects_as_pointers, 'glass_disp')
            local vault = self:FindEntityByModel(entities.get_all_objects_as_pointers, 'h4_safe')
            local blip_id = BitMask:Get(S.BlipIds >> 0x32, 0x3FF)
    
            if glass ~= 0 then entities.delete_by_pointer(glass) end
            if vault ~= 0 then entities.delete_by_pointer(vault) end
    
            local blip = self.GetFirstBlipInfoId(blip_id)
            repeat
                util.yield_once()
                blip = self.GetNextBlipInfoId(blip_id)
            until blip ~= 0
    
            if blip ~= 0 then
                local entity = self.GetBlipInfoIdEntityIndex(blip)
                if entity ~= 0 and self.DoesEntityExist(entity) then
                    local pos = self.GetEntityCoords(players.user_ped())
                    self.SetEntityCoords(entity, pos.x, pos.y, pos.z - 1.0, false, false, false, false)
                    self.SetPedToRagdoll(players.user_ped(), 10, 10, 0, false, false, false)
                end
            end
        end)
    
        self.cayo:action(T'Bring Targets To Player', {}, T'Teleports all secondary loot to you', function()
            for entities.get_all_objects_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('gold') or model:find('coke') or model:find('painting') or model:find('weed') then
                    local handle = entities.pointer_to_handle(entity)
                    S.RequestControl(handle)
                    entities.set_can_migrate(entity, false)
                    local pos = self.GetEntityCoords(players.user_ped())
                    self.SetEntityCoords(handle, pos.x, pos.y, pos.z - 1.0, false, false, false, false)
                end
            end
        end)
    
        self.auto_solve_fingerprints = self.cayo:action(T'Auto Solve Fingerprints', {}, T'Completes the hacking for you', function()
            local fingerprints = self.ScriptLocal('fm_mission_controller_2020', Globals.SkipHacking)
            if fingerprints ~= 0 then
                for i = 0, 3 do
                    for j = 0, 7 do
                        self.WriteByte(fingerprints + (168 * i) + (24 * j) + (32 * i), j % 8)   
                    end
                end
            end
        end)

        self.cayo:action(T'Refresh Planning Board', {}, T'Does what it says', function()
            -- originally found by IceDoomfist but updated by me for latest GTA update
            util.spoof_script('heist_island_planning', function()
                local board = self.ScriptLocal('heist_island_planning', Globals.RefreshPlannningBoard)
                self.WriteByte(board, 2)
            end)
        end)

        self.cayo:divider('')
        self.cayo:toggle_loop(T'Skip Hacking', {}, T'Does the same as auto solve fingerprints but it is automated', function()
            self.auto_solve_fingerprints:trigger()
        end)

        self.cayo:toggle_loop(T'Immortal Guards', {}, T'Make the guards immortal', function()
            for entities.get_all_peds_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('cartelguard') or model:find('hc_gun') then
                    local handle = entities.pointer_to_handle(entity)
                    S.RequestControl(handle)
                    entities.set_can_migrate(entity, false)
                    self.SetEntityInvincible(handle, true)
                end
            end
        end,
        function()
            for entities.get_all_peds_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('cartelguard') or model:find('hc_gun') then
                    local handle = entities.pointer_to_handle(entity)
                    S.RequestControl(handle)
                    entities.set_can_migrate(entity, false)
                    self.SetEntityInvincible(handle, false)
                end
            end
        end)
    
        self.cayo:toggle(T'Guards Insta Kill', {}, T'Guards instantly kill you', function(state)
            self.SetAiWeaponDamageModifier(state and S.MAX_INT or 1.0)
        end)
    
        self.cayo:toggle_loop(T'Guards Explosive Ammo', {}, T'Gives the guards explosive ammo', function()
            for entities.get_all_peds_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('cartelguard') or model:find('hc_gun') then
                    local handle = entities.pointer_to_handle(entity)
                    if self.GetPedLastWeaponImpactCoord(handle, self.impact_coords) then
                        self.SetEntityProofs(handle, false, false, true, false, false, false, true, false)
                        self.AddOwnedExplosion(handle, self.impact_coords.x, self.impact_coords.y, self.impact_coords.z, 18, 1.0, true, false, 0.0)
                    end
                end
            end
        end)
    
        self.cayo:toggle_loop(T'Auto Collect Mission Pickups', {}, T'Collects mission pickups for you, such as keycards, gatekeys, vault cash (enable before entering the compound otherwise vault cash will not be collected)', function()
            for entities.get_all_pickups_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('securitycard') or model:find('keys_jail') or model:find('cash') then
                    local handle = entities.pointer_to_handle(entity)
                    local pos = self.GetEntityCoords(players.user_ped())
                    self.SetEntityCoords(handle, pos.x, pos.y, pos.z - 1.0, false, false, false, false)
                end
            end
        end)
    
        self.cayo:toggle(T'Disable Collisions', {}, T'Disables collisions for certain objects such as doors, gates and elevators (elevators in the office)', function(state)
            for entities.get_all_objects_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
    
                if model:find('elevator') or model:find('gate') or model:find('door') or model:find('chain_lock') then
                    local handle = entities.pointer_to_handle(entity)
                    self.SetEntityCollision(handle, not state, false)
                end
            end
        end)
    
        self.cayo:toggle(T'Poor Guard Accuracy', {}, T'Makes guards have poor accuracy', function(state)
            for entities.get_all_peds_as_pointers() as entity do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
    
                if model:find('cartelguard') or model:find('hc_gun') then
                    local handle = entities.pointer_to_handle(entity)
                    self.SetPedAccuracy(handle, state and 0 or 100)
                end
            end
        end)
    
        self.cayo:toggle_loop(T'Unlock All Gates', {}, T'Unlocks all gates but only when you are close to them', function()
            local hashes = self:FindAllGates()
            local pos = self.GetEntityCoords(players.user_ped())
    
            for k, v in ipairs(hashes) do
                if v.hash ~= 0 then
                    local ent_pos = entities.get_position(v.entity)
                    local dist = self.GetDistanceBetweenCoords(pos.x, pos.y, pos.z, ent_pos.x, ent_pos.y, ent_pos.z, true)
    
                    if dist <= 0.72 then
                       self:UnlockDoor(v.hash)
                    end
                end
            end
        end)
    
        self.cayo:toggle(T'Lock All Gates', {}, T'Locks all gates', function(state)
            local hashes = self:FindAllGates()
    
            for k, v in ipairs(hashes) do
                if v.hash ~= 0 then
                    self:LockDoor(v.hash)
                end
            end
        end)

        self.break_keycard_system = self.cayo:toggle(T'Break Dual Keycard System', {}, T'Break the dual keycard system for getting to the secondary targets', function(state)
            if state then
                util.create_tick_handler(function()
                    if self.break_keycard_system.value == false then
                        return false
                    end

                    util.spoof_script('fm_mission_controller_2020', function()
                        local l = self.ScriptLocal('fm_mission_controller_2020', 19123)
                        if l ~= 0 then
                            self.WriteInt(l, self.GetNetworkTime())
                            self.WriteInt(l + 0x8, 0)
                        end
                    end)
                end)
            end
        end)
    
        self.cayo:divider('')

        local gate_manager = self.cayo:list(T'Gate Manager', {}, T'Manages all the gates within the compound on the island')
        local gm_compound = gate_manager:list(T'Compound', {}, '')
    
        gm_compound:action(T'Load/Reload Gates', {}, '', function()
            for i, child in pairs(gm_compound:getChildren()) do
                if child:isValid() and child.menu_name ~= 'Load/Reload Gates' then
                    child:delete()
                end
            end
    
            gm_compound:divider('')
    
            local secondary_target_basement_door = self:GetGateFromCoords(self.gate_coords.SECONDARY_TARGET_BASEMENT_DOOR)
            local basement_entry_door_1 = self:GetGateFromCoords(self.gate_coords.BASEMENT_ENTRY_DOOR_1)
            local basement_entry_door_2 = self:GetGateFromCoords(self.gate_coords.BASEMENT_ENTRY_DOOR_2)
            local main_gate = self:GetGateFromCoords(self.gate_coords.MAIN_GATE)
            local main_gate_1 = self:GetGateFromCoords(self.gate_coords.MAIN_GATE_1)
            local main_gate_2 = self:GetGateFromCoords(self.gate_coords.MAIN_GATE_2)
            local main_gate_3 = self:GetGateFromCoords(self.gate_coords.MAIN_GATE_3)
            local arch_gate = self:GetGateFromCoords(self.gate_coords.ARCH_GATE_RIGHT)
            local arch_gate_1 = self:GetGateFromCoords(self.gate_coords.ARCH_GATE_LEFT)
            local arch_gate_2 = self:GetGateFromCoords(self.gate_coords.ARCH_GATE_RIGHT_1)
            local arch_gate_3 = self:GetGateFromCoords(self.gate_coords.ARCH_GATE_LEFT_1)
            local primary_target_gate = self:GetGateFromCoords(self.gate_coords.PRIMARY_TARGET_GATE)
            local basement_fingerprint_entry_gate = self:GetGateFromCoords(self.gate_coords.BASEMENT_FINGERPRINT_ENTRY_GATE)
    
            if primary_target_gate ~= 0 then
                local ptarget_gate = gm_compound:list(T'Primary Target Gate', {}, '')
    
                ptarget_gate:divider('Information')
                ptarget_gate:readonly(T'Entity ID', tostring(primary_target_gate.entity))
                ptarget_gate:readonly(T'Hash', tostring(primary_target_gate.hash))
                ptarget_gate:readonly(T'Model', tostring(primary_target_gate.model))
                ptarget_gate:divider('')
    
                ptarget_gate:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.PRIMARY_TARGET_GATE
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                ptarget_gate:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(primary_target_gate.hash)
                end)
    
                ptarget_gate:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(primary_target_gate.hash)
                end)
    
                ptarget_gate:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(primary_target_gate.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(primary_target_gate.hash, false)
                end)
    
                ptarget_gate:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(primary_target_gate.hash)
                    self.DoorSystemSetOpenRatio(primary_target_gate.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(primary_target_gate.hash, true)
                end)
    
                ptarget_gate:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(primary_target_gate.hash)
                    self.DoorSystemSetOpenRatio(primary_target_gate.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(primary_target_gate.hash, true)
                end)
    
                ptarget_gate:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(primary_target_gate.entity)
                end)
            else
                util.toast(T'Failed to find: Primary Target Gate')
            end
    
            if secondary_target_basement_door ~= 0 then
                local starget_door = gm_compound:list(T'Secondary Target Basement Door', {}, '')
    
                starget_door:divider('Information')
                starget_door:readonly(T'Entity ID', tostring(secondary_target_basement_door.entity))
                starget_door:readonly(T'Hash', tostring(secondary_target_basement_door.hash))
                starget_door:readonly(T'Model', tostring(secondary_target_basement_door.model))
                starget_door:divider('')
    
                starget_door:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.SECONDARY_TARGET_BASEMENT_DOOR
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                starget_door:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(secondary_target_basement_door.hash)
                end)
    
                starget_door:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(secondary_target_basement_door.hash)
                end)
    
                starget_door:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(secondary_target_basement_door.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(secondary_target_basement_door.hash, false)
                end)
    
                starget_door:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(secondary_target_basement_door.hash)
                    self.DoorSystemSetOpenRatio(secondary_target_basement_door.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(secondary_target_basement_door.hash, true)
                end)
    
                starget_door:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(secondary_target_basement_door.hash)
                    self.DoorSystemSetOpenRatio(secondary_target_basement_door.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(secondary_target_basement_door.hash, true)
                end)
    
                starget_door:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(secondary_target_basement_door.entity)
                end)
            else
                util.toast(T'Failed to find: Secondary Target Basement Door')
            end
    
            if basement_entry_door_1 ~= 0 then
                local basement_door_1 = gm_compound:list(T'Basement Entry Door 1', {}, '')
    
                basement_door_1:divider('Information')
                basement_door_1:readonly(T'Entity ID', tostring(basement_entry_door_1.entity))
                basement_door_1:readonly(T'Hash', tostring(basement_entry_door_1.hash))
                basement_door_1:readonly(T'Model', tostring(basement_entry_door_1.model))
                basement_door_1:divider('')
    
                basement_door_1:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.BASEMENT_ENTRY_DOOR_1
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                basement_door_1:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(basement_entry_door_1.hash)
                end)
    
                basement_door_1:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(basement_entry_door_1.hash)
                end)
    
                basement_door_1:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(basement_entry_door_1.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(basement_entry_door_1.hash, false)
                end)
    
                basement_door_1:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(basement_entry_door_1.hash)
                    self.DoorSystemSetOpenRatio(basement_entry_door_1.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(basement_entry_door_1.hash, true)
                end)
    
                basement_door_1:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(basement_entry_door_1.hash)
                    self.DoorSystemSetOpenRatio(basement_entry_door_1.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(basement_entry_door_1.hash, true)
                end)
    
                basement_door_1:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(basement_entry_door_1.entity)
                end)
            else
                util.toast(T'Failed to find: Basement Entry Door 1')
            end
    
            if basement_entry_door_2 ~= 0 then
                local basement_door_2 = gm_compound:list(T'Basement Entry Door 2', {}, '')
    
                basement_door_2:divider('Information')
                basement_door_2:readonly(T'Entity ID', tostring(basement_entry_door_2.entity))
                basement_door_2:readonly(T'Hash', tostring(basement_entry_door_2.hash))
                basement_door_2:readonly(T'Model', tostring(basement_entry_door_2.model))
                basement_door_2:divider('')
    
                basement_door_2:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.BASEMENT_ENTRY_DOOR_2
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                basement_door_2:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(basement_entry_door_2.hash)
                end)
    
                basement_door_2:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(basement_entry_door_2.hash)
                end)
    
                basement_door_2:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(basement_entry_door_2.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(basement_entry_door_2.hash, false)
                end)
    
                basement_door_2:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(basement_entry_door_2.hash)
                    self.DoorSystemSetOpenRatio(basement_entry_door_2.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(basement_entry_door_2.hash, true)
                end)
    
                basement_door_2:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(basement_entry_door_2.hash)
                    self.DoorSystemSetOpenRatio(basement_entry_door_2.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(basement_entry_door_2.hash, true)
                end)
    
                basement_door_2:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(basement_entry_door_2.entity)
                end)
            else
                util.toast(T'Failed to find: Basement Entry Door 2')
            end
    
            if main_gate ~= 0 then
                local main_gate_door = gm_compound:list(T'Main Gate Left (Inner Gate)', {}, '')
    
                main_gate_door:divider('Information')
                main_gate_door:readonly(T'Entity ID', tostring(main_gate.entity))
                main_gate_door:readonly(T'Hash', tostring(main_gate.hash))
                main_gate_door:readonly(T'Model', tostring(main_gate.model))
                main_gate_door:divider('')
    
                main_gate_door:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.MAIN_GATE
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                main_gate_door:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(main_gate.hash)
                end)
    
                main_gate_door:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(main_gate.hash)
                end)
    
                main_gate_door:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(main_gate.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(main_gate.hash, false)
                end)
    
                main_gate_door:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(main_gate.hash)
                    self.DoorSystemSetOpenRatio(main_gate.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(main_gate.hash, true)
                end)
    
                main_gate_door:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(main_gate.hash)
                    self.DoorSystemSetOpenRatio(main_gate.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(main_gate.hash, true)
                end)
    
                main_gate_door:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(main_gate.entity)
                end)
            else
                util.toast(T'Failed to find: Main Gate Left (Inner Gate)')
            end
    
            if main_gate_1 ~= 0 then
                local main_gate_door_1 = gm_compound:list(T'Main Gate Right (Outer Gate)', {}, '')
    
                main_gate_door_1:divider('Information')
                main_gate_door_1:readonly(T'Entity ID', tostring(main_gate_1.entity))
                main_gate_door_1:readonly(T'Hash', tostring(main_gate_1.hash))
                main_gate_door_1:readonly(T'Model', tostring(main_gate_1.model))
                main_gate_door_1:divider('')
    
                main_gate_door_1:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.MAIN_GATE_1
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                main_gate_door_1:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(main_gate_1.hash)
                end)
    
                main_gate_door_1:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(main_gate_1.hash)
                end)
    
                main_gate_door_1:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(main_gate_1.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(main_gate_1.hash, false)
                end)
    
                main_gate_door_1:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(main_gate_1.hash)
                    self.DoorSystemSetOpenRatio(main_gate_1.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(main_gate_1.hash, true)
                end)
    
                main_gate_door_1:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(main_gate_1.hash)
                    self.DoorSystemSetOpenRatio(main_gate_1.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(main_gate_1.hash, true)
                end)
    
                main_gate_door_1:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(main_gate_1.entity)
                end)
            else
                util.toast(T'Failed to find: Main Gate Right (Outer Gate)')
            end
    
            if main_gate_2 ~= 0 then
                local main_gate_door_2 = gm_compound:list(T'Main Gate Left (Outer Gate)', {}, '')
    
                main_gate_door_2:divider('Information')
                main_gate_door_2:readonly(T'Entity ID', tostring(main_gate_2.entity))
                main_gate_door_2:readonly(T'Hash', tostring(main_gate_2.hash))
                main_gate_door_2:readonly(T'Model', tostring(main_gate_2.model))
                main_gate_door_2:divider('')
    
                main_gate_door_2:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.MAIN_GATE_2
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                main_gate_door_2:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(main_gate_2.hash)
                end)
    
                main_gate_door_2:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(main_gate_2.hash)
                end)
    
                main_gate_door_2:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(main_gate_2.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(main_gate_2.hash, false)
                end)
    
                main_gate_door_2:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(main_gate_2.hash)
                    self.DoorSystemSetOpenRatio(main_gate_2.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(main_gate_2.hash, true)
                end)
    
                main_gate_door_2:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(main_gate_2.hash)
                    self.DoorSystemSetOpenRatio(main_gate_2.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(main_gate_2.hash, true)
                end)
    
                main_gate_door_2:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(main_gate_2.entity)
                end)
            else
                util.toast(T'Failed to find: Main Gate Left (Outer Gate)')
            end
    
            if main_gate_3 ~= 0 then
                local main_gate_door_3 = gm_compound:list(T'Main Gate Right (Inner Gate)', {}, '')
    
                main_gate_door_3:divider('Information')
                main_gate_door_3:readonly(T'Entity ID', tostring(main_gate_3.entity))
                main_gate_door_3:readonly(T'Hash', tostring(main_gate_3.hash))
                main_gate_door_3:readonly(T'Model', tostring(main_gate_3.model))
                main_gate_door_3:divider('')
    
                main_gate_door_3:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.MAIN_GATE_3
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                main_gate_door_3:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(main_gate_3.hash)
                end)
    
                main_gate_door_3:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(main_gate_3.hash)
                end)
    
                main_gate_door_3:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(main_gate_3.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(main_gate_3.hash, false)
                end)
    
                main_gate_door_3:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(main_gate_3.hash)
                    self.DoorSystemSetOpenRatio(main_gate_3.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(main_gate_3.hash, true)
                end)
    
                main_gate_door_3:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(main_gate_3.hash)
                    self.DoorSystemSetOpenRatio(main_gate_3.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(main_gate_3.hash, true)
                end)
    
                main_gate_door_3:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(main_gate_3.entity)
                end)
            else
                util.toast(T'Failed to find: Main Gate Right (Inner Gate)')
            end
    
            if basement_fingerprint_entry_gate ~= 0 then
                local basement_fingerprint_entry_gate_door = gm_compound:list(T'Basement Fingerprint Entry Gate', {}, '')
    
                basement_fingerprint_entry_gate_door:divider('Information')
                basement_fingerprint_entry_gate_door:readonly(T'Entity ID', tostring(basement_fingerprint_entry_gate.entity))
                basement_fingerprint_entry_gate_door:readonly(T'Hash', tostring(basement_fingerprint_entry_gate.hash))
                basement_fingerprint_entry_gate_door:readonly(T'Model', tostring(basement_fingerprint_entry_gate.model))
                basement_fingerprint_entry_gate_door:divider('')
    
                basement_fingerprint_entry_gate_door:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.BASEMENT_FINGERPRINT_ENTRY_GATE
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                basement_fingerprint_entry_gate_door:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(basement_fingerprint_entry_gate.hash)
                end)
    
                basement_fingerprint_entry_gate_door:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(basement_fingerprint_entry_gate.hash)
                end)
    
                basement_fingerprint_entry_gate_door:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(basement_fingerprint_entry_gate.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(basement_fingerprint_entry_gate.hash, false)
                end)
    
                basement_fingerprint_entry_gate_door:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(basement_fingerprint_entry_gate.hash)
                    self.DoorSystemSetOpenRatio(basement_fingerprint_entry_gate.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(basement_fingerprint_entry_gate.hash, true)
                end)
    
                basement_fingerprint_entry_gate_door:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(basement_fingerprint_entry_gate.hash)
                    self.DoorSystemSetOpenRatio(basement_fingerprint_entry_gate.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(basement_fingerprint_entry_gate.hash, true)
                end)
    
                basement_fingerprint_entry_gate_door:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(basement_fingerprint_entry_gate.entity)
                end)
            else
                util.toast(T'Failed to find: Basement Fingerprint Entry Gate')
            end
    
            if arch_gate ~= 0 then
                local arch_gate_door = gm_compound:list(T'Arch Gate Left (Left Side)', {}, '')
    
                arch_gate_door:divider('Information')
                arch_gate_door:readonly(T'Entity ID', tostring(arch_gate.entity))
                arch_gate_door:readonly(T'Hash', tostring(arch_gate.hash))
                arch_gate_door:readonly(T'Model', tostring(arch_gate.model))
                arch_gate_door:divider('')
    
                arch_gate_door:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.ARCH_GATE
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                arch_gate_door:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(arch_gate.hash)
                end)
    
                arch_gate_door:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(arch_gate.hash)
                end)
    
                arch_gate_door:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(arch_gate.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(arch_gate.hash, false)
                end)
    
                arch_gate_door:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(arch_gate.hash)
                    self.DoorSystemSetOpenRatio(arch_gate.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(arch_gate.hash, true)
                end)
    
                arch_gate_door:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(arch_gate.hash)
                    self.DoorSystemSetOpenRatio(arch_gate.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(arch_gate.hash, true)
                end)
    
                arch_gate_door:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(arch_gate.entity)
                end)
            else
                util.toast(T'Failed to find: Arch Gate Left (Left Side)')
            end
    
            if arch_gate_1 ~= 0 then
                local arch_gate_door_1 = gm_compound:list(T'Arch Gate Right (Left Side)', {}, '')
    
                arch_gate_door_1:divider('Information')
                arch_gate_door_1:readonly(T'Entity ID', tostring(arch_gate_1.entity))
                arch_gate_door_1:readonly(T'Hash', tostring(arch_gate_1.hash))
                arch_gate_door_1:readonly(T'Model', tostring(arch_gate_1.model))
                arch_gate_door_1:divider('')
    
                arch_gate_door_1:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.ARCH_GATE_1
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                arch_gate_door_1:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(arch_gate_1.hash)
                end)
    
                arch_gate_door_1:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(arch_gate_1.hash)
                end)
    
                arch_gate_door_1:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(arch_gate_1.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(arch_gate_1.hash, false)
                end)
    
                arch_gate_door_1:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(arch_gate_1.hash)
                    self.DoorSystemSetOpenRatio(arch_gate_1.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(arch_gate_1.hash, true)
                end)
    
                arch_gate_door_1:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(arch_gate_1.hash)
                    self.DoorSystemSetOpenRatio(arch_gate_1.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(arch_gate_1.hash, true)
                end)
    
                arch_gate_door_1:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(arch_gate_1.entity)
                end)
            else
                util.toast(T'Failed to find: Arch Gate Right (Left Side)')
            end
    
            if arch_gate_2 ~= 0 then
                local arch_gate_door_2 = gm_compound:list(T'Arch Gate Left (Right Side)', {}, '')
    
                arch_gate_door_2:divider('Information')
                arch_gate_door_2:readonly(T'Entity ID', tostring(arch_gate_2.entity))
                arch_gate_door_2:readonly(T'Hash', tostring(arch_gate_2.hash))
                arch_gate_door_2:readonly(T'Model', tostring(arch_gate_2.model))
                arch_gate_door_2:divider('')
    
                arch_gate_door_2:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.ARCH_GATE_2
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                arch_gate_door_2:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(arch_gate_2.hash)
                end)
    
                arch_gate_door_2:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(arch_gate_2.hash)
                end)
    
                arch_gate_door_2:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(arch_gate_2.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(arch_gate_2.hash, false)
                end)
    
                arch_gate_door_2:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(arch_gate_2.hash)
                    self.DoorSystemSetOpenRatio(arch_gate_2.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(arch_gate_2.hash, true)
                end)
    
                arch_gate_door_2:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(arch_gate_2.hash)
                    self.DoorSystemSetOpenRatio(arch_gate_2.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(arch_gate_2.hash, true)
                end)
    
                arch_gate_door_2:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(arch_gate_2.entity)
                end)
            else
                util.toast(T'Failed to find: Arch Gate Left (Right Side)')
            end
    
            if arch_gate_3 ~= 0 then
                local arch_gate_door_3 = gm_compound:list(T'Arch Gate Right (Right Side)', {}, '')
    
                arch_gate_door_3:divider('Information')
                arch_gate_door_3:readonly(T'Entity ID', tostring(arch_gate_3.entity))
                arch_gate_door_3:readonly(T'Hash', tostring(arch_gate_3.hash))
                arch_gate_door_3:readonly(T'Model', tostring(arch_gate_3.model))
                arch_gate_door_3:divider('')
    
                arch_gate_door_3:action(T'Teleport', {}, T'Teleport to the door', function()
                    local pos = self.gate_coords.ARCH_GATE_3
                    self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, false, false, false, false)
                end)
    
                arch_gate_door_3:toggle_loop(T'Unlock', {}, T'', function()
                    self:UnlockDoor(arch_gate_3.hash)
                end)
    
                arch_gate_door_3:toggle_loop(T'Lock', {}, T'', function()
                    self:LockDoor(arch_gate_3.hash)
                end)
    
                arch_gate_door_3:toggle_loop(T'Remove Spring', {}, T'', function()
                    self.DoorSystemSetSpringRemoved(arch_gate_3.hash, true)
                end,
                function()
                    self.DoorSystemSetSpringRemoved(arch_gate_3.hash, false)
                end)
    
                arch_gate_door_3:action(T'Force Unlock', {}, T'', function()
                    self:UnlockDoor(arch_gate_3.hash)
                    self.DoorSystemSetOpenRatio(arch_gate_3.hash, 1.0, true)
                    self.DoorSystemSetSpringRemoved(arch_gate_3.hash, true)
                end)
    
                arch_gate_door_3:action(T'Force Lock', {}, T'', function()
                    self:LockDoor(arch_gate_3.hash)
                    self.DoorSystemSetOpenRatio(arch_gate_3.hash, 0.0, true)
                    self.DoorSystemSetSpringRemoved(arch_gate_3.hash, true)
                end)
    
                arch_gate_door_3:action(T'Delete', {}, T'', function()
                    entities.delete_by_handle(arch_gate_3.entity)
                end)
            else
                util.toast(T'Failed to find: Arch Gate Right (Right Side)')
            end
        end)
    
        local teleports = self.cayo:list(T'Teleports', {}, T'Teleport to various locations in Cayo Perico')
        local compound_teleports = teleports:list(T'Compound', {}, T'Teleport to various locations in the compound')
        local island_teleports = teleports:list(T'Island', {}, T'Teleport to various locations on the island')
        local exits_teleports = teleports:list(T'Exits', {}, T'Teleport to exit locations (kosatka, docks, airstrip)')
    
        compound_teleports:action(T'Teleport To Main Gate', {}, T'Teleport to the main gate', function()
            self.TeleportToBlip(770)
        end)
    
        compound_teleports:action(T'Keypad (Office)', {}, T'Teleport to the keypad', function()
            self.SetEntityCoords(players.user_ped(), 5010.1064, -5750.2285, 28.845306, false, false, false, false)
        end)
    
        compound_teleports:action(T'Keypad (Basement Gate 1)', {}, T'Teleport to the keypad', function()
            self.SetEntityCoords(players.user_ped(), 4998.503, -5741.256, 14.840623, false, false, false, false)
        end)
    
        compound_teleports:action(T'Keypad (Basement Gate 2)', {}, T'Teleport to the keypad', function()
            self.SetEntityCoords(players.user_ped(), 5000.2285, -5742.254, 14.840579, false, false, false, false)
        end)
    
        compound_teleports:action(T'Primary Target (Inside)', {}, T'Teleport to the primary target', function()
            self.SetEntityCoords(players.user_ped(), 5006.965, -5756.058, 15.484438, false, false, false, false)
        end)
    
        compound_teleports:action(T'Primary Target (Outside)', {}, T'Teleport to the primary target', function()
            self.SetEntityCoords(players.user_ped(), 5008.653, -5752.9556, 15.484442, false, false, false, false)
        end)
    
        compound_teleports:action(T'Secondary Target (Inside)', {}, T'Teleport to the secondary target', function()
            self.SetEntityCoords(players.user_ped(), 5001.242, -5748.7764, 14.840479, false, false, false, false)
        end)
    
        compound_teleports:action(T'Secondary Target (Outside)', {}, T'Teleport to the secondary target', function()
            self.SetEntityCoords(players.user_ped(), 5003.048, -5745.5356, 14.840562, false, false, false, false)
        end)
    
        island_teleports:action(T'Drainage Pipe 1st Checkpoint', {}, T'Teleport to the first checkpoint', function()
            self.SetEntityCoords(players.user_ped(), 5043.1865, -5815.148, -10.635807, false, false, false, false)
        end)
    
        island_teleports:action(T'Drainage Pipe 2nd Checkpoint', {}, T'Teleport to the second checkpoint', function()
            self.SetEntityCoords(players.user_ped(), 5053.362, -5774.8247, -5.1060443    , false, false, false, false)
        end)
    
        exits_teleports:action(T'Teleport To Kosatka', {}, T'Teleport to the kosatka', function()
            self.TeleportToBlip(760)
        end)
    end

    function CreateDiamondCasino()
        self.casino:action(T'Delete All Cameras', {}, T'Delete all the cameras', function()
            for i, entity in pairs(entities.get_all_objects_as_pointers()) do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('cam') or model:find('cctv_cam') then
                    entities.delete_by_pointer(entity)
                end
            end
        end)
    
        self.casino:action(T'Delete All Guards', {}, T'Delete all the annoying guards', function()
            for i, entity in pairs(entities.get_all_peds_as_pointers()) do
                local model = util.reverse_joaat(entities.get_model_hash(entity))
                if model:find('s_m_y_westsec_02') or model:find('s_m_y_casino_01') then
                    entities.delete_by_pointer(entity)
                end
            end
        end)
    
        self.casino:action(T'Delete Service Doors', {}, '', function()
            self:DeleteObjectsByModel('service_door')
        end)
    
        self.casino:action(T'Delete Gen Doors', {}, '', function()
            self:DeleteObjectsByModel('gendoor')
        end)
    
        self.casino:action(T'Delete Mini Vault Door', {}, '', function()
            self:DeleteObjectsByModel('ch_vault_d_door_01b')
        end)
    
        self.casino:action(T'Delete Elevator Door', {}, '', function()
            self:DeleteObjectsByModel('garageliftdoor')
        end)
    
        self.casino:action(T'Delete Tunnel Door (map trap)', {}, '', function()
            self:DeleteObjectsByModel('tunnel_door_01')
        end)
    end

    function AutomatedPreset()
        -- stats and values are from heist control https://github.com/IceDoomfist/Stand-Heist-Control/
        -- thanks to IceDoomfist for allowing me to use his code
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_BOLTCUT'), -1, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_UNIFORM'), -1, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_GRAPPEL'), -1, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4_MISSIONS'), -1, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_WEAPONS'), 1, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_TROJAN'), 5, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4_PLAYTHROUGH_STATUS'), 100, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_TARGET'), 5, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4_PROGRESS'), 126823, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_BS_GEN'), -1, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_BS_ENTR'), -1, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_BS_ABIL'), -1, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_WEP_DISRP'), 3, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_ARM_DISRP'), 3, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_HEL_DISRP'), 3, true)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_' .. 'H4CNF_APPROACH'), -1, true)
    end

    function CalculateValue(desired_amount)
        local take = math.floor(desired_amount * 1) -- amount each player will get without pavel and fencing fees
        take = math.floor(take + (take * 0.12000000000000001)) -- add pavel and fencing fees

        return take
    end

    function FindEntityByModel(iter, ent_model)
        local ent = 0
        
        for i, entity in pairs(iter()) do
            local model = util.reverse_joaat(entities.get_model_hash(entity))
            if model:find(ent_model) then
                ent = entity
                break
            end
        end
    
        return ent
    end
    
    function DeleteEntitiesByModel(iter, ent_model)
        for i, entity in pairs(iter()) do
            local model = util.reverse_joaat(entities.get_model_hash(entity))
            if model:find(ent_model) then
                entities.delete_by_pointer(entity)
            end
        end
    end
    
    function FindAllGates()
        local hashes = {}
        
        for entities.get_all_objects_as_pointers() as entity do
            local model = util.reverse_joaat(entities.get_model_hash(entity))
            if (model:find('h4_prop_h4_gate_r_01a') or model:find('h4_prop_h4_gate_l_01a') or model:find('h4_prop_h4_gate_02a') or model:find('h4_prop_h4_gate_03a') or model:find('h4_prop_h4_gate_04a') or model:find('h4_prop_h4_gate_05a')) then
                local pos = entities.get_position(entity)
                self.DoorSystemFindExistingDoor(pos.x, pos.y, pos.z, entities.get_model_hash(entity), self.gate_ptr)
                local hash = self.ReadInt(self.gate_ptr)
    
                table.insert(hashes, {
                    hash = hash,
                    entity = entity,
                    model = model,
                })
            end
        end
    
        return hashes
    end
    
    function GetGateFromCoords(coords)
        for entities.get_all_objects_as_pointers() as entity do
            local model = util.reverse_joaat(entities.get_model_hash(entity))
            if self.DoorSystemFindExistingDoor(coords.x, coords.y, coords.z, entities.get_model_hash(entity), self.gate_ptr) then
                local handle = entities.pointer_to_handle(entity)
                local hash = self.ReadInt(self.gate_ptr)
                return {
                    hash = hash,
                    entity = handle,
                    model = model,
                }
            end
        end
    
        return 0
    end
    
    function UnlockDoor(door)
        self.DoorSystemSetDoorState(door, 0, true, true)
        self.DoorSystemSetHoldOpen(door, true, true)
    end
    
    function LockDoor(door)
        self.DoorSystemSetDoorState(door, 1, true, true)
        self.DoorSystemSetOpenRatio(door, 0.0, true, true)
        self.DoorSystemSetHoldOpen(door, true, true)
    end
    
    function TeleportToBlip(blip_id)
        local blip = self.GetFirstBlipInfoId(blip_id)
    
        if blip ~= 0 then
            local entity = self.GetBlipInfoIdEntityIndex(blip)
            if entity ~= 0 and self.DoesEntityExist(entity) then
                local pos = self.GetEntityCoords(entity)
                self.SetEntityCoords(players.user_ped(), pos.x, pos.y, pos.z, true, true, true, true)
            end
        end
    end
    
    function DeletePedsByModel(model)
        for entities.get_all_peds_as_pointers() as entity do
            local model = util.reverse_joaat(entities.get_model_hash(entity))
            if model:find(model) then
                entities.delete_by_pointer(entity)
            end
        end
    end
    
    function DeleteObjectsByModel(model)
        for entities.get_all_objects_as_pointers() as entity do
            local model = util.reverse_joaat(entities.get_model_hash(entity))
            if model:find(model) then
                entities.delete_by_pointer(entity)
            end
        end
    end

    --[[void]] static function ApplyForceToEntityCenterOfMass(--[[Entity (int)]] entity,--[[int]] forceType,--[[float]] x,--[[float]] y,--[[float]] z,--[[BOOL (bool)]] p5,--[[BOOL (bool)]] isDirectionRel,--[[BOOL (bool)]] isForceRel,--[[BOOL (bool)]] p8)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_int(forceType)native_invoker.push_arg_float(x)native_invoker.push_arg_float(y)native_invoker.push_arg_float(z)native_invoker.push_arg_bool(p5)native_invoker.push_arg_bool(isDirectionRel)native_invoker.push_arg_bool(isForceRel)native_invoker.push_arg_bool(p8)native_invoker.end_call_2(0x18FF00FC7EFF559E)end
    --[[void]] static function SetEntityCollision(--[[Entity (int)]] entity,--[[BOOL (bool)]] toggle,--[[BOOL (bool)]] keepPhysics)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(toggle)native_invoker.push_arg_bool(keepPhysics)native_invoker.end_call_2(0x1A9205C1B9EE827F)end
    --[[void]] static function SetEntityProofs(--[[Entity (int)]] entity,--[[BOOL (bool)]] bulletProof,--[[BOOL (bool)]] fireProof,--[[BOOL (bool)]] explosionProof,--[[BOOL (bool)]] collisionProof,--[[BOOL (bool)]] meleeProof,--[[BOOL (bool)]] steamProof,--[[BOOL (bool)]] p7,--[[BOOL (bool)]] waterProof)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(bulletProof)native_invoker.push_arg_bool(fireProof)native_invoker.push_arg_bool(explosionProof)native_invoker.push_arg_bool(collisionProof)native_invoker.push_arg_bool(meleeProof)native_invoker.push_arg_bool(steamProof)native_invoker.push_arg_bool(p7)native_invoker.push_arg_bool(waterProof)native_invoker.end_call_2(0xFAEE099C6F890BB8)end
    --[[Vector3 (vector3)]] static function GetEntityCoords(--[[Entity (int)]] entity,--[[BOOL (bool)]] alive)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(alive)native_invoker.end_call_2(0x3FEF770D40960D5A)return native_invoker.get_return_value_vector3()end
    --[[void]] static function SetEntityCoords(--[[Entity (int)]] entity,--[[float]] xPos,--[[float]] yPos,--[[float]] zPos,--[[BOOL (bool)]] xAxis,--[[BOOL (bool)]] yAxis,--[[BOOL (bool)]] zAxis,--[[BOOL (bool)]] clearArea)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(xPos)native_invoker.push_arg_float(yPos)native_invoker.push_arg_float(zPos)native_invoker.push_arg_bool(xAxis)native_invoker.push_arg_bool(yAxis)native_invoker.push_arg_bool(zAxis)native_invoker.push_arg_bool(clearArea)native_invoker.end_call_2(0x06843DA7060A026B)end
    --[[void]] static function SetPedAccuracy(--[[Ped (int)]] ped,--[[int]] accuracy)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(accuracy)native_invoker.end_call_2(0x7AEFB85C1D49DEB6)end
    --[[void]] static function SetPedCanRagdoll(--[[Ped (int)]] ped,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0xB128377056A54E2A)end
    --[[void]] static function SetEnableBoundAnkles(--[[Ped (int)]] ped,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0xC52E0F855C58FC2E)end
    --[[float]] static function GetDistanceBetweenCoords(--[[float]] x1,--[[float]] y1,--[[float]] z1,--[[float]] x2,--[[float]] y2,--[[float]] z2,--[[BOOL (bool)]] useZ)native_invoker.begin_call()native_invoker.push_arg_float(x1)native_invoker.push_arg_float(y1)native_invoker.push_arg_float(z1)native_invoker.push_arg_float(x2)native_invoker.push_arg_float(y2)native_invoker.push_arg_float(z2)native_invoker.push_arg_bool(useZ)native_invoker.end_call_2(0xF1B760881820C952)return native_invoker.get_return_value_float()end
    --[[void]] static function SetEntityHealth(--[[Entity (int)]] entity,--[[int]] health,--[[int]] p2)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_int(health)native_invoker.push_arg_int(p2)native_invoker.end_call_2(0x6B76DC1F3AE6E6A3)end
    --[[void]] static function DoorSystemSetOpenRatio(--[[Hash (int)]] doorHash,--[[float]] ajar,--[[BOOL (bool)]] requestDoor,--[[BOOL (bool)]] forceUpdate)native_invoker.begin_call()native_invoker.push_arg_int(doorHash)native_invoker.push_arg_float(ajar)native_invoker.push_arg_bool(requestDoor)native_invoker.push_arg_bool(forceUpdate)native_invoker.end_call_2(0xB6E6FBA95C7324AC)end
    --[[Blip (int)]] static function GetNextBlipInfoId(--[[int]] blipSprite)native_invoker.begin_call()native_invoker.push_arg_int(blipSprite)native_invoker.end_call_2(0x14F96AA50D6FBEA7)return native_invoker.get_return_value_int()end
    --[[void]] static function DoorSystemSetSpringRemoved(--[[Hash (int)]] doorHash,--[[BOOL (bool)]] removed,--[[BOOL (bool)]] requestDoor,--[[BOOL (bool)]] forceUpdate)native_invoker.begin_call()native_invoker.push_arg_int(doorHash)native_invoker.push_arg_bool(removed)native_invoker.push_arg_bool(requestDoor)native_invoker.push_arg_bool(forceUpdate)native_invoker.end_call_2(0xC485E07E4F0B7958)end
    --[[BOOL (bool)]] static function GetPedLastWeaponImpactCoord(--[[Ped (int)]] ped,--[[Vector3* (pointer)]] coords)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_pointer(coords)native_invoker.end_call_2(0x6C4D0409BA1A2BC2)return native_invoker.get_return_value_bool()end
    --[[int]] static function GetEntityHealth(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0xEEF059FAD016D209)return native_invoker.get_return_value_int()end
    --[[void]] static function SetAiWeaponDamageModifier(--[[float]] value)native_invoker.begin_call()native_invoker.push_arg_float(value)native_invoker.end_call_2(0x1B1E2A40A65B8521)end
    --[[void]] static function AddOwnedExplosion(--[[Ped (int)]] ped,--[[float]] x,--[[float]] y,--[[float]] z,--[[int]] explosionType,--[[float]] damageScale,--[[BOOL (bool)]] isAudible,--[[BOOL (bool)]] isInvisible,--[[float]] cameraShake)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_float(x)native_invoker.push_arg_float(y)native_invoker.push_arg_float(z)native_invoker.push_arg_int(explosionType)native_invoker.push_arg_float(damageScale)native_invoker.push_arg_bool(isAudible)native_invoker.push_arg_bool(isInvisible)native_invoker.push_arg_float(cameraShake)native_invoker.end_call_2(0x172AA1B624FA1013)end
    --[[BOOL (bool)]] static function GetCurrentPedWeapon(--[[Ped (int)]] ped,--[[Hash* (pointer)]] weaponHash,--[[BOOL (bool)]] p2)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_pointer(weaponHash)native_invoker.push_arg_bool(p2)native_invoker.end_call_2(0x3A87E44BB9A01D54)return native_invoker.get_return_value_bool()end
    --[[void]] static function RemoveAllPedWeapons(--[[Ped (int)]] ped,--[[BOOL (bool)]] p1)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(p1)native_invoker.end_call_2(0xF25DF915FA38C5F3)end
    --[[void]] static function GiveWeaponToPed(--[[Ped (int)]] ped,--[[Hash (int)]] weaponHash,--[[int]] ammoCount,--[[BOOL (bool)]] isHidden,--[[BOOL (bool)]] bForceInHand)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(ammoCount)native_invoker.push_arg_bool(isHidden)native_invoker.push_arg_bool(bForceInHand)native_invoker.end_call_2(0xBF0FD6E56C964FCB)end
    --[[void]] static function SetPedFiringPattern(--[[Ped (int)]] ped,--[[Hash (int)]] patternHash)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(patternHash)native_invoker.end_call_2(0x9AC577F5A12AD8A9)end
    --[[void]] static function RemoveAllPedWeapons(--[[Ped (int)]] ped,--[[BOOL (bool)]] p1)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(p1)native_invoker.end_call_2(0xF25DF915FA38C5F3)end
    --[[void]] static function SetEntityInvincible(--[[Entity (int)]] entity,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x3882114BDE571AD4)end
    --[[BOOL (bool)]] static function DoorSystemFindExistingDoor(--[[float]] x,--[[float]] y,--[[float]] z,--[[Hash (int)]] modelHash,--[[Hash* (pointer)]] outDoorHash)native_invoker.begin_call()native_invoker.push_arg_float(x)native_invoker.push_arg_float(y)native_invoker.push_arg_float(z)native_invoker.push_arg_int(modelHash)native_invoker.push_arg_pointer(outDoorHash)native_invoker.end_call_2(0x589F80B325CC82C5)return native_invoker.get_return_value_bool()end
    --[[void]] static function DoorSystemSetDoorState(--[[Hash (int)]] doorHash,--[[int]] state,--[[BOOL (bool)]] requestDoor,--[[BOOL (bool)]] forceUpdate)native_invoker.begin_call()native_invoker.push_arg_int(doorHash)native_invoker.push_arg_int(state)native_invoker.push_arg_bool(requestDoor)native_invoker.push_arg_bool(forceUpdate)native_invoker.end_call_2(0x6BAB9442830C7F53)end
    --[[void]] static function DoorSystemSetHoldOpen(--[[Hash (int)]] doorHash,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(doorHash)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0xD9B71952F78A2640)end
    --[[int]] static function GetNetworkTime()native_invoker.begin_call()native_invoker.end_call_2(0x7A5487FE9FAA6B48)return native_invoker.get_return_value_int()end
    --[[Blip (int)]] static function GetFirstBlipInfoId(--[[int]] blipSprite)native_invoker.begin_call()native_invoker.push_arg_int(blipSprite)native_invoker.end_call_2(0x1BEDE233E6CD2A1F)return native_invoker.get_return_value_int()end
    --[[Entity (int)]] static function GetBlipInfoIdEntityIndex(--[[Blip (int)]] blip)native_invoker.begin_call()native_invoker.push_arg_int(blip)native_invoker.end_call_2(0x4BA4E2553AFEDC2C)return native_invoker.get_return_value_int()end
    --[[BOOL (bool)]] static function DoesEntityExist(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0x7239B21A38F536BA)return native_invoker.get_return_value_bool()end
end

return Heists