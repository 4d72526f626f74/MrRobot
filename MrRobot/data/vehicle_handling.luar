local flags = {}

flags.model = {
    { name = "MF_IS_VAN", desc = "Allows double doors for the rear doors animation.", bit = 1 << 0 },
    { name = "MF_IS_BUS", desc = "Uses bus animations for entry/exit.", bit = 1 << 1 },
    { name = "MF_IS_LOW", desc = "Uses animations suitable for cars with a low ride-height.", bit = 1 << 2 },
    { name = "MF_IS_BIG", desc = "Changes the way that the AI drives around corners.", bit = 1 << 3 },
    { name = "MF_ABS_STD", desc = "Arcade Anti-Lock Braking System (ABS) equipped as standard; minimal slip allowed.", bit = 1 << 4 },
    { name = "MF_ABS_OPTION", desc = "Arcade Anti-Lock Braking System (ABS) equipped w/ brakes upgrade.", bit = 1 << 5 },
    { name = "MF_ABS_ALT_STD", desc = "Realistic Anti-Lock Braking System (ABS) equipped as standard; some slip allowed.", bit = 1 << 6 },
    { name = "MF_ABS_ALT_OPTION", desc = "Realistic Anti-Lock Braking System (ABS) equipped w/brakes upgrade.", bit = 1 << 7 },
    { name = "MF_NO_DOORS", desc = "For vehicles that don't have any operable doors.", bit = 1 << 8 },
    { name = "MF_TANDEM_SEATING", desc = "Two people will use the front passenger seat.", bit = 1 << 9 },
    { name = "MF_SIT_IN_BOAT", desc = "Uses seated boat animation instead of standing.", bit = 1 << 10 },
    { name = "MF_HAS_TRACKS", desc = "For vehicles with tracks instead of tires.", bit = 1 << 11 },
    { name = "MF_NO_EXHAUST", desc = "Removes all exhaust particles.", bit = 1 << 12 },
    { name = "MF_DOUBLE_EXHAUST", desc = "Creates a second exhaust by mirroring the model's exhaust over the y-axis.", bit = 1 << 13 },
    { name = "MF_NO_1STPERSON_LOOKBEHIND", desc = "Prevents player using rear view when in first-person mode.", bit = 1 << 14 },
    { name = "MF_CAN_ENTER_IF_NO_DOOR", desc = "Allows entry into the vehicle despite no currently accessible doors.", bit = 1 << 15 },
    { name = "MF_AXLE_F_TORSION", desc = "Front wheels stay vertical to the car.", bit = 1 << 16 },
    { name = "MF_AXLE_F_SOLID", desc = "Front wheels stay parallel to each other.", bit = 1 << 17 },
    { name = "MF_AXLE_F_MCPHERSON", desc = "Front wheels can tilt.", bit = 1 << 18 },
    { name = "MF_ATTACH_PED_TO_BODYSHELL", desc = "???", bit = 1 << 19 },
    { name = "MF_AXLE_R_TORSION", desc = "Rear wheels stay vertical to the car.", bit = 1 << 20 },
    { name = "MF_AXLE_R_SOLID", desc = "Rear wheels stay parallel to each other.", bit = 1 << 21 },
    { name = "MF_AXLE_R_MCPHERSON", desc = "Rear wheels can tilt.", bit = 1 << 22 },
    { name = "MF_DONT_FORCE_GRND_CLEARANCE", desc = "Chassis COL is taken into account when suspension is compressed while hitting the ground, with sparks rendered.", bit = 1 << 23 },
    { name = "MF_DONT_RENDER_STEER", desc = "Does not render steering animations.", bit = 1 << 24 },
    { name = "MF_NO_WHEEL_BURST", desc = "Has Bulletproof Tires as standard.", bit = 1 << 25 },
    { name = "MF_INDESTRUCTIBLE", desc = "Can't explode or be considered inoperable from damage.", bit = 1 << 26 },
    { name = "MF_DOUBLE_FRONT_WHEELS", desc = "Places a second instance of each front wheel next to the normal one.", bit = 1 << 27 },
    { name = "MF_IS_RC", desc = "For RC vehicles such as the RC Bandito and Invade & Persuade Tank. The player model is hidden upon entering the vehicle.", bit = 1 << 28 },
    { name = "MF_DOUBLE_REAR_WHEELS", desc = "Duplicates the skidmarks of the rear tires.", bit = 1 << 29 },
    { name = "MF_NO_WHEEL_BREAK", desc = "Prevents wheel bones from detaching off the vehicle due to damage.", bit = 1 << 30 },
    { name = "MF_IS_HATCHBACK", desc = "Uses animations suitable for Trunk doors on hatchback-style vehicle bodies.", bit = 1 << 31 },
}

flags.handling = {
    { name = "HF_SMOOTHED_COMPRESSION", desc = "Simulates progressive spring suspension. Makes suspension compression motion smoother.", bit = 1 << 0 },
    { name = "HF_REDUCED_MOD_MASS", desc = "Reduces mass added from upgrades.", bit = 1 << 1 },
    { name = "HF_HAS_KERS", desc = "Partially enables KERS on the vehicle; disables horn and shows the recharge bar below the minimap. KERS boost itself still needs to be enabled by the SET_VEHICLE_KERS_ALLOWED native.", bit = 1 << 2 },
    { name = "HF_HAS_TRACKS", desc = "Inverts the way grip works on the vehicle; with this flag enabled, grip starts at the fTractionCurveMin value and may increase up to the fTractionCurveMax value upon wheel slip. Grip stays at max beyond the vehicle's peak slip angle.", bit = 1 << 3 },
    { name = "HF_NO_HANDBRAKE", desc = "Disables handbrake control for the vehicle.", bit = 1 << 4 },
    { name = "HF_STEER_REARWHEELS", desc = "Steers the rear wheels instead of the front.", bit = 1 << 5 },
    { name = "HF_HANDBRAKE_REARWHEELSTEER", desc = "Handbrake control makes the rear wheels steer as well as the front.", bit = 1 << 6 },
    { name = "HF_STEER_ALL_WHEELS", desc = "Steers all wheels, similar to 4-wheel-steering systems found on real vehicles. The rear wheels will steer at the same lock angle as the front, as defined by fSteeringLock.", bit = 1 << 7 },
    { name = "HF_FREEWHEEL_NO_GAS", desc = "Disables engine-braking when no throttle is applied.", bit = 1 << 8 },
    { name = "HF_NO_REVERSE", desc = "Disables reversing for the vehicle.", bit = 1 << 9 },
    { name = "_HF_UNKNOWN_10", desc = "Unknown. Name hash: 0x4C11C7F9", bit = 1 << 10 },
    { name = "HF_STEER_NO_WHEELS", desc = "Disables steering on all wheels, used with tracked vehicles.", bit = 1 << 11 },
    { name = "HF_CVT", desc = "Gives the vehicle a fixed-ratio transmission with a gear ratio of 0.90, used for vehicles with nInitialDriveGears=1. If gears amount to more than 1, it will simply force the vehicle into top gear upon acceleration. Recommended for electric vehicles.", bit = 1 << 12 },
    { name = "HF_ALT_EXT_WHEEL_BOUNDS_BEH", desc = "???", bit = 1 << 13 },
    { name = "HF_DONT_RAISE_BOUNDS_AT_SPEED", desc = "???", bit = 1 << 14 },
    { name = "HF_EXT_WHEEL_BOUNDS_COL", desc = "???", bit = 1 << 15 },
    { name = "HF_LESS_SNOW_SINK", desc = "Less grip loss from deep mud/snow, most notably in North Yankton.", bit = 1 << 16 },
    { name = "HF_TYRES_CAN_CLIP", desc = "Tires are allowed to clip into the pavement when under enough pressure, effectiveness depends on tire sidewall. Generally makes the vehicle deal with uneven terrain better. Notes: this is the reason Offroad Tires improve performance on specific vehicles made by R*.", bit = 1 << 17 },
    { name = "_HF_UNKNOWN_19", desc = "Unknown. name hash: 0x2DEA7A05", bit = 1 << 18 },
    { name = "HF_HEAVY_VEHICLE", desc = "???", bit = 1 << 19 },
    { name = "HF_OFFROAD_ABILITIES", desc = "Gravity constant increased by 10% to 10.78 m/s^2, resulting in increased grip and faster falling when airborne. Acceleration and braking performance is also increased by 10%.", bit = 1 << 20 },
    { name = "HF_OFFROAD_ABILITIES_X2", desc = "Gravity constant increased by 20% to 11.76 m/s^2, resulting in increased grip and faster falling when airborne. Acceleration and braking performance is also increased by 20%. Vehicle does not react to bushes.", bit = 1 << 21 },
    { name = "HF_TYRES_RAISE_SIDE_IMPACT_THRESHOLD", desc = "Includes the tires in the general side collision hitbox of the vehicle. Recommended for vehicles whose wheels extend beyond the bodywork, like monster-trucks.", bit = 1 << 22 },
    { name = "_HF_INCREASED_GRAVITY", desc = "Gravity constant increased by 20% to 11.76 m/s^2, resulting in increased grip and faster falling when airborne. Acceleration and braking performance is also increased by 20%. Vehicle does not react to bushes. Identical to HF_OFFROAD_ABILITIES_X2.", bit = 1 << 23 },
    { name = "HF_ENABLE_LEAN", desc = "??? Notes: Possibly for motorcycle leaning or boat leaning.", bit = 1 << 24 },
    { name = "_HF_ALLOW_MOTORCYCLE_TRACTION_LOSS", desc = "Allows motorcycles to lose traction.", bit = 1 << 25 },
    { name = "HF_HEAVYARMOUR", desc = "???", bit = 1 << 26 },
    { name = "HF_ARMOURED", desc = "Prevents vehicle doors (including hood and trunk) from opening in collisions.", bit = 1 << 27 },
    { name = "HF_SELF_RIGHTING_IN_WATER", desc = "???", bit = 1 << 28 },
    { name = "HF_IMPROVED_RIGHTING_FORCE", desc = "Adds extra force to the vehicle when attempting to flip it back on its wheels.", bit = 1 << 29 },
    { name = "HF_USE_EXTRA_SOFT_SURFACE_SUS", desc = "???", bit = 1 << 30 },
    { name = "HF_LAST_AVAILABLE_FLAG", desc = "Most likely doesn't do anything.", bit = 1 << 31 },
}

flags.damage = {
    { name = "DF_DRIVER_SIDE_FRONT_DOOR", desc = "Marks the driver-side front door (door_dside_f) bone as non-breakable.", bit = 1 << 0 },
    { name = "DF_DRIVER_SIDE_REAR_DOOR", desc = "Marks the driver-side rear door (door_dside_r) bone as non-breakable.", bit = 1 << 1 },
    { name = "DF_DRIVER_PASSENGER_SIDE_FRONT_DOOR", desc = "Marks the passenger-side front door (door_pside_f) bone as non-breakable.", bit = 1 << 2 },
    { name = "DF_DRIVER_PASSENGER_SIDE_REAR_DOOR", desc = "Marks the passenger-side rear door (door_pside_r) bone as non-breakable.", bit = 1 << 3 },
    { name = "DF_BONNET", desc = "Marks the bonnet bone as non-breakable.", bit = 1 << 4 },
    { name = "DF_BOOT", desc = "Marks the boot bone as non-breakable.", bit = 1 << 5 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 6 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 7 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 8 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 9 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 10 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 11 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 12 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 13 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 14 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 15 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 16 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 17 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 18 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 19 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 20 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 21 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 22 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 23 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 24 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 25 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 26 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 27 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 28 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 29 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 30 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 31 },
}

flags.advanced = {
    { name = "CF_DIFF_FRONT", desc = "Unknown. Note from Rockstar: 'If we want torsen diffs they will need to know resistance at the wheel as applying the brakes should apply force back to the wheel on the ground'.", bit = 1 << 0 },
    { name = "CF_DIFF_REAR", desc = "Unknown. Note from Rockstar: 'If we want torsen diffs they will need to know resistance at the wheel as applying the brakes should apply force back to the wheel on the ground'", bit = 1 << 1 },
    { name = "CF_DIFF_CENTRE", desc = "When enabled, transfers the drive force from the slipping wheels to the less-driven wheels.", bit = 1 << 2 },
    { name = "CF_DIFF_LIMITED_FRONT", desc = "Unknown. Seems to have a similar effect to _AF_SMOOTH_REV_1ST, but with later upshifts.", bit = 1 << 3 },
    { name = "CF_DIFF_LIMITED_REAR", desc = "???", bit = 1 << 4 },
    { name = "CF_DIFF_LIMITED_CENTRE", desc = "???", bit = 1 << 5 },
    { name = "CF_DIFF_LOCKING_FRONT", desc = "Unknown. Using this flag causes the vehicle's front wheels to wheelspin if the player is holding down the handbrake and forwards/backwards keys.", bit = 1 << 6 },
    { name = "CF_DIFF_LOCKING_REAR", desc = "Using the handbrake slows the car down more smoothly and, most of the time, without leaving tire marks.", bit = 1 << 7 },
    { name = "CF_DIFF_LOCKING_CENTRE", desc = "???", bit = 1 << 8 },
    { name = "CF_GEARBOX_FULL_AUTO", desc = "???", bit = 1 << 9 },
    { name = "CF_GEARBOX_MANUAL", desc = "Unknown. Sets the clutch value to 0.0 when idling.", bit = 1 << 10 },
    { name = "CF_GEARBOX_DIRECT_SHIFT", desc = "???", bit = 1 << 11 },
    { name = "CF_GEARBOX_ELECTRIC", desc = "Used by the Omnis e-GT.", bit = 1 << 12 },
    { name = "CF_ASSIST_TRACTION_CONTROL", desc = "???", bit = 1 << 13 },
    { name = "CF_ASSIST_STABILITY_CONTROL", desc = "???", bit = 1 << 14 },
    { name = "CF_ALLOW_REDUCED_SUSPENSION_FORCE", desc = "Allows the vehicle to be stanced using the SET_REDUCED_SUSPENSION_FORCE native. Requires the CF_FIX_OLD_BUGS flag to be enabled.", bit = 1 << 15 },
    { name = "CF_HARD_REV_LIMIT", desc = "Only working for Tuner cars, this uncaps the RPM in last gear which causes the power to drop off and lower the top speed of the car (effectively creating a speed cap in last gear). Previously this flag changed gear shift behaviour to cause earlier upshifts with a hard rev limit per gear, but this was changed with the Criminal Enterprises update.", bit = 1 << 16 },
    { name = "CF_HOLD_GEAR_WITH_WHEELSPIN", desc = "Later upshifts; usually hits the gear's rev limit before shifting.", bit = 1 << 17 },
    { name = "CF_INCREASE_SUSPENSION_FORCE_WITH_SPEED", desc = "Anti-downforce suspension; increases suspension spring force as vehicle goes faster.", bit = 1 << 18 },
    { name = "CF_BLOCK_INCREASED_ROT_VELOCITY_WITH_DRIVE_FORCE", desc = "Generates fake wheelspin after an instance of real wheelspin; Tyres will stabilize and show 0.0m/s of slip with debugging data, but the traction behaves like it's still spinning.", bit = 1 << 19 },
    { name = "CF_REDUCED_SELF_RIGHTING_SPEED", desc = "Reduces righting force of the vehicle, effectively making it much harder and slower to flip back on its wheels.", bit = 1 << 20 },
    { name = "CF_CLOSE_RATIO_GEARBOX", desc = "Extends the duration of the first gear, giving the vehicle a slower launch with greatly reduced wheelspin.", bit = 1 << 21 },
    { name = "CF_FORCE_SMOOTH_RPM", desc = "Smooth first-gear revving; resistance to hitting the rev-limit.", bit = 1 << 22 },
    { name = "CF_ALLOW_TURN_ON_SPOT", desc = "Allows the vehicle to be rotated left or right while parked on the spot. Intended for tanks/tracked vehicles.", bit = 1 << 23 },
    { name = "CF_CAN_WHEELIE", desc = "Allows the vehicle to perform a handbrake wheelie. The Muscle vehicle class is hardcoded to use this flag.", bit = 1 << 24 },
    { name = "CF_ENABLE_WHEEL_BLOCKER_SIDE_IMPACTS", desc = "Makes the wheels much less likely to clip into the ground when the vehicle is tipped over.", bit = 1 << 25 },
    { name = "CF_FIX_OLD_BUGS", desc = "Forced stock-tyre clipping boundaries, the sidewall gain/loss from a custom tyre will not matter. Refer to strHandlingFlags 00020000 above. Also prevents lowering the vehicle by shooting at its wheels/suspension. This flag is required in addition to CF_ALLOW_REDUCED_SUSPENSION_FORCE to stance the vehicle through script.", bit = 1 << 26 },
    { name = "CF_USE_DOWNFORCE_BIAS", desc = "Changes the way Downforce and spoiler tuning works, uses the setup found on Open-Wheel class vehicles in the vanilla game. Each spoiler/bumper tuning has to be given AdvancedData values to affect downforce. Adjusts initial downforce from fDownforceModifier. 'Curb - boosting' seems to be nullified.", bit = 1 << 27 },
    { name = "CF_REDUCE_BODY_ROLL_WITH_SUSPENSION_MODS", desc = "Reduces body-roll if suspension upgrades are equipped. In addition, the vehicle gains more grip with each suspension option.", bit = 1 << 28 },
    { name = "CF_ALLOWS_EXTENDED_MODS", desc = "Requires AdvancedData to work. Adds Turbo-affecting mods for mod slot 20 (VMT_KNOB) parts, and power-affecting mods for mod slot 22 (VMT_ICE) parts.", bit = 1 << 29 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 30 },
    { name = "N/A", desc = "Flag does not exist.", bit = 1 << 31 },
}

flags.MF_OFFSET = 0x124
flags.HF_OFFSET = 0x128
flags.DF_OFFSET = 0x12C
flags.CF_OFFSET = 0x3C

flags.bike = {
    {"fLeanFwdCOMMult", 0x8},
    {"fLeanFwdForceMult", 0xC},
    {"fLeanBakCOMMult", 0x10},
    {"fLeanBakForceMult", 0x14},
    {"fMaxBankAngle", 0x18},
    {"fFullAnimAngle", 0x1C},
    {"fDesLeanReturnFrac", 0x24},
    {"fStickLeanMult", 0x28},
    {"fBrakingStabilityMult", 0x2C},
    {"fInAirSteerMult", 0x30},
    {"fWheelieBalancePoint", 0x34},
    {"fStoppieBalancePoint", 0x38},
    {"fWheelieSteerMult", 0x3C},
    {"fRearBalanceMult", 0x40},
    {"fFrontBalanceMult", 0x44},
    {"fBikeGroundSideFrictionMult", 0x48},
    {"fBikeWheelGroundSideFrictionMult", 0x4C},
    {"fBikeOnStandLeanAngle", 0x50},
    {"fBikeOnStandSteerAngle", 0x54},
    {"fJumpForce", 0x58},
}

flags.flying = {
    {"fThrust", 0x8},
    {"fThrustFallOff", 0xC},
    {"fThrustVectoring", 0x10},
    {"fInitialThrust", 0x14},
    {"fInitialThrustFallOff", 0x18},
    {"fYawMult", 0x1C},
    {"fYawStabilise", 0x20},
    {"fSideSlipMult", 0x24},
    {"fInitialYawMult", 0x28},
    {"fRollMult", 0x2C},
    {"fRollStabilise", 0x30},
    {"fInitialRollMult", 0x34},
    {"fPitchMult", 0x38},
    {"fPitchStabilise", 0x3C},
    {"fInitialPitchMult", 0x40},
    {"fFormLiftMult", 0x44},
    {"fAttackLiftMult", 0x48},
    {"fAttackDiveMult", 0x4C},
    {"fGearDownDragV", 0x50},
    {"fGearDownLiftMult", 0x54},
    {"fWindMult", 0x58},
    {"fMoveRes", 0x5C},
    {"vecTurnRes", 0x60},
    {"vecSpeedRes", 0x70},
    {"fGearDoorFrontOpen", 0x80},
    {"fGearDoorRearOpen", 0x84},
    {"fGearDoorRearOpen2", 0x88},
    {"fGearDoorRearMOpen", 0x8C},
    {"fTurublenceMagnitudeMax", 0x90},
    {"fTurublenceForceMulti", 0x94},
    {"fTurublenceRollTorqueMulti", 0x98},
    {"fTurublencePitchTorqueMulti", 0x9C},
    {"fBodyDamageControlEffectMult", 0xA0},
    {"fInputSensitivityForDifficulty", 0xA4},
    {"fOnGroundYawBoostSpeedPeak", 0xA8},
    {"fOnGroundYawBoostSpeedCap", 0xAC},
    {"fEngineOffGlideMulti", 0xB0},
    {"fAfterburnerEffectRadius", 0xB4},
    {"fAfterburnerEffectDistance", 0xB8},
    {"fAfterburnerEffectForceMulti", 0xBC},
    {"fSubmergeLevelToPullHeliUnderwater", 0xC0},
    {"fExtraLiftWithRoll", 0xC4},
}

flags.boat = {
    {"fBoxFrontMult", 0x8},
    {"fBoxRearMult", 0xC},
    {"fBoxSideMult", 0x10},
    {"fSampleTop", 0x14},
    {"fSampleBottom", 0x18},
    {"fSampleBottomTestCorrection", 0x1C},
    {"fAquaplaneForce", 0x20},
    {"fAquaplanePushWaterMult", 0x24},
    {"fAquaplanePushWaterCap", 0x28},
    {"fAquaplanePushWaterApply", 0x2C},
    {"fRudderForce", 0x30},
    {"fRudderOffsetSubmerge", 0x34},
    {"fRudderOffsetForce", 0x38},
    {"fRudderOffsetForceZMult", 0x3C},
    {"fWaveAudioMult", 0x40},
    {"vecMoveResistance", 0x50},
    {"vecTurnResistance", 0x60},
    {"fLook_L_R_CamHeight", 0x70},
    {"fDragCoefficient", 0x74},
    {"fKeelSphereSize", 0x78},
    {"fPropRadius", 0x7C},
    {"fLowLodAngOffset", 0x80},
    {"fLowLodDraughtOffset", 0x84},
    {"fImpellerOffset", 0x88},
    {"fImpellerForceMult", 0x8C},
    {"fDinghySphereBuoyConst", 0x90},
    {"fProwRaiseMult", 0x94},
    {"fDeepWaterSampleBuoyancyMult", 0x98},
    {"fTransmissionMultiplier", 0x9C},
    {"fTractionMultiplier", 0xA0},
}

flags.seaplane = {
    {"fLeftPontoonComponentId", 0x8},
    {"fRightPontoonComponentId", 0xC},
    {"fPontoonBuoyConst", 0x10},
    {"fPontoonSampleSizeFront", 0x14},
    {"fPontoonSampleSizeMiddle", 0x18},
    {"fPontoonSampleSizeRear", 0x1C},
    {"fPontoonLengthFractionForSamples", 0x20},
    {"fPontoonDragCoefficient", 0x24},
    {"fPontoonVerticalDampingCoefficientUp", 0x28},
    {"fPontoonVerticalDampingCoefficientDown", 0x2C},
    {"fKeelSphereSize", 0x30},
}

flags.submarine = {
    {"fMoveResXY", 0x20},
    {"fMoveResZ", 0x24},
    {"fPitchMult", 0x28},
    {"fPitchAngle", 0x2C},
    {"fYawMult", 0x30},
    {"fDiveSpeed", 0x34},
    {"fRollMult", 0x38},
    {"fRollStab", 0x3C},
}

flags.trailer = {
    {"fAttachLimitPitch", 0x8},
    {"fAttachLimitRoll", 0xC},
    {"fAttachLimitYaw", 0x10},
    {"fUprightSpringConstant", 0x14},
    {"fUprightDampingConstant", 0x18},
    {"fAttachedMaxDistance", 0x1C},
    {"fAttachedMaxPenetration", 0x20},
    {"fAttachRaiseZ", 0x24},
    {"fPosConstraintMassRatio", 0x28},
}

flags.ccar = {
    {"fBackEndPopUpCarImpulseMult", 0x8},
    {"fBackEndPopUpBuildingImpulseMult", 0xC},
    {"fBackEndPopUpMaxDeltaSpeed", 0x10},
    {"fToeFront", 0x14},
    {"fToeRear", 0x18},
    {"fCamberFront", 0x1C},
    {"fCamberRear", 0x20},
    {"fCastor", 0x24},
    {"fEngineResistance", 0x28},
    {"fMaxDriveBiasTransfer", 0x2C},
    {"fJumpForceScale", 0x30},
    {"fIncreasedRammingForceScale", 0x34},
}

flags.ccarsub =
{
	{"fMass", 0x000C},
	{"fInitialDragCoeff", 0x0010},
	{"fDownforceModifier", 0x0014},
	{"fPopUpLightRotation", 0x0018},
	{"vecCentreOfMassOffsetX", 0x0020},
	{"vecCentreOfMassOffsetY", 0x0024},
	{"vecCentreOfMassOffsetZ", 0x0028},
	{"vecInertiaMultiplierX", 0x0030},
	{"vecInertiaMultiplierY", 0x0034},
	{"vecInertiaMultiplierZ", 0x0038},
	{"fPercentSubmerged", 0x0040},
	{"fSubmergedRatio", 0x0044},
	{"fDriveBiasFront", 0x0048},
	{"fDriveBiasRear", 0x004C},
	{"nInitialDriveGears", 0x0050},
	{"fDriveInertia", 0x0054},
	{"fClutchChangeRateScaleUpShift", 0x0058},
	{"fClutchChangeRateScaleDownShift", 0x005C},
	{"fInitialDriveForce", 0x0060},
	{"fDriveMaxFlatVel", 0x0064},
	{"fInitialDriveMaxFlatVel", 0x0068},
	{"fBrakeForce", 0x006C},
	{"fBrakeBiasFront", 0x0074},
	{"fBrakeBiasRear", 0x0078},
	{"fHandBrakeForce", 0x007C},
	{"fSteeringLock", 0x0080},
	{"fSteeringLockRatio", 0x0084},
	{"fTractionCurveMax", 0x0088},
	{"fTractionCurveMaxRatio", 0x008C},
	{"fTractionCurveMin", 0x0090},
	{"fTractionCurveRatio", 0x0094},
	{"fTractionCurveLateral", 0x0098},
	{"fTractionCurveLateralRatio", 0x009C},
	{"fTractionSpringDeltaMax", 0x00A0},
	{"fTractionSpringDeltaMaxRatio", 0x00A4},
	{"fLowSpeedTractionLossMult", 0x00A8},
	{"fCamberStiffnesss", 0x00AC},
	{"fTractionBiasFront", 0x00B0},
	{"fTractionBiasRear", 0x00B4},
	{"fTractionLossMult", 0x00B8},
	{"fSuspensionForce", 0x00BC},
	{"fSuspensionCompDamp", 0x00C0},
	{"fSuspensionReboundDamp", 0x00C4},
	{"fSuspensionUpperLimit", 0x00C8},
	{"fSuspensionLowerLimit", 0x00CC},
	{"fSuspensionRaise", 0x00D0},
	{"fSuspensionBiasFront", 0x00D4},
	{"fSuspensionBiasRear", 0x00D8},
	{"fAntiRollBarForce", 0x00DC},
	{"fAntiRollBarBiasFront", 0x00E0},
	{"fAntiRollBarBiasRear", 0x00E4},
	{"fRollCentreHeightFront", 0x00E8},
	{"fRollCentreHeightRear", 0x00EC},
	{"fCollisionDamageMult", 0x00F0},
	{"fWeaponDamageMult", 0x00F4},
	{"fDeformationDamageMult", 0x00F8},
	{"fEngineDamageMult", 0x00FC},
	{"fPetrolTankVolume", 0x0100},
	{"fOilVolume", 0x0104},
    {"fPetrolConsumptionRate", 0x108},
	{"fSeatOffsetDistX", 0x010C},
	{"fSeatOffsetDistY", 0x0110},
	{"fSeatOffsetDistZ", 0x0114},
    {"fRocketBoostCapacity", 0x11C},
    {"fBoostMaxSpeed", 0x120}
}

return flags