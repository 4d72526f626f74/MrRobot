local T, S, H = require('translations'), require('shared'), require('handler')
local Bitfield = require('bitfield')
local VehModels = require('vehicle_models')
local G = require('script_globals')
local Globals = G.globals
local ScriptOffsets = require('offsets')
local Network = require('network')
local Notifications = require('notifications')
local Blacklist = require('blacklist')
local GTAClasses = require('gta_classes')

local shadow_root = menu.shadow_root()

local Offsets = ScriptOffsets.Vehicles.LSCustoms
local Bits = ScriptOffsets.Players.Bits
local SpoofingOffsets = ScriptOffsets.Online.SpoofingOffsets
local PlayerStates = ScriptOffsets.PlayerStates
local VehStateBitfield = ScriptOffsets.VehStateBitfield
local Settings = pluto_new Bitfield(Bits.ForceScriptHost)
local SettingsBits = S.SettingsBits

local ScriptEvents = {
    {1, 'Fake Register CEO'}, 
    {2, 'Fake Register MC'}, 
    {3, 'Fake Register VIP'},
    {4, 'Fake Off The Radar'},
    {5, 'Fake Ghost Org'},
    {6, 'Mugged'},
    {7, 'Ewo'},
    {8, 'Ghosted'},
    {9, 'Destroyed Vehicle Cargo'},
    {10, 'Cash Stolen'},
    {11, 'Cash Banked'},
    {12, 'Cash Removed'},
    {13, 'Jammer Activated'},
    {14, 'Delivered Motorcycle'},
    {15, 'Joined Organisation'},
    {16, 'Quit Organisation'},
    {17, 'Marked For Death'},
    {18, 'Interior Invite'},
    {19, 'Mugger Killed'}
}

local DetachableWheels = {
    {index = 0, name = T'Left Front'},
    {index = 1, name = T'Right Front'},
    {index = 2, name = T'Left Rear'},
    {index = 3, name = T'Right Rear'},
    {index = 4, name = T'Left Middle'},
    {index = 5, name = T'Right Middle'},
}

local colours = {
    red = { r=255/255, g=0/255, b=0/255, a=255/255 },
    green = { r=0/255, g=255/255, b=0/255, a=255/255 },
    blue = { r=0/255, g=0/255, b=255/255, a=255/255 },
    yellow = { r=255/255, g=255/255, b=0/255, a=255/255 },
    white = { r=255/255, g=255/255, b=255/255, a=255/255 },
    black = { r=0/255, g=0/255, b=0/255, a=255/255 },
    orange = { r=255/255, g=165/255, b=0/255, a=255/255 },
    purple = { r=128/255, g=0/255, b=128/255, a=255/255 },
    pink = { r=255/255, g=192/255, b=203/255, a=255/255 },
    cyan = { r=0/255, g=255/255, b=255/255, a=255/255 },
    grey = { r=128/255, g=128/255, b=128/255, a=255/255 },
    brown = { r=165/255, g=42/255, b=42/255, a=255/255 },
    lime = { r=0/255, g=255/255, b=0/255, a=255/255 },
    olive = { r=128/255, g=128/255, b=0/255, a=255/255 },
    maroon = { r=128/255, g=0/255, b=0/255, a=255/255 },
    teal = { r=0/255, g=128/255, b=128/255, a=255/255 },
    navy = { r=0/255, g=0/255, b=128/255, a=255/255 },
    silver = { r=192/255, g=192/255, b=192/255, a=255/255 },
    gold = { r=255/255, g=215/255, b=0/255, a=255/255 }
}

local overlay_name_banner = { x=0.02, y=0.02, width=0.25, height=0.02, colour=colours.black }
local overlay_name_text = { x=0.022, y=0.031, colour=colours.green }
local overlay_info = { x=0.02, y=0.02*2, width=0.25, height=0.31, colour={ r=0, g=0, b=0, a=180/255 } }
local text_colour = colours.teal
local otr_colour = colours.red
local godmode_colour = colours.red
local in_rc_colour = colours.red
local bounty_colour = colours.red
local bounty_reward_colour = colours.teal
local host_colour = colours.red
local scripthost_colour = colours.red
local ghosted_colour = colours.red

pluto_class Players
    cayo_targets = {
        {1, 'Tequila'},
        {2, 'Madrazo Files'},
        {3, 'Pink Diamond'},
        {4, 'Bearer Bonds'},
        {5, 'Ruby Necklace'},
        {6, 'Sapphire Panther'},
        {7, 'Invalid'}
    }

    function __construct(root)
        self.spawned_vehicles = {}
        self.gamer_handle = memory.alloc(104)
        self.updating = {
            player_info = false,
            personal_vehicle = false,
            bounty = false,
            wheels_states = false,
            ghosted = false,
            tut_session_info = false
        }
        self.wheel_labels = {}
        self.stand_pos_spoof = menu.ref_by_command_name('spoofpos')
        self.stand_spoofed_pos = menu.ref_by_command_name('spoofedposition')
        self.invisibility = menu.ref_by_command_name('invisibility')

        H.PlayerLoop = S:Partial(self.PlayerLoop, self)
        H.PlayerRemove = S:Partial(self.PlayerRemove, self)
        H.CheckBlacklist = S:Partial(self.CheckBlacklist, self)

        self.proot = root:list(T'Players', {T'rplayers'}, '')
        self.proot.visible = true
    end

    function PlayerLoop(pid, root)
        network.network_handle_from_player(pid, self.gamer_handle, 104 // 8)
        S:AddPlayer(pid)
        if network.network_is_friend(self.gamer_handle) and pid ~= players.user() then S:AddFriend(pid) end

        local name = players.get_name(pid)
        local script_root = self.proot:list(name, {}, name, function()
            self.proot:focus()
            root:getChildren()[1]:focus()
        end)

        root:divider('Mr.Robot')
        self.root = root:list('Mr.Robot', {}, 'Mr.Robot')
        self.root:onTickInViewport(function()
            if S.Settings:IsSet(SettingsBits.EnablePlayerOverlay) then
                self:CreateOverlay(pid)
            end
        end)

        self.pinfo = self.root:list(T'Player Info', {}, T'Player Info', nil, nil, || -> self:UpdatePlayerInfo(pid))
        self.pinfo:readonly('', '') -- dev
        self.pinfo:readonly('', '') -- badsport
        self.pinfo:readonly('', '') -- cheater
        self.pinfo:readonly('', '') -- using orbital cannon
        self.pinfo:readonly('', '') -- using drone
        self.pinfo:readonly('', '') -- godmode
        self.pinfo:readonly('', '') -- vehicle
        self.pinfo:readonly('', '') -- vehicle health
        self.pinfo:readonly('', '') -- vehicle owner

        self.pv = self.root:list(T'Personal Vehicle', {}, T'Personal Vehicle', nil, nil, || -> self:UpdatePersonalVehicle(pid))
        self.pv:divider(T'Vehicle Info')
        self.pv:readonly('', '') -- model
        self.pv:readonly('', '') -- health
        self.pv:readonly('', '') -- godmode
        self.pv:readonly('', '') -- frozen
        self.pv:readonly('', '') -- invisible
        self.pv:readonly('', '') -- can migrate
        self.pv:readonly('', '') -- network id
        self.pv:readonly('', '') -- owner

        self.pv:divider('')
        self.pv:toggle(T'Force Script Host', {}, T'Forces you to become script host (helps with trolling features)', function(state)
            Settings:SetBool(Bits.ForceScriptHost, state)
        end, Settings:IsSet(Bits.ForceScriptHost))

        if pid ~= players.user() then
            self.pv:toggle(T'Spectate', {}, T'Spectate the player', function(state)
                local spect = menu.ref_by_rel_path(root, T'Spectate>Nuts Method')
                if spect:isValid() then
                    spect.value = state
                end
            end)
        end

        local lock_doors
        ock_doors = self.pv:toggle_loop(T'Lock Door', {}, T'Locks the door of the player\'s vehicle', function()
            if Settings:IsSet(Bits.ForceScriptHost) then Network.BecomeScriptHost() end
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                if Network.RequestControl(veh) then
                    vehicle.set_vehicle_doors_locked_for_player(veh, pid, true)
                    vehicle.set_vehicle_doors_shut(veh, true)
                else
                    Network.FailedToRequestControl(veh)
                end
            else
                lock_doors.value = false
                self:OutOfRange()
            end
        end, function()
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                vehicle.set_vehicle_doors_locked_for_player(veh, pid, false)
                vehicle.set_vehicle_doors_shut(veh, false)
            end
        end)

        local deny_request
        deny_requests = self.pv:toggle_loop(T'Deny Control Requests', {}, T'Prevent the player from being able to take control over their vehicle', function()
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                if entities.get_can_migrate(veh) then
                    entities.set_can_migrate(veh, false) -- set/clear bit 48 of net_obj + 0x48
                end
            else
                deny_requests.value = false
                self:OutOfRange()
            end
        end, function()
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                if not entities.get_can_migrate(veh) then
                    entities.set_can_migrate(veh, true)
                end
            end
        end)

        local conceal_vehicle
        conceal_vehicle = self.pv:toggle_loop(T'Conceal Vehicle', {}, T'Stops the vehicle from being networked', function()
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                if Network.RequestControl(veh) then
                    if not network.network_is_entity_concealed(veh) then
                        network.network_conceal_entity(veh, true)
                    end
                else
                    Network.FailedToRequestControl(veh)
                end
            end
        end, function()
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                if Network.RequestControl(veh) then
                    if network.network_is_entity_concealed(veh) then
                        network.network_conceal_entity(veh, false)
                    end
                else
                    Network.FailedToRequestControl(veh)
                end
            end
        end)

        local send_to_heaven
        send_to_heaven = self.pv:toggle_loop(T'Send Vehicle To Heaven', {}, T'Send the players vehicle to heaven, this does not work on every vehicle!', function()
            if Settings:IsSet(Bits.ForceScriptHost) then Network.BecomeScriptHost() end
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                if Network.RequestControl(veh) then
                    vehicle.set_vehicle_doors_shut(veh, false)
                else
                    Network.FailedToRequestControl(veh)
                end
            else
                send_to_heaven.value = false
                self:OutOfRange()
            end
        end)

        self.pv:divider('')
        self.pv:action(T'Add Explosive Device', {}, T'Add explosive device to the players vehicle', function()
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                if Network.RequestControl(veh) then
                    vehicle.add_vehicle_phone_explosive_device(veh)
                else
                    Network.FailedToRequestControl(veh)
                end
            else
                local veh = ped.get_vehicle_ped_is_in(player.get_player_ped(pid), false)
                if veh ~= 0 then
                    if Network.RequestControl(veh) then
                        vehicle.add_vehicle_phone_explosive_device(veh)
                    else
                        Network.FailedToRequestControl(veh)
                    end
                end
            end
        end)

        self.pv:action(T'Clear Explosive Device', {}, T 'Removes the explosive device from the players vehicle', function()
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                if Network.RequestControl(veh) then
                    vehicle.clear_vehicle_phone_explosive_device(veh)
                else
                    Network.FailedToRequestControl(veh)
                end
            else
                local veh = ped.get_vehicle_ped_is_in(player.get_player_ped(pid), false)
                if veh ~= 0 then
                    if Network.RequestControl(veh) then
                        vehicle.clear_vehicle_phone_explosive_device(veh)
                    else
                        Network.FailedToRequestControl(veh)
                    end
                end
            end
        end)

        self.pv:action(T'Detonate Explosive Device', {}, T'Detonate the explosive device', function()
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                if Network.RequestControl(veh) then
                    vehicle.detonate_vehicle_phone_explosive_device(veh)
                else
                    Network.FailedToRequestControl(veh)
                end
            else
                local veh = ped.get_vehicle_ped_is_in(player.get_player_ped(pid), false)
                if veh ~= 0 then
                    if Network.RequestControl(veh) then
                        vehicle.detonate_vehicle_phone_explosive_device(veh)
                    else
                        Network.FailedToRequestControl(veh)
                    end
                end
            end
        end)

        self.pv:action(T'Force Respawn', {}, T'Force the players vehicle to respawn', function()
            if Settings:IsSet(Bits.ForceScriptHost) then Network.BecomeScriptHost() end
            self:ForceVehicleRespawn(pid)
        end)

        self.pv:action(T'Unlock Vehicle', {}, T'Bypass vehicle access settings', function()
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                vehicle.set_vehicle_doors_locked_for_player(veh, players.user(), false)
            end
        end)

        self.pv:action(T'Repair', {}, T'Repair their vehicle', function()
            local veh = Network.GetPVFromNetworkID(pid)
            if veh ~= 0 then
                if Network.RequestControl(veh) then
                    vehicle.set_vehicle_fixed(veh)
                else
                    Network.FailedToRequestControl(veh)
                end
            else
                self:OutOfRange()
            end
        end)
        self.pv:divider('')
        self.veh_kicks = self.pv:list(T'Kicks', {}, T'Vehicle kicks')
        self.veh_kicks:action(T'Takeover Kick', {}, T'Takeover kick', function()
            if Settings:IsSet(Bits.ForceScriptHost) then Network.BecomeScriptHost() end
            self:TakeoverKick(pid)
        end)

        self.veh_kicks:action(T'Regular Kick', {}, T'Interaction menu kick', function()
            self:RegularKick(pid)
        end)

        self.trolling = self.root:list(T'Trolling', {}, T'Trolling')
        if pid ~= players.user() then
            self.organisation = self.trolling:list(T'Organisation', {}, T'Organisation')

            self.organisation:toggle_loop(T'Force Join', {}, T'Force join the players organisation, you will instantly rejoin if they kick you', function()
                Network.SetOrganisationID(pid)
            end)
        end

        self.script_events = self.trolling:list(T'Script Events', {}, T'Script Events')
        local event_amount = self.script_events:slider(T'Amount', {T'amount'}, T'Amount of times to trigger the event', 1, math.max_int, 1, 1, function(value) end)
        local event_choice = self.script_events:list_select(T'Event', {}, T'The event to send', ScriptEvents, 1, function(index) end)
        self.script_events:action(T'Send', {}, T 'Send the event to the player', function()
            local index = event_choice.value
            local event = ScriptEvents[index][2]
            local player_id = players.user()
            local amount = event_amount.value

            pluto_switch event do
                case 'Fake Register CEO':
                    S:RegisterCEO(pid)
                    break
                case 'Fake Register MC':
                    S:RegisterMC(pid)
                    break
                case 'Fake Register VIP':
                    S:RegisterVIP(pid)
                    break
                case 'Fake Off The Radar':
                    S:OffRadar(pid)
                    break
                case 'Fake Ghost Org':
                    S:GhostOrg(pid)
                    break
                case 'Mugged':
                    S:SuccessfullyMugged(pid, math.max_int)
                    break
                case 'Ewo':
                    S:PlayerEwo(pid, player_id)
                    break
                case 'Ghosted':
                    S:BecomeGhosted(pid, player_id)
                    break
                case 'Destroyed Vehicle Cargo':
                    S:DestroyedVehicleCargo(pid, player_id)
                    break
                case 'Cash Stolen':
                    S:CashStolen(pid, amount)
                    break
                case 'Cash Banked':
                    S:CashBanked(pid, amount)
                    break
                case 'Cash Removed':
                    S:CashRemoved(pid, amount)
                    break
                case 'Jammer Activated':
                    S:JammerActivated(pid)
                    break
                case 'Delivered Motorcycle':
                    S:DeliveredMotorcycle(pid, player_id)
                    break
                case 'Joined Organisation':
                    S:JoinedOrg(pid, player_id)
                    break
                case 'Quit Organisation':
                    S:QuitOrg(pid, player_id)
                    break
                case 'Marked For Death':
                    S:MarkedForDeath(pid, player_id)
                    break
                case 'Interior Invite':
                    S:InteriorInvite(pid, PlayerID)
                    break
                case 'Mugger Killed':
                    S:MuggerKilled(pid)
                    break
            end
        end)

        self.bounty = self.trolling:list(T'Bounty', {}, T'Bounty', nil, nil, || -> self:UpdateBountyInfo(pid))
        self.bounty:divider(T'Bounty Info')
        self.bounty:readonly('', '') -- Active
        self.bounty:readonly('', '') -- Amount
        self.bounty:readonly('', '') -- Reward
        self.bounty:readonly('', '') -- Modded
        self.bounty:divider('')

        local bounty_input_amount
        bounty_input_amount = self.bounty:text_input(T'Bounty', {T'rpbounty'}, T'Set an anonymous undetectable bounty on the player', function(amount)
            amount = tonumber(amount)
            if amount ~= nil then
                if amount < 0 or amount > 10000 then
                    return Notifications.Show(T'Invalid Amount', 'MrRobot', '', Notifications.HUD_COLOUR_BLACK)
                end

                Network.SetBounty(pid, 0, false)
                Network.SetBounty(pid, amount, true)
            end
        end, '10000')

        local bounty_reward_amount
        bounty_reward_amount = self.bounty:text_input(T'Reward', {T'rpbountyreward'}, T'Set the reward amount for the players bounty (anyone that kills them will get this amount instead of the amount that was set)', function(amount)
            amount = tonumber(amount)
            if amount ~= nil then
                if amount < 0 or amount > 10000 then
                    return Notifications.Show(T'Invalid Amount', 'MrRobot', '', Notifications.HUD_COLOUR_BLACK)
                end

                Network.SetBountyReward(pid, amount)
            end
        end, '10000')
        self.bounty:divider('')

        self.bounty:action(T'Max Bounty', {T'rpmaxbounty'}, T'Set the players bounty to the maximum amount', function()
            Network.SetBounty(pid, 0, false)
            Network.SetBounty(pid, 10000, true)
        end)

        self.bounty:action(T'Remove Bounty', {T'rpremovebounty'}, T'Remove the bounty from the player', function()
            Network.SetBounty(pid, 0, false)
        end)

        self.bounty:divider('')
        self.bounty:toggle_loop(T'Bounty Loop', {T'rpbountyloop'}, T'Loop set a bounty on the player', function()
            local amount = tonumber(bounty_input_amount.value)
            if amount ~= nil then
                if amount < 0 or amount > 10000 then
                    return Notifications.Show(T'Invalid Model Hash', 'MrRobot', '', Notifications.HUD_COLOUR_BLACK)
                end

                Network.SetBounty(pid, 0, false)
                Network.SetBounty(pid, amount, true)
            end
        end)

        self.bounty:toggle_loop(T'Set Bounty Reward', {T'rpsetbountyreward'}, T'Set the reward amount for the players bounty', function()
            local amount = tonumber(bounty_reward_amount.value)
            if amount ~= nil then
                if amount < 0 or amount > 10000 then
                    return Notifications.Show(T'Invalid Model Hash', 'MrRobot', '', Notifications.HUD_COLOUR_BLACK)
                end

                Network.SetBountyReward(pid, amount)
            end
        end)

        self.bounty:toggle_loop(T'Max Bounty Reward', {T'rpmaxbountyrewardloop'}, T'Set the players bounty reward to the maximum amount', function()
            Network.SetBountyReward(pid, 10000)
        end)

        self.bounty:toggle_loop(T'Remove Bounty Reward', {T'rpremovebountyrewardloop'}, T'Remove the bounty reward for the player', function()
            Network.SetBountyReward(pid, 0)
        end)

        self.toxic = self.trolling:list(T'Toxic', {}, T'Toxic')
        self.toxic:action(T'Send Corrupted Invite', {}, T'Send a corrupted invite to the player', function()
            memory.write_int(Globals.Interior:g(), -1)
            S:InteriorInvite(pid)
        end)

        self.veh_trolling = self.trolling:list(T'Vehicle', {}, T'Vehicle')
        if S.Settings:IsSet(S.SettingsBits.Debug) then 
            self.debug = self.veh_trolling:list(T'Debug', {}, T'Debug')
            self.debug:action(T'Copy Address', {}, T'Copy the address of the vehicle', function()
                local veh = players.localplayer_vehicle()
                if veh.entity ~= 0 then
                    util.copy_to_clipboard(string.format('%X', veh.ptr))
                end
            end)
            
            self.debug:action(T'Copy Model', {}, T'Copy model hash', function()
                local veh = players.localplayer_vehicle()
                if veh.entity ~= 0 then
                    util.copy_to_clipboard(string.format('%X', entity.get_entity_model(veh.entity)))
                end
            end)
        end
        self.wheels = self.veh_trolling:list(T'Wheels', {}, T'Wheels', nil, nil, || -> self:UpdateWheelsInfo(pid))
        self.wheels:divider(T'Wheels')

        if not self.wheel_labels[pid] then
            self.wheel_labels[pid] = {}
        end

        self.wheel_labels[pid][1] = self.wheels:readonly(T'Wheel 1: ?', '') -- index 1
        self.wheel_labels[pid][2] = self.wheels:readonly(T'Wheel 2: ?', '') -- index 2
        self.wheel_labels[pid][3] = self.wheels:readonly(T'Wheel 3: ?', '') -- index 3
        self.wheel_labels[pid][4] = self.wheels:readonly(T'Wheel 4: ?', '') -- index 4
        self.wheel_labels[pid][5] = self.wheels:readonly(T'Wheel 5: ?', '') -- index 5
        self.wheel_labels[pid][6] = self.wheels:readonly(T'Wheel 6: ?', '') -- index 6
        self.wheel_labels[pid][7] = self.wheels:readonly(T'Wheel 7: ?', '') -- index 7
        self.wheel_labels[pid][8] = self.wheels:readonly(T'Wheel 8: ?', '') -- index 8
        self.wheels:divider('')

        self.individual_wheels = self.wheels:list(T'Individual Wheels', {}, T'Individual Wheels')
        self.wheels:action(T'Detach Wheels', {}, T'Detach wheels from the players vehicle', function()
            local player_ped = player.get_player_ped(pid)
            local veh = ped.get_vehicle_ped_is_in(player_ped, false)
            if veh ~= 0 then
                local ptr = entities.handle_to_pointer(veh)
                if ptr ~= 0 then
                    if Network.RequestControl(veh) then
                        local state = memory.read_short(ptr + 0xA48)
                        for i = 0, 7 do
                            if not memory.bits:check(state, i) then
                                entities.detach_wheel(ptr, i)
                            end
                        end
                    else
                        Network.FailedToRequestControl(veh)
                    end
                end
            end
        end)

        for DetachableWheels as wheel do
            self.individual_wheels:action(wheel.name, {}, T'Detach a wheel from the players vehicle', function()
                local player_ped = player.get_player_ped(pid)
                local veh = ped.get_vehicle_ped_is_in(player_ped, false)
                if veh ~= 0 then
                    local ptr = entities.handle_to_pointer(veh)
                    if ptr ~= 0 then
                        if Network.RequestControl(veh) then
                            entities.detach_wheel(ptr, wheel.index)
                        else
                            Network.FailedToRequestControl(veh)
                        end
                    end
                end
            end)
        end

        self.wheels:toggle_loop(T'Wheels Spam', {}, T'Spam the player with wheels by detaching and fixing their vehicle', function()
            local player_ped = player.get_player_ped(pid)
            local veh = ped.get_vehicle_ped_is_in(player_ped, false)
            if veh ~= 0 then
                local ptr = entities.handle_to_pointer(veh)
                if ptr ~= 0 then
                    if Network.RequestControl(veh) then
                        for i = 0, 7 do
                            entities.detach_wheel(ptr, i)
                        end
                        util.yield(50)
                        vehicle.set_vehicle_fixed(veh)
                    else
                        Network.FailedToRequestControl(veh)
                    end
                end
            end
        end)

        self.crashes = self.trolling:list(T'Crashes', {}, T'Crashes')
        self.crashes:action(T'Wheel Crash', {}, T'Crashes the player with a buggy wheel model', function()
            S:PlayAnimation($'{filesystem.script_root()}/images/Loser.png', 1.7, 0.20)
        end)

        self.trolling:divider('')
        self.trolling:action(T'Owned Orbital Strike', {}, T'Launch an owned orbital strike on the player', function()
            S:RequestNamedPtfxAsset('scr_xm_orbital')
            local player_ped = player.get_player_ped(pid)
            local pos = players.get_position(pid)
            Network.OrbitalCannon(true)

            graphics.start_networked_particle_fx_non_looped_on_entity('scr_xm_orbital_blast', player_ped, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, false, false, false)
            graphics.start_networked_particle_fx_non_looped_on_entity('scr_xm_orbital_blast', player_ped, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 20.0, false, false, false)
            graphics.start_networked_particle_fx_non_looped_on_entity('scr_xm_orbital_blast', player_ped, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 30.0, false, false, false)

            for i = 0, 5 do
                fire.add_owned_explosion(players.user_ped(), pos.x + (10 * i), pos.y + (10 * i), pos.z + (10 * i), 60, 100000.0, true, false, 1.0)
            end

            util.yield(1000)
            Network.OrbitalCannon(false)
        end)

        self.trolling:action(T'Oribtal Strike', {}, T'Launch an orbital strike on the player', function()
            S:RequestNamedPtfxAsset('scr_xm_orbital')
            local player_ped = player.get_player_ped(pid)
            local pos = players.get_position(pid)

            graphics.start_networked_particle_fx_non_looped_on_entity('scr_xm_orbital_blast', player_ped, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, false, false, false)
            graphics.start_networked_particle_fx_non_looped_on_entity('scr_xm_orbital_blast', player_ped, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 20.0, false, false, false)
            graphics.start_networked_particle_fx_non_looped_on_entity('scr_xm_orbital_blast', player_ped, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 30.0, false, false, false)

            for i = 0, 5 do
                fire.add_explosion(pos.x + (10 * i), pos.y + (10 * i), pos.z + (10 * i), 60, 100000.0, true, false, 1.0)
            end
        end)

        self.trolling:action(T'Send Mugger', {}, T'Send a mugger to mug the player', function()
            Network.SendAttacker(pid, 'Mugger')
        end)

        self.trolling:action(T'Send Mercenaries', {}, T'Send mercenaries to kill the player', function()
            Network.SendAttacker(pid, 'Mercenaries')
        end)

        self.trolling:action(T'Send Strike Team (Level 1)', {}, T'Send a strike team to kill the player', function()
            Network.SendAttacker(pid, 'Strike Team', 1)
        end)

        self.trolling:action(T'Send Strike Team (Level 2)', {}, T'Send a strike team to kill the player', function()
            Network.SendAttacker(pid, 'Strike Team', 2)
        end)

        self.trolling:action(T'Send Strike Team (Level 3)', {}, T'Send a strike team to kill the player', function()
            Network.SendAttacker(pid, 'Strike Team', 3)
        end)

        self.trolling:action(T'Unghost', {}, T'Unghost the player', function()
            Network.SetBounty(pid, 0, true)
            util.yield(500)
            Network.SetBounty(pid, 0, false)
        end)

        self.trolling:divider('')
        self.trolling:toggle_loop(T'Block Passive Mode', {}, T'Prevent the player from going passive', function()
            Network.SetBounty(pid, 0, true)
        end, function()
            Network.SetBounty(pid, 0, false)
        end)

        self.trolling:toggle_loop(T'Annoy', {}, T'Annoy the player with a constant stream of notifications', function()
            local amount = math.random(math.min_int, math.max_int)
            S:SuccessfullyMugged(pid, amount)
            util.yield(100)
        end)

        self.trolling:toggle_loop(T'Spoof To Player Position', {}, T'Spoof your position to the coordinates of this player', function()
            
            if not self.stand_pos_spoof.value then
                self.stand_pos_spoof:trigger()
            end

            local coords = players.get_position(pid)
            coords.z -= 1000
            self.stand_spoofed_pos:trigger($'{coords.x}, {coords.y}, {coords.z}')
        end, function()
            if self.stand_pos_spoof.value then
                self.stand_pos_spoof.value = false
            end
        end)

        self.friendly = self.root:list(T'Friendly', {}, T'Friendly')
        self.friendly_bounty = self.friendly:list(T'Bounty', {}, T'Bounty')
        self.friendly_bounty:toggle_loop(T'Anti-Bounty', {}, T'Prevent other players from placing a bounty on them', function()
            if players.get_bounty(pid) ~= nil then
                Network.SetBounty(pid, 0, false)
            end
        end)

        self.friendly_bounty:toggle_loop(T'Anti-Modded Bounty', {}, T'Prevent modders from placing a modded bounty on them', function()
            local amount = players.get_bounty(pid)
            if amount ~= nil and Network.IsBountyModded(amount or 1000) then
                Network.SetBounty(pid, 0, false)
            end
        end)

        self.neutral = self.root:list(T'Neutral', {}, T'Neutral')
        self.cayo = self.neutral:list(T'Cayo Perico', {}, T'Cayo Perico')
        self.target_choice = self.cayo:list_select(T'Target', {}, T'Target that will be set for this player in the heist', self.cayo_targets, 1, function(index) end)
        self.cayo:toggle_loop(T'Set Target', {}, T'Set the target for this player in the heist (changing the target mid-heist will change the take)', function()
            local target = Globals.CayoPrimaryTarget:g(pid)
            memory.write_int(target, self.target_choice.value - 1)
        end)

        if pid ~= players.user() then
            self.ghosted = self.root:list(T'Ghosted', {}, T'Ghosted', nil, nil, || -> self:UpdateGhostedInfo(pid))
            local times_killed = self.ghosted:readonly(T'Times Killed: 0', '')
            local is_ghosted = self.ghosted:readonly(T'Ghosted To: No', '')

            self.ghosted:divider('')
            self.ghosted:action(T'Become Unghosted', {}, T'Become unghosted', function()
                local is_ghosted = Globals.IsPlayerGhosted:g(pid)
                local ghosted_bitfield = Globals.GhostedBitfield:g(pid)
                if memory.read_byte(is_ghosted) == 1 or memory.read_int(ghosted_bitfield) > 0 then
                    memory.write_int(ghosted_bitfield, 0)
                else
                    Notifications.Show(T'You are not ghosted to this player', 'MrRobot', '', Notifications.HUD_COLOUR_BLACK)
                end
            end)

            self.ghosted:action(T'Become Ghosted', {}, T'Become ghosted', function()
                local is_ghosted = Globals.IsPlayerGhosted:g(pid)
                local ghosted_bitfield = Globals.GhostedBitfield:g(pid)
                local killed = Globals.GhostedKilledByPlayerCount:g(pid)
                if memory.read_byte(is_ghosted) == 0 or memory.read_int(ghosted_bitfield) == 0 then
                    memory.write_int(ghosted_bitfield, 0xC7D718)
                    memory.write_byte(is_ghosted, 1)
                    memory.write_int(killed, 0)
                    network.set_remote_player_as_ghost(pid, true)
                else
                    Notifications.Show(T'You are already ghosted to this player', 'MrRobot', '', Notifications.HUD_COLOUR_BLACK)
                end
            end)

            self.tut_session = self.root:list(T'Tutorial Session', {}, T'Tutorial Session', nil, nil, || -> self:UpdateTutorialSessionInfo(pid))
            self.tut_session:readonly(T'Instance ID: ?', '')
            self.tut_session:readonly(T'Team ID: ?', '')
            self.tut_session:readonly(T'Can Join: ?', '')
            self.tut_session:divider('')

            self.tut_session:action(T'Join', {}, T'Join the players tutorial session', function()
                local instance_id, team_id = Network.GetInstanceIDAndTeamID(pid)
                if instance_id == 64 then
                    Notifications.Show(T'You cannot join this players tutorial session', 'MrRobot', '', Notifications.HUD_COLOUR_REDDARK)
                    return
                end
                if network.network_get_player_tutorial_session_instance(players.user()) ~= instance_id then
                    network.network_allow_gang_to_join_tutorial_session(instance_id, team_id)
                else
                    Notifications.Show(T'You are already in this players tutorial session', 'MrRobot', '', Notifications.HUD_COLOUR_REDDARK)
                end
            end)

            self.tut_session:action(T'Leave', {}, T'Leave the players tutorial session', function()
                network.network_end_tutorial_session()
            end)
        end
    end

    function PlayerRemove(pid, name)
        if self.proot:isValid() then
            self.proot:delete()
        end
    end

    function UpdatePlayerInfo(pid)
        if not self.updating.player_info then
            self.updating.player_info = true
            local CPed = GTAClasses.CPed:new(entities.handle_to_pointer(player.get_player_ped(pid)))
            util.create_tick_handler(function()
                local item = menu.get_current_menu_list()
                if item.menu_name ~= T'Player Info' then 
                    self.updating.player_info = false
                    return false 
                end
                local children = item:getChildren()
                local is_dev, badsport, cheater, orbital_cannon, drone, godmode, vehicle, vehicle_health, vehicle_owner = children[1], children[2], children[3], children[4], children[5], children[6], children[7], children[8], children[9]
                if is_dev:isValid() then
                    is_dev.menu_name = T'Script Developer: ' .. ((S:IsDev(pid)) ? T'Yes' : T'No')
                end
                if badsport:isValid() then
                    badsport.menu_name = T'Badsport: ' .. ((Network.StatsPlayerIsBadSport(pid)) ? T'Yes' : T'No')
                end
                if cheater:isValid() then
                    cheater.menu_name = T'Cheater: ' .. ((Network.StatsPlayerIsCheater(pid)) ? T'Yes' : T'No')
                end
                if orbital_cannon:isValid() then
                    orbital_cannon.menu_name = T'Orbital Cannon: ' .. ((Network.IsUsingOrbitalCannon(pid)) ? T'Yes' : T'No')
                end
                if drone:isValid() then
                    drone.menu_name = T'Drone: ' .. ((Network.IsUsingDrone(pid)) ? T'Yes' : T'No')
                end
                if godmode:isValid() then
                    godmode.menu_name = T'Godmode: ' .. ((CPed.m_damage_bits & 0x1F0 ~= 0) ? T'Yes' : T'No')
                end
                if vehicle:isValid() then
                    local veh = ped.get_vehicle_ped_is_in(player.get_player_ped(pid), false)
                    local model = entity.get_entity_model(veh)
                    vehicle.menu_name = T'Vehicle: ' .. util.get_label_text(util.reverse_joaat(model))
                end
                if vehicle_health:isValid() then
                    local veh = ped.get_vehicle_ped_is_in(player.get_player_ped(pid), false)
                    vehicle_health.menu_name = T'Vehicle Health: ' .. entity.get_entity_health(veh)
                end
                if vehicle_owner:isValid() then
                    local veh = ped.get_vehicle_ped_is_in(player.get_player_ped(pid), false)
                    vehicle_owner.menu_name = T'Vehicle Owner: ' .. players.get_name(entities.get_owner(veh))
                end
            end)
        end
    end

    function UpdatePersonalVehicle(pid)
        if not self.updating.personal_vehicle then
            self.updating.personal_vehicle = true
            util.create_tick_handler(function()
                local item = menu.get_current_menu_list()
                if item.menu_name ~= T'Personal Vehicle' then 
                    self.updating.personal_vehicle = false
                    return false 
                end
                local veh = Network.GetPVFromNetworkID(pid)
                local children = item:getChildren()
                local model, health, godmode, frozen, invisible, can_migrate, network_id, owner = children[2], children[3], children[4], children[5], children[6], children[7], children[8], children[9]

                if model:isValid() then
                    if veh ~= 0 then
                        model.menu_name = T'Model: ' .. util.get_label_text(util.reverse_joaat(entity.get_entity_model(veh)))
                    else
                        model.menu_name = T'Model: None'
                    end
                end

                if health:isValid() then
                    if veh ~= 0 then
                        health.menu_name = T'Health: ' .. entity.get_entity_health(veh)
                    else
                        health.menu_name = T'Health: None'
                    end
                end

                if godmode:isValid() then
                    if veh ~= 0 then
                        godmode.menu_name = T'Godmode: ' .. ((self:IsEntityGodmode(veh)) ? T'Yes' : T'No')
                    else
                        godmode.menu_name = T'Godmode: None'
                    end
                end

                if frozen:isValid() then
                    if veh ~= 0 then
                        frozen.menu_name = T'Frozen: ' .. ((self:IsEntityFrozen(veh)) ? T'Yes' : T'No')
                    else
                        frozen.menu_name = T'Frozen: None'
                    end
                end

                if invisible:isValid() then
                    if veh ~= 0 then
                        invisible.menu_name = T'Invisible: ' .. ((self:IsEntityInvisible(veh)) ? T'Yes' : T'No')
                    else
                        invisible.menu_name = T'Invisible: None'
                    end
                end

                if can_migrate:isValid() then
                    if veh ~= 0 then
                        can_migrate.menu_name = T'Can Migrate: ' .. ((entities.get_can_migrate(veh)) ? T'Yes' : T'No')
                    else
                        can_migrate.menu_name = T'Can Migrate: None'
                    end
                end

                if network_id:isValid() then
                    if veh ~= 0 then
                        network_id.menu_name = T'Network ID: ' .. Network.GetPVNetworkID(pid)
                    else
                        network_id.menu_name = T'Network ID: None'
                    end
                end

                if owner:isValid() then
                    if veh ~= 0 then
                        owner.menu_name = T'Owner: ' .. players.get_name(entities.get_owner(veh))
                    else
                        owner.menu_name = T'Owner: None'
                    end
                end
            end)
        end
    end

    function UpdateBountyInfo(pid)
        if not self.updating.bounty then
            self.updating.bounty = true
            util.create_tick_handler(function()
                local item = menu.get_current_menu_list()
                if item.menu_name ~= T'Bounty' then
                    self.updating.bounty = false
                    return false
                end
                local children = item:getChildren()
                local active, amount, reward, modded = children[2], children[3], children[4], children[5]

                local bounty = Network.GetBounty(pid)
                if active:isValid() then
                    active.menu_name = T'Active: ' .. ((bounty.has_bounty) ? T'Yes' : T'No')
                end

                if amount:isValid() then
                    amount.menu_name = T'Amount: ' .. bounty.amount
                end

                if reward:isValid() then
                    reward.menu_name = T'Reward: ' .. bounty.reward
                end

                if modded:isValid() then
                    modded.menu_name = T'Modded: ' .. ((Network.IsBountyModded(bounty.amount) and bounty.has_bounty) ? T'Yes' : T'No')
                end
            end)
        end
    end

    function UpdateWheelsInfo(pid)
        if not self.updating.wheels_states then
            self.updating.wheels_states = true
            util.create_tick_handler(function()
                local item = menu.get_current_menu_list()
                if item.menu_name ~= T'Wheels' then
                    self.updating.wheels_states = false
                    return false
                end
                local player_ped = player.get_player_ped(pid)
                local veh = ped.get_vehicle_ped_is_using(player_ped)
                if veh ~= 0 then
                    local ptr = entities.handle_to_pointer(veh)
                    if ptr ~= 0 then
                        local state = memory.read_short(ptr + 0xA98)
                        local wheel_count = memory.read_byte(ptr + 0xDA0)

                        local player_labels = self.wheel_labels[pid]
                        if type(player_labels) == 'table' then
                            for i = 1, 8 do
                                if player_labels[i]:isValid() then
                                    player_labels[i].visible = i <= wheel_count
                                    player_labels[i].menu_name = T'Wheel ' .. i .. ': ' .. ((memory.bits:check(state, i)) ? T'Detached' : T'Attached')
                                end
                            end
                        end
                    end
                end
            end)
        end
    end

    function UpdateGhostedInfo(pid)
        if not self.updating.ghosted then
            self.updating.ghosted = true
            util.create_tick_handler(function()
                local item = menu.get_current_menu_list()
                if item.menu_name ~= T'Ghosted' then
                    self.updating.ghosted = false
                    return false
                end
                local children = item:getChildren()
                local times_killed, is_ghosted = children[1], children[2]
                local g_is_ghosted = Globals.IsPlayerGhosted:g(pid)
                local g_times_killed = Globals.GhostedKilledByPlayerCount:g(pid)

                if times_killed:isValid() then
                    times_killed.menu_name = T'Times Killed: ' .. (memory.read_int(g_times_killed) or 0)
                end

                if is_ghosted:isValid() then
                    is_ghosted.menu_name = T'Ghosted To: ' .. ((memory.read_byte(g_is_ghosted) == 1) ? T'Yes' : T'No')
                end
            end)
        end
    end

    function IsEntityGodmode(ent)
        local ptr = entities.handle_to_pointer(ent)
        local mask = 0x1F0
        if ptr ~= 0 then
            local damage_flags = memory.read_int(ptr + 0x188)
            return damage_flags & mask ~= 0
        end
        return false
    end

    function IsEntityFrozen(ent)
        local ptr = entities.handle_to_pointer(ent)
        if ptr ~= 0 then
            return memory.read_long(ptr + 0x0028) & (1 << 49) ~= 0
        end
        return false
    end

    function IsEntityInvisible(ent)
        local ptr = entities.handle_to_pointer(ent)
        local mask = 0x10000100000000
        if ptr ~= 0 then
            return memory.read_long(ptr + 0x0028) & mask == 0
        end
        return false
    end

    function OutOfRange()
        Notifications.Show(T'Player is out of range, spectate them or get closer!', 'MrRobot', '', Notifications.HUD_COLOUR_BLACK)
    end

    function ForceVehicleRespawn(pid)
        local veh = Network.GetPVFromNetworkID(pid)
        if veh ~= 0 then
            local target_nethash = network.network_hash_from_player_handle(pid)
            if not ped.is_ped_in_any_vehicle(player.get_player_ped(pid)) then
                if Network.RequestControl(veh) then
                    self:SoftSpoof(pid, true)
                    decorator.decor_set_int(veh, 'Previous_Owner', target_nethash)
                else
                    Network.FailedToRequestControl(veh)
                end
            else
                Notifications.Show(T'They are in their vehicle, kick them from it first!', 'MrRobot', '', Notifications.HUD_COLOUR_BLACK)
            end
        else
            self:OutOfRange()
        end
    end

    function SoftSpoof(pid, state)
        local player_id = players.user()
        if state then
            Network.SetPVNetworkID(player_id, Network.GetPVNetworkID(pid))
        else
            Network.SetPVNetworkID(player_id, -1)
        end
    end

    function SpoofVehicle(pid, state)
        local veh = Network.GetPVFromNetworkID(pid)
        local target_nethash, my_nethash = network.network_hash_from_player_handle(pid), network.network_hash_from_player_handle(players.user())
        if veh ~= 0 then
            if state then
                S:RequestPVInSlot(0)
                Network.SetPVNetworkID(players.user(), Network.GetPVNetworkID(pid))
                decorator.decor_set_int(veh, 'Player_Vehicle', my_nethash)
                decorator.decor_set_int(veh, 'Previous_Owner', my_nethash)
            else
                decorator.decor_set_int(veh, 'Player_Vehicle', target_nethash)
                decorator.decor_set_int(veh, 'Previous_Owner', target_nethash)
                S:ReturnPVInSlot(0)
                Network.SetPVNetworkID(players.user(), -1)
            end
        else
            self:OutOfRange()
        end
    end

    function TakeoverKick(pid)
        local veh = Network.GetPVFromNetworkID(pid)
        local player_id = players.user()
        if veh ~= 0 then
            S:ReturnActivePV()
            local my_nethash = network.network_hash_from_player_handle(player_id)
            self:SpoofVehicle(pid, true)
            util.yield(1000)
            Network.VehicleKick(pid)

            repeat
                util.yield_once()
            until not ped.is_ped_in_any_vehicle(player.get_player_ped(pid), false)
            util.yield(200)
            self:SpoofVehicle(pid, false)
        else
            self:OutOfRange()
        end
    end

    function RegularKick(pid)
        local veh = Network.GetPVFromNetworkID(pid)
        local player_id = players.user()
        if veh ~= 0 then
            S:ReturnActivePV()
            local my_nethash = network.network_hash_from_player_handle(player_id)
            local target_nethash = network.network_hash_from_player_handle(pid)
            Network.SetPVNetworkID(player_id, Network.GetPVNetworkID(pid))
            decorator.decor_set_int(veh, 'MPBitset', 0)
        else
            self:OutOfRange()
        end
    end

    function FormatNumber(number)
        number = tostring(number)
        local formatted = ''
        local count = 0
        for i = #number, 1, -1 do
            count = count + 1
            formatted = number[i] .. formatted
            if count % 3 == 0 and i ~= 1 then
                formatted = ',' .. formatted
            end
        end
        return formatted
    end

    function CreateOverlay(pid)
        local name = ''
        if players.is_marked_as_modder(pid) then
            name = '[MODDER] ' .. players.get_name(pid)
        end

        local is_otr = players.is_otr(pid)
        local is_godmode = players.is_godmode(pid)
        local vehicle_model = players.get_vehicle_model(pid)
        local in_rc = players.is_using_rc_vehicle(pid)
        local bounty_data = Network.GetBounty(pid)

        local veh = ped.get_vehicle_ped_is_in(player.get_player_ped(pid), false)

        otr_colour = is_otr ? colours.green : colours.red
        godmode_colour = is_godmode ? colours.green : colours.red
        vehicle_colour = vehicle_model == 0 ? colours.red : colours.green
        rc_colour = in_rc ? colours.green : colours.red
        bounty_colour = bounty_data.has_bounty ? colours.green : colours.red
        host_colour = players.get_host() == pid ? colours.green : colours.red
        scripthost_colour = players.get_script_host() == pid ? colours.green : colours.red
        ghosted_colour = network.is_entity_a_ghost(player.get_player_ped(pid)) ? colours.green : colours.red

        if Network.IsBountyModded(bounty_data.amount) and bounty_data.has_bounty then
            bounty_colour = colours.pink
        end

        directx.draw_rect(overlay_name_banner.x, overlay_name_banner.y, overlay_name_banner.width, overlay_name_banner.height, overlay_name_banner.colour)
        directx.draw_text(overlay_name_text.x + (overlay_name_banner.width / 2), overlay_name_text.y, name, ALIGN_CENTRE, 0.5, overlay_name_text.colour)
        directx.draw_rect(overlay_info.x, overlay_info.y, overlay_info.width, overlay_info.height, overlay_info.colour)

        directx.draw_text((overlay_info.width / 4) - 0.025, 0.054, 'RID: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.073, 0.054, players.get_rockstar_id(pid), ALIGN_CENTRE, 0.5, text_colour)

        directx.draw_text((overlay_info.width / 4) - 0.0274, 0.054 + (overlay_name_banner.height * 1), 'IP: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.078, 0.054 + (overlay_name_banner.height * 1), S:UnpackIP(players.get_connect_ip(pid)), ALIGN_CENTRE, 0.5, text_colour)

        directx.draw_text((overlay_info.width / 4) - 0.0223, 0.054 + (overlay_name_banner.height * 2), 'Rank: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.057, 0.054 + (overlay_name_banner.height * 2), players.get_rank(pid), ALIGN_CENTRE, 0.5, text_colour)

        directx.draw_text((overlay_info.width / 4) - 0.0267, 0.054 + (overlay_name_banner.height * 3), 'RP: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.069, 0.054 + (overlay_name_banner.height * 3), self:FormatNumber(players.get_rp(pid)), ALIGN_CENTRE, 0.5, text_colour)

        directx.draw_text((overlay_info.width / 4) - 0.0262, 0.054 + (overlay_name_banner.height * 4), 'KD: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.0605, 0.054 + (overlay_name_banner.height * 4), players.get_kd(pid), ALIGN_CENTRE, 0.5, text_colour)

        directx.draw_text((overlay_info.width / 4) - 0.024, 0.054 + (overlay_name_banner.height * 5), 'OTR: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.0595, 0.054 + (overlay_name_banner.height * 5), (is_otr ? T'Yes' : T'No'), ALIGN_CENTRE, 0.5, otr_colour)

        directx.draw_text((overlay_info.width / 4) - 0.014, 0.054 + (overlay_name_banner.height * 6), 'Godmode: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.0595, 0.054 + (overlay_name_banner.height * 6), (is_godmode ? T'Yes' : T'No'), ALIGN_CENTRE, 0.5, godmode_colour)

        directx.draw_text((overlay_info.width / 4) - 0.014, 0.054 + (overlay_name_banner.height * 7), 'Vehicle: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.0647, 0.054 + (overlay_name_banner.height * 7), (vehicle_model == 0 ? T'None' : util.get_label_text(util.reverse_joaat(vehicle_model))), ALIGN_CENTRE, 0.5, vehicle_colour)

        directx.draw_text((overlay_info.width / 4) - 0.0255, 0.054 + (overlay_name_banner.height * 8), 'RC: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.0603, 0.054 + (overlay_name_banner.height * 8), (in_rc ? T'Yes' : T'No'), ALIGN_CENTRE, 0.5, rc_colour)

        directx.draw_text((overlay_info.width / 4) - 0.016, 0.054 + (overlay_name_banner.height * 9), 'Bounty: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.059, 0.054 + (overlay_name_banner.height * 9), (self:FormatNumber(bounty_data.amount) or 0), ALIGN_CENTRE, 0.5, bounty_colour)

        directx.draw_text((overlay_info.width / 4) + 0.001, 0.054 + (overlay_name_banner.height * 10), 'Bounty Reward: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.059, 0.054 + (overlay_name_banner.height * 10), (self:FormatNumber(bounty_data.reward) or 0), ALIGN_CENTRE, 0.5, bounty_reward_colour)

        directx.draw_text((overlay_info.width / 4) - 0.020, 0.054 + (overlay_name_banner.height * 11), 'Host: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.0642, 0.054 + (overlay_name_banner.height * 11), (players.get_host() == pid ? T'Yes' : T'No'), ALIGN_CENTRE, 0.5, host_colour)

        directx.draw_text((overlay_info.width / 4) - 0.004, 0.054 + (overlay_name_banner.height * 12), 'Script Host: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.0642, 0.054 + (overlay_name_banner.height * 12), (players.get_script_host() == pid ? T'Yes' : T'No'), ALIGN_CENTRE, 0.5, scripthost_colour)

        directx.draw_text((overlay_info.width / 4) - 0.013, 0.054 + (overlay_name_banner.height * 13), 'Ghosted: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.0642, 0.054 + (overlay_name_banner.height * 13), (network.is_entity_a_ghost(player.get_player_ped(pid)) ? T'Yes' : T'No'), ALIGN_CENTRE, 0.5, ghosted_colour)
    
        local health = veh ~= 0 ? entity.get_entity_health(veh) : 0
        directx.draw_text((overlay_info.width / 4) - 0.015, 0.054 + (overlay_name_banner.height * 14), 'Health: ', ALIGN_CENTRE, 0.5, text_colour)
        directx.draw_text((overlay_info.width / 4) + 0.061, 0.054 + (overlay_name_banner.height * 14), health, ALIGN_CENTRE, 0.5, text_colour)
    end

    function UpdateTutorialSessionInfo(pid)
        if not self.updating.tut_session_info then
            self.updating.tut_session_info = true
            util.create_tick_handler(function()
                local item = menu.get_current_menu_list()
                if item.menu_name ~= T'Tutorial Session' then
                    self.updating.tut_session_info = false
                    return false
                end

                local children = item:getChildren()
                local instanceid, teamid, can_join = children[1], children[2], children[3]

                local instance_id, team_id = Network.GetInstanceIDAndTeamID(pid)
                if instanceid:isValid() then
                    instanceid.menu_name = T'Instance ID: ' .. instance_id
                end

                if teamid:isValid() then
                    teamid.menu_name = T'Team ID: ' .. team_id
                end

                if can_join:isValid() then
                    can_join.menu_name = T'Can Join: ' .. ((instance_id == 64 or network.network_get_player_tutorial_session_instance(pid) == -1) ? T'No' : T'Yes')
                end
            end)
        end
    end

    function CheckBlacklist(pid, root)
        local rid = players.get_rockstar_id(pid)
        for Blacklist as entry do
            if entry.rid == rid then
                Notifications.Show(players.get_name(pid) .. ' is blacklisted\n\nReason: ' .. entry.reason, 'MrRobot', '', Notifications.HUD_COLOUR_BLACK)
            end
        end
    end
end

return Players