local T, S = require('translations'), require('shared')
local G = require('script_globals')
local Globals = G.globals
local Network = require('network')
local Notifications = require('notifications')

pluto_class Cooldowns
    function __construct(root)
        self.root = root:list(T'Cooldowns', {T'rcooldowns'}, '')
        self.kosatka = self.root:list(T'Kosatka', {T'rckosatka'}, T'Kosatka cooldowns')
        self.terrorbyte = self.root:list(T'Terrorbyte', {T'rcterrorbyte'}, T'Terrorbyte cooldowns')

        self:Init()
    end

    function Init()
        self:CreateKosatka()
        self:CreateTerrorbyte()

        self.root:divider('')
        self.root:toggle(T'Remove Moonpool Cooldown', {}, T'Remove moonpool request cooldown', function(state)
            self:SetMoonpoolCooldown(state ? 0 : 300000)
        end)

        self.root:toggle(T'Remove MK2 Cooldown', {}, T'Remove Oppressor MKII request cooldown', function(state)
            self:SetMk2Cooldown(state ? 0 : 300000)
        end)

        self.root:toggle(T'Remove Strike Team Cooldown', {}, T'Remove strike team request cooldown', function(state)
            self:SetStrikeTeamCooldown(state ? 0 : 300000)
        end)

        self.root:toggle_loop(T'Remove Orbital Cannon Cooldown', {}, T'Remove orbital cannon cooldown', function()
            local char_slot = util.get_char_slot()
            stats.stat_set_int(($'MP{char_slot}_ORBITAL_CANNON_COOLDOWN'):joaat(), 0, true)
        end)

        self.root:toggle(T'Remove MK2 Chaff Cooldown', {}, T'Remove Oppressor MKII chaff cooldown', function(state)
            self:SetOppressor2ChaffCooldown(state ? 0 : 6000)
        end)

        self.root:toggle(T'Remove MK2 Flare Cooldown', {}, T'Remove Oppressor MKII flare cooldown', function(state)
            self:SetOppressor2FlareCooldown(state ? 0 : 6000)
        end)

        self.root:toggle(T'Infinite Chaff Duration', {}, T'Make Oppressor MKII Chaff last forever', function(state)
            self:SetOppressor2ChaffDuration(state ? math.max_float : 10.0)
        end)

        self.root:toggle_loop(T'Remove Acid Lab Request Cooldown', {}, T'Remove acid lab request cooldown', function(state)
            self:SetAcidLabRequestCooldown(state ? 0 : 300000)
        end)

        self.root:toggle_loop(T'Remove MOC Request Cooldown', {}, T'Remove MOC request cooldown', function(state)
            self:RemoveMOCRequestCooldown()
        end)

        self.root:toggle_loop(T'Remove Avenger Request Cooldown', {}, T'Remove Avenger request cooldown', function(state)
            self:RemoveAvengerRequestCooldown()
        end)

        self.root:toggle_loop(T'Remove Personal Vehicle Cooldown', {}, T'Remove personal vehicle request cooldown', function(state)
            self:RemovePersonalVehicleRequestCooldown()
        end)

        self.root:toggle_loop(T'Remove CEO Vehicle Cooldown', {}, T'Remove CEO vehicle request cooldown', function(state)
            self:RemoveCEOVehicleRequestCooldown()
        end)

        self.root:toggle_loop(T'Remove Ballistic Armor Cooldown', {}, T'Remove ballistic armor request cooldown', function(state)
            memory.write_int(Globals.BallisticArmorCooldown:g(), 0)
        end)

        self.root:toggle_loop(T'Remove All Cooldowns', {}, T'Remove cooldowns for loads of things within the interaction menu', function(state)
            for i = 0, 79 do 
                memory.write_int(memory.script_global(2685249 + 4328 + 242 + 1 + (i * 2)), 0) 
            end
        end)

        self.root:toggle_loop(T'Remove Personal Vehicle Request Delay', {}, T'Personal vehicles will be delivered to you instantly', function()
            self:RemovePersonalVehicleRequestDelay()
        end)
    end

    function CreateKosatka()
        self.kosatka:toggle(T'Remove Missile Cooldown', {}, T'Remove kosatka guided missile cooldown', function(state)
            self:SetKosatkaMissileCooldown(state ? 0 : 60000)
        end)

        self.kosatka:toggle(T'Remove Missile Distance', {}, T'Remove kosatka guided missile distance limit', function(state)
            self:SetKosatkaMissileDistance(state ? math.max_float : 4000)
        end)

        self.kosatka:toggle_loop(T'Remove Request Cooldown', {}, T'Remove kosatka request cooldown', function(state)
            self:RemoveKosatkaRequestCooldown()
        end)

        self.kosatka:toggle_loop(T'Remove Dinghy Cooldown', {}, T'Remove kosatka dinghy cooldown', function(state)
            self:RemoveKosatkaDinghyCooldown()
        end)
    end

    function CreateTerrorbyte()
        -- TODO: Fix the commented out stuff
        --[[self.terrorbyte:toggle(T'Remove Drone Cooldown', {}, T'Remove drone cooldown', function(state)
            self:SetTerrorbyteDroneCooldown(state ? 0 : 60000)
        end)]]

        self.terrorbyte:toggle_loop(T'Remove Request Cooldown', {}, T'Remove terrorbyte request cooldown', function()
            self:RemoveTerrorbyteRequestCooldown()
        end)

        -- self.terrorbyte:toggle(T'Unlimited Range', {}, T'Removes drone range limitation so you can take the drone anywhere on the map without losing connection', function(state)
        --     self:SetTerrorbyteDroneDistance(state ? 1000000 : 500)
        -- end)

        -- self.terrorbyte:toggle(T'Unlimited Height', {}, T'Removes drone height limitation so you can go as high as the sky height barrier without the drone getting destroyed', function(state)
        --     self:SetTerrorbyteDroneHeight(state ? 1000000 : 200)
        -- end)

        -- self.terrorbyte:toggle(T'Remove Shock Cooldown', {}, T'Remove shock cooldown', function(state)
        --     self:SetTerrorbyteDroneShockCooldown(state ? 0 : 12000)
        -- end)

        -- self.terrorbyte:toggle(T'Instant Boost Recharge', {}, T'Remove boost recharge time', function(state)
        --     self:SetTerrorbyteDroneBoostRechargeTime(state ? 0 : 15000)
        -- end)

        -- self.terrorbyte:toggle(T'Instant Detonate', {}, T'Remove detonate countdown', function(state)
        --     self:SetTerrorbyteDroneDetonateCountdown(state ? 0 : 7000)
        -- end)

        -- self.damage_players = self.terrorbyte:toggle(T'Damage Players', {}, T'Drone damage players', function(state)
        --     self:SetTerrorbyteDroneDamagePlayers(state ? 1 : 0)
        -- end, self:GetTerrorbyteDroneDamagePlayers())

        -- self.damage_peds = self.terrorbyte:toggle(T'Damage Peds', {}, T'Drone damage peds', function(state)
        --     self:SetTerrorbyteDroneDamagePeds(state ? 1 : 0)
        -- end, self:GetTerrorbyteDroneDamagePeds())

        -- self.terrorbyte:click_slider(T'Drone Boost Time', {T'rcdroneboosttime'}, T'Amount of the time the drone will boost for', 4, math.max_int, 4, 1, function(value)
        --     self:SetTerrorbyteDroneBoostTime(value * 1000)
        -- end)

        -- self.terrorbyte:click_slider_float(T'Drone Forward Speed', {T'rcdronespeed'}, T'Drone forward speed', 3500.0, math.max_int + 0.0, 3500.0, 500.0, function(value)
        --     self:SetTerrorbyteDroneForwardSpeed(value)
        -- end)

        -- self.instant_kill = self.terrorbyte:toggle(T'Instant Kill', {}, T'Instantly kill players and ped with the drone', function(state)
        --     if not self.damage_players.value or not self.damage_peds.value then
        --         if self.instant_kill:isValid() then
        --             util.toast(T'Enable damage players or damage peds to use this feature')
        --             self.instant_kill.value = false
        --         end 
        --         return 
        --     end

        --     if Network.IsUsingDrone(players.user()) then
        --         local localplayer = players.localplayer()
        --         localplayer:set_player_weapon_damage_modifier(state ? math.max_float : 1.0)
        --     else
        --         if self.instant_kill:isValid() then
        --             --util.toast(T'You are not using a drone')
        --             Notifications.Show(T'You are not using a drone', T'Cooldowns', nil, Notifications.HUD_COLOUR_REDDARK)
        --             self.instant_kill.value = false
        --         end
        --     end
        -- end)
    end

    function SetKosatkaMissileCooldown(value) memory.write_int(Globals.KosatkaMissileCooldown:g(), value) end
    function SetKosatkaMissileDistance(value) memory.write_float(Globals.KosatkaMissileDistance:g(), value) end
    function RemoveKosatkaRequestCooldown() memory.write_int(Globals.KosatkaRequestCooldown:g(), 0) end
    function RemoveKosatkaDinghyCooldown() memory.write_int(Globals.KosatkaDinghyCooldown:g(), 0) end
    function RemoveMOCRequestCooldown() memory.write_int(Globals.MOCRequestCooldown:g(), 0) end
    function RemoveAvengerRequestCooldown() memory.write_int(Globals.AvengerRequestCooldown:g(), 0) end
    function RemoveTerrorbyteRequestCooldown() memory.write_int(Globals.TerrorbyteRequestCooldown:g(), 0) end
    function RemovePersonalVehicleRequestCooldown() memory.write_int(Globals.PersonalVehicleRequestCooldown:g(), 0) end
    function RemoveCEOVehicleRequestCooldown() memory.write_int(Globals.CEOVehicleRequestCooldown:g(), 0) end
    function SetTerrorbyteDroneCooldown(value) memory.write_int(Globals.TerrorbyteDroneCooldown:g(), value) end
    function SetTerrorbyteDroneDistance(value) memory.write_float(Globals.TerrorbyteDistance:g(), value) end
    function SetTerrorbyteDroneHeight(value) memory.write_float(Globals.TerrorbyteHeight:g(), value) end
    function SetTerrorbyteDroneShockCooldown(value) memory.write_int(Globals.TerrorbyteShockCooldown:g(), value) end
    function SetTerrorbyteDroneBoostRechargeTime(value) memory.write_int(Globals.TerrorbyteBoostRechargeTime:g(), value) end
    function SetTerrorbyteDroneDetonateCountdown(value) memory.write_int(Globals.TerrorbyteDetonateCountdown:g(), value) end
    function SetTerrorbyteDroneDamagePlayers(value) memory.write_int(Globals.TerrorbyteDroneDamagePlayers:g(), value) end
    function SetTerrorbyteDroneDamagePeds(value) memory.write_int(Globals.TerrorbyteDroneDamagePeds:g(), value) end
    function GetTerrorbyteDroneDamagePlayers() return memory.read_int(Globals.TerrorbyteDroneDamagePlayers:g()) end
    function GetTerrorbyteDroneDamagePeds() return memory.read_int(Globals.TerrorbyteDroneDamagePeds:g()) end
    function SetTerrorbyteDroneBoostTime(value) memory.write_int(Globals.TerrorbyteDroneBoostTime:g(), value) end
    function SetTerrorbyteDroneForwardSpeed(value) memory.write_float(Globals.TerrorbyteDroneForwardSpeed:g(), value) end
    function SetMoonpoolCooldown(value) memory.write_int(Globals.MoonpoolCooldown:g(), value) end
    function SetMk2Cooldown(value) memory.write_int(Globals.Mk2Cooldown:g(), value) end
    function SetStrikeTeamCooldown(value) memory.write_int(Globals.StrikeTeamCooldown:g(), value) memory.write_int(Globals.StrikeTeamCooldown2:g(), 0) end
    function SetOppressor2FlareCooldown(value) memory.write_int(Globals.Oppressor2FlareCooldown:g(), value) end
    function SetOppressor2ChaffDuration(value) memory.write_int(Globals.Oppressor2ChaffDuration:g(), value) end
    function SetOppressor2ChaffCooldown(value) memory.write_int(Globals.Oppressor2ChaffCooldown:g(), value) end
    function SetAcidLabRequestCooldown(value) memory.write_int(Globals.AcidLabRequestCooldown:g(), value) end
    function RemovePersonalVehicleRequestDelay() memory.write_int(memory.script_local(table.unpack(Globals.PersonalVehicleRequestDelay)), 0) end
end

return Cooldowns