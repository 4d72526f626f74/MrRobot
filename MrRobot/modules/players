local T, S, H = require('translations'), require('shared'), require('handler')
local Bitfield = require('bitfield')
local VehModels = require('vehicle_models')
local Globals = require('script_globals')
local ScriptOffsets = require('offsets')
local shadow_root = menu.shadow_root()
local Bit, BitMask = S.Bit, S.BitMask
local CharSlot, PlayerID = S.CHAR_SLOT, S.PLAYER_ID

local ScriptRoot = filesystem.scripts_dir() .. 'MrRobot/'
local ScriptImages = ScriptRoot .. 'images/'
local GamerHandle = memory.alloc(104)

local Offsets = ScriptOffsets.Vehicles.LSCustoms
local Bits = ScriptOffsets.Players.Bits
local Settings = Bitfield.new(Bits.ForceScriptHost)

pluto_class Players
    ScriptGlobal = memory.script_global
    ReadInt = memory.read_int
    ReadShort = memory.read_short
    ReadByte = memory.read_byte
    ReadFloat = memory.read_float
    WriteInt = memory.write_int
    WriteShort = memory.write_short
    WriteByte = memory.write_byte
    Alloc = memory.alloc

    function __construct()
       local func = S:Partial(self.PlayerLoop, self)
       H.PlayerLoop = func

       self.spawned_vehicles = {}
    end

    function PlayerLoop(pid, root)
        self.NetworkHandleFromPlayer(pid, GamerHandle, 104 // 8)
        S:AddPlayer(pid)
        if self.NetworkIsFriend(GamerHandle) then S:AddFriend(pid) end

        local name = players.get_name(pid)
        root:divider('Mr.Robot')
        local proot = root:list('Mr.Robot', {}, 'Mr.Robot')

        self.veh_menu = proot:list(T'Personal Vehicle', {}, T'Personal Vehicle options', function()
            util.create_tick_handler(function()
                local item = menu.get_current_menu_list()
                local veh = self:GetVehicleFromNetId(pid)

                if item.menu_name ~= T'Personal Vehicle' then
                    return false
                end

                if veh ~= nil then
                    self.model_ref.menu_name = T'Model' .. ': ' .. util.get_label_text(util.reverse_joaat(self.GetEntityModel(veh)))
                else
                    self.model_ref.menu_name = T'Model' .. ': ' .. T'None'
                end
            end)
        end)

        self.veh_menu:divider(T'Vehicle Info')    
        self.model_ref = self.veh_menu:readonly('', '')
        self.veh_menu:divider('')

        self.script_events = shadow_root:list(T'Script Events', {}, T'Script Events')
        self.trolling = proot:list(T'Trolling', {}, T'Trolling options')
        self.friendly = proot:list(T'Friendly', {}, T'Friendly options')
        self.organisation = shadow_root:list(T'Organisation', {}, T'Organisation')
        self.bounty = shadow_root:list(T'Bounty', {}, T'Bounty', function()
            util.create_tick_handler(function()
                local item = menu.get_current_menu_list()
                if item.menu_name ~= T'Bounty' and item:getParent().menu_name ~= T'Trolling' then
                    return false
                end
                
                local bounty_data = self.ScriptGlobal(Globals:PlayerBountyData(pid))
                local reward_data = self.ScriptGlobal(Globals:PlayerBountyRewardData(pid))

                self.bounty_active.menu_name = T'Active' .. ': ' .. (self.ReadByte(bounty_data) ~= 0)
                self.bounty_amount.menu_name = T'Amount' .. ': ' .. (self.ReadShort(bounty_data + 0x8))
                self.bounty_reward.menu_name = T'Reward' .. ': ' .. (self.ReadShort(reward_data))
                self.bounty_modded.menu_name = T'Modded' .. ': ' .. (self.ReadByte(bounty_data) ~= 0 and S:IsModdedBounty(self.ReadShort(bounty_data + 0x8)))
            end)
        end)
        self.toxic = shadow_root:list(T'Toxic', {}, T'Toxic')
        self.veh_trolling = shadow_root:list(T'Vehicle', {}, T'Vehicle Trolling')
        self.crashes = shadow_root:list(T'Crashes', {}, T'Crashes')

        self.veh_menu:toggle(T'Force Scripthost', {}, T'Forces you to become scripthost, this is not needed for trolling features to work but it can help when they fail', function(state) 
            Settings:Set(Bits.ForceScriptHost)
        end, Settings:IsSet(Bits.ForceScriptHost))

        if pid ~= PlayerID then
            self.veh_menu:toggle(T'Spectate', {}, T'Spectate the player', function(state)
                local spectate = menu.ref_by_rel_path(root, T'Spectate>Nuts Method')

                if spectate:isValid() then
                    spectate.value = state
                end
            end)
        end

        self.lock_doors = self.veh_menu:toggle_loop(T'Lock Doors', {}, T'Locks the doors of the player\'s vehicle', function()
            if Settings:IsSet(Bits.ForceScriptHost) then S:ForceScriptHost() end 
            local veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                S:RequestControl(veh)
                self.SetVehicleDoorsLockedForPlayer(veh, pid, true)
                self.SetVehicleDoorsShut(veh, true)
            else
                self.lock_doors.value = false
                self:DisplayRangeMessage(pid)
            end
        end,
        function()
            local veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                self.SetVehicleDoorsLockedForPlayer(veh, pid, false)
                self.SetVehicleDoorsShut(veh, false)
            end
        end)

        self.send_veh_to_heaven = self.veh_menu:toggle_loop(T'Send Vehicle To Heaven', {}, T'Sends the player\'s vehicle to heaven', function()
            if Settings:IsSet(Bits.ForceScriptHost) then S:ForceScriptHost() end  
            veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                pcall(function()
                    S:RequestControl(veh)
                    self.SetVehicleDoorsShut(veh, false)
                end)
            else
                self.send_veh_to_heaven.value = false
                self:DisplayRangeMessage(pid)
            end
        end,
        function() 
            veh = self:GetVehicleFromNetId(pid)
            if veh ~= nil then
                self.SetVehicleDoorsShut(veh, true)
            end
        end)

        self.deny_control_requests = self.veh_menu:toggle_loop(T'Deny Control Requests', {}, T'Prevents the player from taking control of their vehicle', function()
            if Settings:IsSet(Bits.ForceScriptHost) then S:ForceScriptHost() end 
            veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                pcall(function()
                    local ptr = entities.handle_to_pointer(veh)
                    S:RequestControl(veh)
                    entities.set_can_migrate(ptr, false)
                end)
            else
                self.deny_control_requests.value = false
                self:DisplayRangeMessage(pid)
            end
        end,
        function()
            veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                local ptr = entities.handle_to_pointer(veh)
                entities.set_can_migrate(ptr, true)
            end
        end)

        self.spoof_vehicle = self.veh_menu:toggle(T'Spoof Vehicle', {}, T'Spoof this players personal vehicle as your own', function(state)
            if Settings:IsSet(Bits.ForceScriptHost) then S:ForceScriptHost() end
            if self:GetVehicleFromNetId(pid) ~= 0 then
                self:SpoofVehicle(pid, PlayerID, state)
            else
                self:DisplayRangeMessage(pid)
                self.spoof_vehicle.value = false
            end
        end)

        self.conceal_vehicle = self.veh_menu:toggle_loop(T'Conceal Vehicle', {}, T'Stops the vehicle from being networked', function()
            local Veh = self:GetVehicleFromNetId(pid)
            if Veh ~= 0 then
                if not self.NetworkIsEntityConcealed(Veh) then
                    self.NetworkConcealEntity(Veh, true, true)
                end
            end
        end,
        function()
            local Veh = self:GetVehicleFromNetId(pid)
            if Veh ~= 0 then
                if self.NetworkIsEntityConcealed(Veh) then
                    self.NetworkConcealEntity(Veh, false, false)
                end
            end
        end)

        self.veh_menu:action(T'Add Explosive Device', {}, T'Add explosive device to the players vehicle', function()
            local veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                self.AddVehiclePhoneExplosiveDevice(veh)
            else
                local veh = self.GetVehiclePedIsIn(self.GetPlayerPed(pid), false)
                if veh ~= 0 then
                    self.AddVehiclePhoneExplosiveDevice(veh)
                end 
            end
        end)

        self.veh_menu:action(T'Remove Explosive Device', {}, T'Remove explosive device from the players vehicle', function()
            local veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                self.ClearVehiclePhoneExplosiveDevice(veh)
            else
                local veh = self.GetVehiclePedIsIn(self.GetPlayerPed(pid), true)
                if veh ~= 0 then
                    self.ClearVehiclePhoneExplosiveDevice(veh)
                end
            end
        end)

        self.veh_menu:action(T'Explode Device', {}, T'Explode the explosive device in the players vehicle', function(state)
            local veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                self.DetonateVehiclePhoneExplosiveDevice(veh)
            else
                local veh = self.GetVehiclePedIsIn(self.GetPlayerPed(pid), true)
                if veh ~= 0 then
                    self.DetonateVehiclePhoneExplosiveDevice(veh)
                end
            end
        end)

        self.veh_menu:action(T'Force Respawn', {}, T'Force the player\'s personal vehicle to respawn', function()
            if Settings:IsSet(Bits.ForceScriptHost) then S:ForceScriptHost() end
            self:ForceVehRespawn(pid)
        end)

        self.veh_menu:divider('')
        local veh_kicks = self.veh_menu:list(T'Kicks', {}, T'Vehicle kicks')
        veh_kicks:action(T'Takeover', {}, T'Takeover kick (a discrete vehicle kick)', function()
            if Settings:IsSet(Bits.ForceScriptHost) then S:ForceScriptHost() end
            self:TakeoverKick(pid)
        end)

        local decor_editor = self.veh_menu:list(T'Decor Editor', {}, T'Edit vehicle decors')
        local bitset = decor_editor:list(T'MPBitset', {}, '')

        for i = 0, 31 do
            bitset:toggle(T'Bit ' .. i, {}, '', function(state)
                if not SCRIPT_CAN_CONTINUE then return end
                local veh = self:GetVehicleFromNetId(pid)
                if veh ~= 0 then
                    self:SoftSpoof(pid, PlayerID, true)
                    local bitset = self.DecorGetInt(veh, 'MPBitset')
                    self.DecorSetInt(veh, 'MPBitset', state ? (Bit:Set(bitset, i)) : (Bit:Clear(bitset, i)))

                    self:SoftSpoof(pid, PlayerID, false)
                end
            end, Bit:Check(self.DecorGetInt(self:GetVehicleFromNetId(pid), 'MPBitset'), i))
        end
        
        decor_editor:text_input(T'Player_Vehicle', {T'editdecorpv'}, T'The player vehicle decor', function(value)
            if not SCRIPT_CAN_CONTINUE then return end
            local veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                self:SoftSpoof(pid, PlayerID, true)
                self.DecorSetInt(veh, 'Player_Vehicle', tonumber(value))
                self:SoftSpoof(pid, PlayerID, false)
            end
        end, self.DecorGetInt(self:GetVehicleFromNetId(pid), 'Player_Vehicle'))

        decor_editor:text_input(T'Previous_Owner', {T'editdecorpo'}, T'The previous owner decor', function(value)
            if not SCRIPT_CAN_CONTINUE then return end
            local veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                self:SoftSpoof(pid, PlayerID, true)
                self.DecorSetInt(veh, 'Previous_Owner', tonumber(value))
                self:SoftSpoof(pid, PlayerID, false)
            end
        end, self.DecorGetInt(self:GetVehicleFromNetId(pid), 'Previous_Owner'))

        decor_editor:text_input(T'PV_Slot', {T'editdecorpvs'}, T'The PV_Slot decor', function(value)
            if not SCRIPT_CAN_CONTINUE then return end
            local veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                self:SoftSpoof(pid, PlayerID, true)
                self.DecorSetInt(veh, 'PV_Slot', tonumber(value))
                self:SoftSpoof(pid, PlayerID, false)
            end
        end, self.DecorGetInt(self:GetVehicleFromNetId(pid), 'PV_Slot'))

        decor_editor:text_input(T'Veh_Modded_By_Player', {T'editdecorvmbp'}, T'The Veh_Modded_By_Player decor', function(value)
            if not SCRIPT_CAN_CONTINUE then return end
            local veh = self:GetVehicleFromNetId(pid)
            if veh ~= 0 then
                self:SoftSpoof(pid, PlayerID, true)
                self.DecorSetInt(veh, 'Veh_Modded_By_Player', tonumber(value))
                self:SoftSpoof(pid, PlayerID, false)
            end
        end, self.DecorGetInt(self:GetVehicleFromNetId(pid), 'Veh_Modded_By_Player'))

        self.organisation = self.trolling:attach(self.organisation)
        self.organisation:toggle_loop(T'Force Join', {}, T'Force join the players organisation, they cannot kick you as you will instantly join back', function()
            if Settings:IsSet(Bits.ForceScriptHost) then S:ForceScriptHost() end
            self:SetOrgId(pid)
        end)

        self.script_events = self.trolling:attach(self.script_events)
            
        local events = {
            'Fake Register CEO', 
            'Fake Register MC', 
            'Fake Register VIP',
            'Fake Off The Radar',
            'Fake Ghost Org',
            'Mugged',
            'Ewo',
            'Ghosted',
            'Destroyed Vehicle Cargo',
            'Cash Stolen',
            'Cash Banked',
            'Cash Removed',
            'Jammer Activated',
            'Delivered Motorcycle',
            'Joined Organisation',
            'Quit Organisation',
            'Marked For Death',
            'Interior Invite',
            'Mugger Killed'
        }

        self.event_choice = self.script_events:list_select(T'Event', {}, T'The script event to send', events, 1, function(index) end)
        self.script_events:action(T'Send', {}, T'Send the script event to the player', function()
            local index = self.event_choice.value
            local event = events[index]

            pluto_switch event do
                case 'Fake Register CEO':
                    S:RegisterCEO(pid)
                    break
                case 'Fake Register MC':
                    S:RegisterMC(pid)
                    break
                case 'Fake Register VIP':
                    S:RegisterVIP(pid)
                    break
                case 'Fake Off The Radar':
                    S:OffRadar(pid)
                    break
                case 'Fake Ghost Org':
                    S:GhostOrg(pid)
                    break
                case 'Mugged':
                    S:SuccessfullyMugged(pid, S.MAX_INT)
                    break
                case 'Ewo':
                    S:PlayerEwo(pid, PlayerID)
                    break
                case 'Ghosted':
                    Shared:BecomeGhosted(pid, PlayerID)
                    break
                case 'Destroyed Vehicle Cargo':
                    S:DestroyedVehicleCargo(pid, PlayerID)
                    break
                case 'Cash Stolen':
                    S:CashStolen(pid, tonumber(S.DisplayOnscreenKeyboard()))
                    break
                case 'Cash Banked':
                    S:CashBanked(pid, tonumber(S.DisplayOnscreenKeyboard()))
                    break
                case 'Cash Removed':
                    S:CashRemoved(pid, tonumber(S.DisplayOnscreenKeyboard()))
                    break
                case 'Jammer Activated':
                    S:JammerActivated(pid)
                    break
                case 'Delivered Motorcycle':
                    S:DeliveredMotorcycle(pid, PlayerID)
                    break
                case 'Joined Organisation':
                    S:JoinedOrg(pid, PlayerID)
                    break
                case 'Quit Organisation':
                    S:QuitOrg(pid, PlayerID)
                    break
                case 'Marked For Death':
                    S:MarkedForDeath(pid, PlayerID)
                    break
                case 'Interior Invite':
                    S:InteriorInvite(pid, PlayerID)
                    break
                case 'Mugger Killed':
                    S:MuggerKilled(pid)
                    break
            end
        end)

        self.script_events:divider('')
        self.script_events:toggle_loop(T'Annoy Player', {}, T'Spam the player with loads of notifications', function()
            S:SuccessfullyMugged(pid, math.random(S.MIN_INT, S.MAX_INT))
            util.yield(100)
        end)

        self.bounty = self.trolling:attach(self.bounty)
            
        self.bounty:divider(T'Bounty')
        self.bounty_active = self.bounty:readonly(T'Bounty')
        self.bounty_amount = self.bounty:readonly(T'Amount')
        self.bounty_reward = self.bounty:readonly(T'Reward')
        self.bounty_modded = self.bounty:readonly(T'Modded')
        self.bounty:divider('')

        self.bounty:action(T'Set Bounty', {}, T'Set an anonymous undetectable bounty on the player, they will never even know that they have a bounty on them', function()
            local amount = tonumber(S:DisplayOnscreenKeyboard())
            if amount ~= nil then
                if amount < 0 or amount > 10000 then
                    return util.toast(T'Invalid amount')
                end

                S:SetPlayerBounty(pid, 0, false)
                S:SetPlayerBounty(pid, amount, true)
            end
        end)

        self.bounty:action(T'Max Bounty', {}, T'Set the maximum bounty a player can have', function()
            S:SetPlayerBounty(pid, 0, false)
            S:SetPlayerBounty(pid, 10000, true)
        end)

        self.bounty:action(T'Remove Bounty', {}, T'Remove the bounty on the player', function()
            S:SetPlayerBounty(pid, 0, false)
        end)

        self.loop_bounty = self.bounty:toggle(T'Bounty Loop', {}, 'Loop set a bounty on the player', function(state)
            if state then
                local amount = tonumber(S:DisplayOnscreenKeyboard())
                if amount < 0 or amount > 10000 then
                    amount = 0
                end

                util.create_tick_handler(function()
                    if self.loop_bounty.value == false then
                        return false
                    end

                    if not S:PlayerHasBounty(pid) then
                        S:SetPlayerBounty(pid, 10000, true)
                    end
                end)
            end
        end)

        self.set_bounty_reward = self.bounty:toggle(T'Set Bounty Reward', {}, T'Set the reward amount for the players bounty, this is how much the player that kills them will get', function(state)
            local ref = self.set_bounty_reward

            if state then
                local amount = tonumber(S:DisplayOnscreenKeyboard())
                if amount ~= nil then
                    if amount < 0 or amount > 10000 then
                        amount = 10000
                    end

                    util.create_tick_handler(function()
                        if not ref.value then
                            return false
                        end
                        
                        S:SetPlayerBountyReward(pid, amount)
                    end)
                end
            end
        end)

        self.bounty:toggle_loop(T'Max Bounty Reward', {}, T'Set the maximum bounty reward a player can have', function()
            S:SetPlayerBountyReward(pid, 10000)
        end)

        self.bounty:toggle_loop(T'Remove Bounty Reward', {}, T'Remove the bounty reward on the player', function()
            S:SetPlayerBountyReward(pid, 0)
        end)

        self.toxic = self.trolling:attach(self.toxic)
            
        self.toxic:action(T'Send Corrupted Interior Invite', {}, T'This will result in a black screen for anyone that accepts the invite', function()
            local interior = self.ScriptGlobal(Globals.Interior)
            self.WriteInt(interior, -1)
            S:InteriorInvite(pid)
        end)

        self.veh_trolling = self.trolling:attach(self.veh_trolling)
        self.wheels = self.veh_trolling:list(T'Wheels', {}, T'Wheels related trolling')
        self.individual_wheels = self.wheels:list(T'Individual Wheels', {}, T'')

        self.wheels:action(T'Detach Wheels', {}, T'Detach wheels from the players vehicle', function()
            local ped = self.GetPlayerPed(pid)
            if self.IsPedInAnyVehicle(ped) then
                local veh = self.GetVehiclePedIsIn(ped, false)
                if veh ~= 0 then
                    local ptr = entities.handle_to_pointer(veh)
                    S:RequestControlCB(veh, function(control)
                        if control then
                            for i = 0, 7 do
                                entities.detach_wheel(ptr, i)
                            end
                        else
                            util.toast(T'Failed to request control of vehicle')
                        end
                    end)
                end
            end
        end)

        local detachable_wheels = {
            {index = 0, name = T'Left Front'},
            {index = 1, name = T'Right Front'},
            {index = 2, name = T'Left Rear'},
            {index = 3, name = T'Right Rear'},
            {index = 4, name = T'Left Middle'},
            {index = 5, name = T'Right Middle'},
        }

        for i, wheel_data in pairs(detachable_wheels) do
            self.individual_wheels:action(wheel_data.name, {}, T'Detach a wheel from the players vehicle', function()
                local ped = self.GetPlayerPed(pid)
                if self.IsPedInAnyVehicle(ped) then
                    local veh = self.GetVehiclePedIsIn(ped, false)
                    if veh ~= 0 then
                        local ptr = entities.handle_to_pointer(veh)
                        S:RequestControlCB(veh, function(control)
                            if control then
                                entities.detach_wheel(ptr, wheel_data.index)
                            else
                                util.toast(T'Failed to request control of vehicle')
                            end
                        end)
                    end
                end
            end)
        end

        self.wheels:toggle_loop(T'Wheels Spam', {}, T'Spam the player with wheels by detaching and fixing their vehicle', function()
            local ped = self.GetPlayerPed(pid)
            if self.IsPedInAnyVehicle(ped) then
                local veh = self.GetVehiclePedIsIn(ped, false)
                if veh ~= 0 then
                    local ptr = entities.handle_to_pointer(veh)
                    S:RequestControlCB(veh, function(control)
                        if control then
                            for i = 0, 7 do
                                entities.detach_wheel(ptr, i)
                            end

                            util.yield(50)
                            self.SetVehicleFixed(veh)
                        end
                    end)
                end
            end
        end)

        self.veh_trolling:toggle_loop(T'Set Off Alarm', {}, T'Make their vehicles alarm constantly go off', function()
            local ped = self.GetPlayerPed(pid)
            if self.IsPedInAnyVehicle(ped) then
                local veh = self.GetVehiclePedIsIn(ped, false)
                if veh ~= 0 then
                    S:RequestControlCB(veh, function(control)
                        if control then
                            if not self.IsVehicleAlarmActivated(veh) then
                                self.SetVehicleAlarm(veh, true)
                                self.StartVehicleAlarm(veh)
                            end
                        else
                            util.toast(T'Failed to request control of vehicle')
                        end
                    end)
                end
            end
        end)

        self.veh_trolling:toggle_loop(T'Disrupt Driving', {}, T'Make the vehicle hard to drive, this also fucks with their minimap', function()
            local ped = self.GetPlayerPed(pid)
            if self.IsPedInAnyVehicle(ped) then
                local veh = self.GetVehiclePedIsIn(ped, false)
                if veh ~= 0 then
                    S:RequestControlCB(veh, function(control)
                        if control then
                            self.SetInvertVehicleControls(veh, true)
                            self.SetVehicleLightMultiplier(veh, 0.0)
                            if not self.IsVehicleAlarmActivated(veh) then
                                self.SetVehicleAlarm(veh, true)
                                self.StartVehicleAlarm(veh)
                            end
                        else
                            util.toast(T'Failed to request control of vehicle')
                        end
                    end)
                end
            end
        end)

        self.crashes = self.trolling:attach(self.crashes)
            
        self.crashes:action(T'Wheel Crash', {}, T'Crashes the player by using a buggy wheel model', function()
            local logo = directx.create_texture(ScriptImages .. '/Loser.png')
            local alpha, reverse_alpha = 0.0, false

            util.create_tick_handler(function()
                directx.draw_texture(logo, 0.15, 0.15, 0.5, 0.5, 0.5, 0.5, 0, { r=1, g=1, b=1, a=alpha })

                if alpha < 1.7 and not reverse_alpha then
                    alpha += 0.007
                else
                    reverse_alpha = true
                    alpha -= 0.007
                end

                if alpha <= 0 then
                    return false
                end
            end)
        end)

        self.trolling:divider('')
            
        self.trolling:action(T'Owned Orbital Strike', {}, T'Launch an owned orbital strike on the player', function()
            S:RequestNamedPtfxAsset('scr_xm_orbital')
            local ped = self.GetPlayerPed(pid)
            local pos = self.GetEntityCoords(ped)
            S:SetUsingOrbitalCannon(true)

            self.StartNetworkedParticleFxNonLoopedOnEntity('scr_xm_orbital_blast', ped, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, false, false, false)
            self.StartNetworkedParticleFxNonLoopedOnEntity('scr_xm_orbital_blast', ped, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 20.0, false, false, false)
            self.StartNetworkedParticleFxNonLoopedOnEntity('scr_xm_orbital_blast', ped, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 30.0, false, false, false)

            for i = 0, 5 do
                self.AddOwnedExplosion(players.user_ped(), pos.x + (10 * i), pos.y + (10 * i), pos.z + (10 * i), 60, 100000.0, true, false, 1.0)
            end

            util.yield(1000)
            S:SetUsingOrbitalCannon(false)
        end)

        self.trolling:action(T'Orbital Strike', {}, T'Launch an orbital strike on the player', function()
            S:RequestNamedPtfxAsset('scr_xm_orbital')
            local ped = self.GetPlayerPed(pid)
            local pos = self.GetEntityCoords(ped)

            self.StartNetworkedParticleFxNonLoopedOnEntity('scr_xm_orbital_blast', ped, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, false, false, false)
            self.StartNetworkedParticleFxNonLoopedOnEntity('scr_xm_orbital_blast', ped, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 20.0, false, false, false)
            self.StartNetworkedParticleFxNonLoopedOnEntity('scr_xm_orbital_blast', ped, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 30.0, false, false, false)

            for i = 0, 5 do
                self.AddExplosion(pos.x + (10 * i), pos.y + (10 * i), pos.z + (10 * i), 60, 100000.0, true, false, 1.0)
            end
        end)

        self.trolling:action(T'Send Mugger', {}, T'Send a mugger to mug the player', function()
            S:SendMugger(pid)
        end)

        self.trolling:action(T'Send Mercenaries', {}, T'Send mercenaries to kill the player', function()
            S:SendMercenaries(pid)
        end)

        self.trolling:action(T'Send Strike Team (Level 1)', {}, T'Send a strike team to kill the player', function()
            S:SendStrikeTeam(pid, 1)
        end)

        self.trolling:action(T'Send Strike Team (Level 2)', {}, T'Send a strike team to kill the player', function()
            S:SendStrikeTeam(pid, 2)
        end)

        self.trolling:action(T'Send Strike Team (Level 3)', {}, T'Send a strike team to kill the player', function()
            S:SendStrikeTeam(pid, 3)
        end)

        self.ram = self.veh_trolling:list(T'Ram With Vehicle', {}, T'Ram the player with a vehicle of your choice')
        local model_name = 'adder'
        
        self.ram:text_input(T'Custom Vehicle Model', {T'rammodel'}, T'The model of the vehicle to ram the player with', function(text)
            model_name = text
        end, model_name)

        self.ram_predefined_vehicle = self.ram:list_select(T'Predefined Models', {}, T'Pre-defined models to ram the player with', VehModels, 1, function(index) end)

        self.ram:action(T'Ram Custom', {}, T'Ram the player with the vehicle', function()
            self:RamPlayer(pid, util.joaat(model_name))
        end)

        self.ram:action(T'Ram Predefined', {}, T'Ram the player with the vehicle', function()
            self:RamPlayer(pid, util.joaat(VehModels[self.ram_predefined_vehicle.value]))
        end)

        self.ram:action(T'Clear Vehicles', {}, T'Clear all vehicles spawned', function()
            for _, veh in ipairs(self.spawned_vehicles) do
                entities.delete_by_handle(veh)
            end
        end)

        self.trolling:divider('')
            
        self.trolling:toggle_loop(T'Block Passive Mode', {}, T'Prevent the player from being able to go into passive mode or become ghosted to you (tested and working against Stand, should work against most if not all other menus)', function()
            if not S:PlayerHasBounty(pid) then
                S:SetPlayerBounty(pid, -1, true)
            end
        end,
        function()
            if S:PlayerHasBounty(pid) then
                S:SetPlayerBounty(pid, 0, false)
            end
        end)

        self.friendly_bounty = self.friendly:list(T'Bounty', {}, T'Friendly bounty options')
        self.friendly_bounty:toggle_loop(T'Anti-Bounty', {}, T'Prevent other players from placing a bounty on them', function()
            if S:GetPlayerBounty(pid) > 0 then
                S:SetPlayerBounty(pid, 0, false)
                S:SetPlayerBountyReward(pid, 0)
            end
        end)

        self.friendly_bounty:toggle_loop(T'Anti-Modded Bounty', {}, T'Prevent other players from placing a modded bounty on them', function()
            local amount = S:GetPlayerBounty(pid)
            if amount > 0 then
                if S:IsModdedBounty(amount) then
                    S:SetPlayerBounty(pid, 0, false)
                    S:SetPlayerBountyReward(pid, 0)

                    util.toast(T'Removed $' .. amount .. T' bounty from ' .. name)
                end
            end
        end)

        self.friendly:divider('')
        self.friendly:action(T'Teleport To Player', {}, T'This will teleport to them even if they spoof their position', function()
            local g = self.ScriptGlobal(2657704 + 1 + (pid * 463))
            local x = self.ReadFloat(g + 0x678)
            local y = self.ReadFloat(g + 0x680)
            local z = self.ReadFloat(g + 0x688)
            self.SetEntityCoordsNoOffset(players.user_ped(), x, y, z, false, false, false)
        end)
    end

    function GetNetworkId(pid)
        return self.ReadInt(self.ScriptGlobal(Globals:PlayerPVNetworkID(pid)))
    end
    
    function SetNetworkId(pid, net_id)
        self.WriteInt(self.ScriptGlobal(Globals:PlayerPVNetworkID(pid)), net_id)
    end
    
    function GetVehicleFromNetId(pid)
        return self.NetToVeh(self:GetNetworkId(pid))
    end

    function RamPlayer(pid, model)
        local ped = self.GetPlayerPed(pid)
        local pos = self.GetOffsetFromEntityInWorldCoords(ped, 0.0, -5.0, 0.0)
    
        S:RequestModel(model)
    
        local veh = entities.create_vehicle(model, pos, self.GetEntityHeading(ped))
        self.SetVehicleForwardSpeed(veh, S.MAX_FLOAT)
        if #self.spawned_vehicles > 10 then
            for _, veh in ipairs(self.spawned_vehicles) do
                entities.delete_by_handle(veh)
            end
        end
    
        table.insert(self.spawned_vehicles, veh)
    end

    function SetPersonalVehicleSlot(slot)
        self.WriteInt(self.ScriptGlobal(Globals.ActivePVSlot), slot)
    end

    function SpoofVehicle(target, localplayer, state)
        local remote_veh = self:GetVehicleFromNetId(target)
        local remote_hash = self.NetworkHashFromPlayerHandle(target)
        local local_hash = self.NetworkHashFromPlayerHandle(localplayer)
    
        if remote_veh ~= 0 then
            if state then
                local veh_data = self.ScriptGlobal(Globals:PersonalVehicleData(0))
                local bitfield = Bitfield.new(self.ReadInt(veh_data + Offsets.VehicleBitfield))
                bitfield.address = veh_data + Offsets.VehicleBitfield
    
                self:SetPersonalVehicleSlot(0)
                bitfield:Set(1 << 0)
                self:SetNetworkId(localplayer, self:GetNetworkId(target))
    
                self.DecorSetInt(remote_veh, 'Player_Vehicle', local_hash)
                self.DecorSetInt(remote_veh, 'Previous_Owner', local_hash)
            else
                local veh_data = self.ScriptGlobal(Globals:PersonalVehicleData(0))
                local bitfield = Bitfield.new(self.ReadInt(veh_data + Offsets.VehicleBitfield))
                bitfield.address = veh_data + Offsets.VehicleBitfield
    
                self.DecorSetInt(remote_veh, 'Player_Vehicle', remote_hash)
                self.DecorSetInt(remote_veh, 'Previous_Owner', remote_hash)
    
                self:SetPersonalVehicleSlot(0)
                bitfield:Clear(1 << 0)
                self:SetNetworkId(localplayer, -1)
            end
        end
    end

    function SoftSpoof(target, localplayer, state)
        local remote_veh = self:GetVehicleFromNetId(target)
        local remote_hash = self.NetworkHashFromPlayerHandle(target)
        local local_hash = self.NetworkHashFromPlayerHandle(localplayer)
    
        if remote_veh ~= 0 then
            if state then
                self:SetNetworkId(localplayer, self:GetNetworkId(target))
            else
                self:SetNetworkId(localplayer, -1)
            end
        end
    end
    
    function GetTheFuckOut(remote_target)
        util.trigger_script_event(1 << remote_target, {-306678306, 1, 0, 1, 0})
    end
    
    function TakeoverKick(remote_target)
        local remote_veh = self:GetVehicleFromNetId(remote_target)
        local local_hash = self.NetworkHashFromPlayerHandle(PlayerID)
    
        if remote_veh ~= 0 then
            self:SpoofVehicle(remote_target, PlayerID, true)
            util.yield(100)
            self:GetTheFuckOut(remote_target)
    
            repeat
                util.yield_once()
            until not self.IsPedInAnyVehicle(self.GetPlayerPed(remote_target), false)
    
            util.yield(200)
            self:SpoofVehicle(remote_target, PlayerID, false)
        end
    end
    
    function ForceVehRespawn(remote_player)
        local remote_veh = self:GetVehicleFromNetId(remote_player)
        local remote_hash = self.NetworkHashFromPlayerHandle(remote_player)
    
        if self.IsPedInAnyVehicle(self.GetPlayerPed(remote_player)) then
            self:TakeoverKick(remote_player)
            repeat
                util.yield_once()
            until not self.IsPedInAnyVehicle(self.GetPlayerPed(remote_target), false)
            util.yield(200)
        end
    
        self:SoftSpoof(remote_player, PlayerID, true)
        self.DecorSetInt(remote_veh, 'Previous_Owner', remote_hash)
    end
    
    function SetOrgId(target)
        local target_org = self.ScriptGlobal(Globals:PlayerOrganisationBase(target) + 10) -- Global_1895156[player /*609*/].f_10
        local localplayer_org = self.ScriptGlobal(Globals:PlayerOrganisationBase(PlayerID) + 10)
    
        self.WriteInt(localplayer_org, self.ReadInt(target_org))
    end

    function DisplayRangeMessage()
        util.toast('You are out of range, spectate or get closer')
    end

    --[[void]] static function NetworkHandleFromPlayer(--[[Player (int)]] player,--[[Any* (pointer)]] gamerHandle,--[[int]] gamerHandleSize)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.push_arg_pointer(gamerHandle)native_invoker.push_arg_int(gamerHandleSize)native_invoker.end_call_2(0x388EB2B86C73B6B3)end
    --[[BOOL (bool)]] static function NetworkIsFriend(--[[Any* (pointer)]] gamerHandle)native_invoker.begin_call()native_invoker.push_arg_pointer(gamerHandle)native_invoker.end_call_2(0x1A24A179F9B31654)return native_invoker.get_return_value_bool()end
    --[[Hash (int)]] static function GetEntityModel(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0x9F47B058362C84B5)return native_invoker.get_return_value_int()end
    --[[void]] static function SetVehicleDoorsShut(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] closeInstantly)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(closeInstantly)native_invoker.end_call_2(0x781B3D62BB013EF5)end
    --[[void]] static function DetonateVehiclePhoneExplosiveDevice()native_invoker.begin_call()native_invoker.end_call_2(0xEF49CF0270307CBE)end
    --[[Vehicle (int)]] static function GetVehiclePedIsIn(--[[Ped (int)]] ped,--[[BOOL (bool)]] includeLastVehicle)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(includeLastVehicle)native_invoker.end_call_2(0x9A9112A0FE9A4713)return native_invoker.get_return_value_int()end
    --[[Hash (int)]] static function NetworkHashFromPlayerHandle(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0xBC1D768F2F5D6C05)return native_invoker.get_return_value_int()end
    --[[BOOL (bool)]] static function IsPedInAnyVehicle(--[[Ped (int)]] ped,--[[BOOL (bool)]] atGetIn)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(atGetIn)native_invoker.end_call_2(0x997ABD671D25CA0B)return native_invoker.get_return_value_bool()end
    --[[BOOL (bool)]] static function DecorSetInt(--[[Entity (int)]] entity,--[[string]] propertyName,--[[int]] value)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_string(propertyName)native_invoker.push_arg_int(value)native_invoker.end_call_2(0x0CE3AA5E1CA19E10)return native_invoker.get_return_value_bool()end
    --[[void]] static function ClearVehiclePhoneExplosiveDevice()native_invoker.begin_call()native_invoker.end_call_2(0xAA3F739ABDDCF21F)end
    --[[Vehicle (int)]] static function NetToVeh(--[[int]] netHandle)native_invoker.begin_call()native_invoker.push_arg_int(netHandle)native_invoker.end_call_2(0x367B936610BA360C)return native_invoker.get_return_value_int()end
    --[[BOOL (bool)]] static function HasVehiclePhoneExplosiveDevice()native_invoker.begin_call()native_invoker.end_call_2(0x6ADAABD3068C5235)return native_invoker.get_return_value_bool()end
    --[[Ped (int)]] static function GetPlayerPed(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0x43A66C31C68491C0)return native_invoker.get_return_value_int()end
    --[[void]] static function AddVehiclePhoneExplosiveDevice(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x99AD4CCCB128CBC9)end
    --[[BOOL (bool)]] static function StartNetworkedParticleFxNonLoopedOnEntity(--[[string]] effectName,--[[Entity (int)]] entity,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ,--[[float]] rotX,--[[float]] rotY,--[[float]] rotZ,--[[float]] scale,--[[BOOL (bool)]] axisX,--[[BOOL (bool)]] axisY,--[[BOOL (bool)]] axisZ)native_invoker.begin_call()native_invoker.push_arg_string(effectName)native_invoker.push_arg_int(entity)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.push_arg_float(rotX)native_invoker.push_arg_float(rotY)native_invoker.push_arg_float(rotZ)native_invoker.push_arg_float(scale)native_invoker.push_arg_bool(axisX)native_invoker.push_arg_bool(axisY)native_invoker.push_arg_bool(axisZ)native_invoker.end_call_2(0xC95EB1DB6E92113D)return native_invoker.get_return_value_bool()end
    --[[Vector3 (vector3)]] static function GetEntityCoords(--[[Entity (int)]] entity,--[[BOOL (bool)]] alive)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(alive)native_invoker.end_call_2(0x3FEF770D40960D5A)return native_invoker.get_return_value_vector3()end
    --[[void]] static function AddOwnedExplosion(--[[Ped (int)]] ped,--[[float]] x,--[[float]] y,--[[float]] z,--[[int]] explosionType,--[[float]] damageScale,--[[BOOL (bool)]] isAudible,--[[BOOL (bool)]] isInvisible,--[[float]] cameraShake)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_float(x)native_invoker.push_arg_float(y)native_invoker.push_arg_float(z)native_invoker.push_arg_int(explosionType)native_invoker.push_arg_float(damageScale)native_invoker.push_arg_bool(isAudible)native_invoker.push_arg_bool(isInvisible)native_invoker.push_arg_float(cameraShake)native_invoker.end_call_2(0x172AA1B624FA1013)end
    --[[void]] static function StartVehicleAlarm(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0xB8FF7AB45305C345)end
    --[[BOOL (bool)]] static function IsVehicleAlarmActivated(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x4319E335B71FFF34)return native_invoker.get_return_value_bool()end
    --[[void]] static function SetInvertVehicleControls(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] state)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(state)native_invoker.end_call_2(0x5B91B229243351A8)end
    --[[void]] static function SetVehicleFixed(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x115722B1B9C14C1C)end
    --[[Vector3 (vector3)]] static function GetOffsetFromEntityInWorldCoords(--[[Entity (int)]] entity,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.end_call_2(0x1899F328B0E12848)return native_invoker.get_return_value_vector3()end
    --[[float]] static function GetEntityHeading(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0xE83D4F9BA2A38914)return native_invoker.get_return_value_float()end
    --[[void]] static function SetVehicleForwardSpeed(--[[Vehicle (int)]] vehicle,--[[float]] speed)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(speed)native_invoker.end_call_2(0xAB54A438726D25D5)end
    --[[void]] static function SetEntityVisible(--[[Entity (int)]] entity,--[[BOOL (bool)]] toggle,--[[BOOL (bool)]] p2)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(toggle)native_invoker.push_arg_bool(p2)native_invoker.end_call_2(0xEA1C610A04DB6BBB)end
    --[[int]] static function DecorGetInt(--[[Entity (int)]] entity,--[[string]] propertyName)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_string(propertyName)native_invoker.end_call_2(0xA06C969B02A97298)return native_invoker.get_return_value_int()end
    --[[void]] static function SetVehicleDoorsLockedForPlayer(--[[Vehicle (int)]] vehicle,--[[Player (int)]] player,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(player)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x517AAF684BB50CD1)end
    --[[void]] static function SetVehicleLightMultiplier(--[[Vehicle (int)]] vehicle,--[[float]] multiplier)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(multiplier)native_invoker.end_call_2(0xB385454F8791F57C)end
    --[[void]] static function SetVehicleAlarm(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] state)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(state)native_invoker.end_call_2(0xCDE5E70C1DDB954C)end
    --[[void]] static function SetEntityCoordsNoOffset(--[[Entity (int)]] entity,--[[float]] xPos,--[[float]] yPos,--[[float]] zPos,--[[BOOL (bool)]] xAxis,--[[BOOL (bool)]] yAxis,--[[BOOL (bool)]] zAxis)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(xPos)native_invoker.push_arg_float(yPos)native_invoker.push_arg_float(zPos)native_invoker.push_arg_bool(xAxis)native_invoker.push_arg_bool(yAxis)native_invoker.push_arg_bool(zAxis)native_invoker.end_call_2(0x239A3351AC1DA385)end
    --[[void]] static function AddExplosion(--[[float]] x,--[[float]] y,--[[float]] z,--[[int]] explosionType,--[[float]] damageScale,--[[BOOL (bool)]] isAudible,--[[BOOL (bool)]] isInvisible,--[[float]] cameraShake,--[[BOOL (bool)]] noDamage)native_invoker.begin_call()native_invoker.push_arg_float(x)native_invoker.push_arg_float(y)native_invoker.push_arg_float(z)native_invoker.push_arg_int(explosionType)native_invoker.push_arg_float(damageScale)native_invoker.push_arg_bool(isAudible)native_invoker.push_arg_bool(isInvisible)native_invoker.push_arg_float(cameraShake)native_invoker.push_arg_bool(noDamage)native_invoker.end_call_2(0xE3AD2BDBAEE269AC)end
    --[[void]] static function NetworkConcealEntity(--[[Entity (int)]] entity,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x1632BE0AC1E62876)end
    --[[BOOL (bool)]] static function NetworkIsEntityConcealed(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0x71302EC70689052A)return native_invoker.get_return_value_bool()end
end

return Players