local T, S = require('translations'), require('shared')
local Globals = require('script_globals')
local Bit, BitMask = S.Bit, S.BitMask
local CharSlot, PlayerID = S.CHAR_SLOT, S.PLAYER_ID

pluto_class Nightclub
    ScriptGlobal = S.ScriptGlobal
    ScriptLocal = S.ScriptLocal
    WriteByte = memory.write_byte
    WriteInt = memory.write_int
    ReadInt = memory.read_int
    ReadByte = memory.read_byte

    nightclub_setup = {
        15534,
        22106,
        18161,
        22068,
        22080,
        22174,
        22067,
        22081,
    }

    function __construct(root)
        self.root = root:list(T'Nightclub', {T'rnightclub'}, T'Nightclub related options', function()
            menu.show_warning(self.root, CLICK_AUTO, T'All features under this menu are considered risky, are you sure you want to continue?', function()
                -- do nothing
            end,
            function()
                menu.my_root():focus()
            end, false)
        end)

        self:CreateNC()
        self:CreateSafe()
    end

    function CreateNC()
        self.root:toggle(T'Clear Nightclub', {}, 'Empty your nightclub', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:ClearNightclub(state)
            end
        end, self:IsNightclubCleared())

        self.root:toggle(T'Turn Off Office Lights', {}, 'Turn off the lights in your office', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:DisableNightclubOfficeLights(state)
            end
        end, self:AreNightclubOfficeLightsDisabled())

        self.root:toggle(T'Dry Ice', {}, 'Enable dry ice in your nightclub', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockNightclubDryIce(state)
            end
        end, self:IsNightclubDryIceUnlocked())

        self.root:action(T'Upgrade Everything', {}, 'Unlock all upgrades in your nightclub', function()
            if SCRIPT_CAN_CONTINUE then
                self:UnlockNightclubUpgrades()
            end
        end)

        self.root:action(T'Bypass Setup', {}, 'Bypass setup missions in your nightclub', function()
            if SCRIPT_CAN_CONTINUE then
                self:BypassNightclubSetup()
            end
        end)

        self.root:divider('')
    end

    function CreateSafe()
        self.nightclub = self.root:list(T'Nightclub Safe', {}, T'Nightclub Safe related options')
        self.trigger_production = self.nightclub:action(T'Trigger Production', {}, T'Trigger production for nightclub safe', function()
            self:TriggerNCSafeProduction()
        end)

        self.nightclub:action(T'Collect', {T'rncsafe'}, T'Collect money from the safe remotely without having to open it or even be near it', function()
            self:CollectSafeMoney()
        end)

        self.nightclub:divider('')

        self.afk_loop = self.nightclub:toggle_loop(T'AFK Loop', {}, T'AFK Loop you only need to be in your nightclub for this', function()
            self.trigger_production:trigger()
            repeat
                util.yield_once()
            until self.ReadInt(self.ScriptGlobal(Globals.NightclubSafeValue)) ~= 0
            self:CollectSafeMoney()
            repeat
                util.yield_once()
            until self.ReadInt(self.ScriptGlobal(Globals.NightclubSafeValue)) == 0
        end)
    end

    function TriggerNCSafeProduction()
        for i = Globals.NCSafeIncomeStart, Globals.NCSafeIncomeEnd do
            self.WriteInt(self.ScriptGlobal(262145 + i), 300000)
        end
        self.WriteInt(self.ScriptGlobal(Globals.NCSafeCapacity), 300000)
        self.StatSetInt(util.joaat('MP' .. CharSlot .. '_CLUB_PAY_TIME_LEFT'), 1, true)
    end

    function CollectSafeMoney()
        local l = self.ScriptLocal('am_mp_nightclub', Globals.TriggerNCSafeCollection)
        if l ~= 0 then
            self.WriteByte(l, 1)
        end
    end

    function ClearNightclub(state)
        local Clear = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        self.WriteByte(Clear, state ? (Bit:Set(self.ReadByte(Clear), 1)) : (Bit:Clear(self.ReadByte(Clear), 1)))
    end
    
    function IsNightclubCleared()
        local Clear = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        return Bit:Check(self.ReadByte(Clear), 1)
    end
    
    function DisableNightclubOfficeLights(state)
        local Lights = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        self.WriteInt(Lights, state ? (Bit:Set(self.ReadInt(Lights), 17)) : (Bit:Clear(self.ReadInt(Lights), 17)))
    end
    
    function AreNightclubOfficeLightsDisabled()
        local Lights = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        return Bit:Check(self.ReadInt(Lights), 17)
    end
    
    function UnlockNightclubDryIce(state)
        local Ice = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        self.WriteInt(Ice, state ? (Bit:Set(self.ReadInt(Ice), 23)) : (Bit:Clear(self.ReadInt(Ice), 23)))
    end
    
    function IsNightclubDryIceUnlocked()
        local Ice = self.ScriptGlobal(Globals.NightclubStatsBase + 2)
        return Bit:Check(self.ReadInt(Ice), 23)
    end
    
    function UnlockNightclubUpgrades()
        local Upgrades = self.ScriptGlobal(Globals.NightclubStatsBase + 1)
        self.WriteInt(Upgrades, 0x7FFEFFFD)
        self:UnlockNightclubDryIce(true)
    end
    
    function BypassNightclubSetup()
        for self.nightclub_setup as bool_code do
            self.SetPackedStatBoolCode(bool_code, true, CharSlot)
        end

        util.toast('Join a new session to apply the changes!')
    end

    --[[BOOL (bool)]] static function StatSetInt(--[[Hash (int)]] statName,--[[int]] value,--[[BOOL (bool)]] save)native_invoker.begin_call()native_invoker.push_arg_int(statName)native_invoker.push_arg_int(value)native_invoker.push_arg_bool(save)native_invoker.end_call_2(0xB3271D7AB655B441)return native_invoker.get_return_value_bool()end
    --[[void]] static function SetPackedStatBoolCode(--[[int]] index,--[[BOOL (bool)]] value,--[[int]] characterSlot)native_invoker.begin_call()native_invoker.push_arg_int(index)native_invoker.push_arg_bool(value)native_invoker.push_arg_int(characterSlot)native_invoker.end_call_2(0xDB8A58AEAA67CD07)end
end

return Nightclub