local T, S = require('translations'), require('shared')

pluto_class World
    function __construct(root)
        self.root = root:list(T'World', {T'rworld'}, '')
        self.repopulate_timer = os.time() + 10
        self.stand_lock_time = menu.ref_by_path('World>Atmosphere>Clock>Lock Time')
        self.stand_time_midnight = menu.ref_by_path('World>Atmosphere>Clock>Midnight')
        self.stand_smooth_transition = menu.ref_by_path('World>Atmosphere>Clock>Smooth Transition')
        self.blackout = self.root:list(T'Blackout', {T'rwblackout'}, 'Blackout options')
        self.chams = self.root:list(T'Chams', {T'rwchams'}, 'Chams options')

        self.blackout:toggle(T'Black Out', {}, 'Turn off all artificial lights', function(state)
            graphics.set_artificial_lights_state(state)
            graphics.set_artificial_vehicle_lights_state(state)
            if self.stand_lock_time:isValid() and self.stand_smooth_transition:isValid() and self.stand_time_midnight:isValid() then
                self.stand_lock_time.value = state
                self.stand_smooth_transition.value = not state

                local light_intensity = graphics.get_light_override_max_intensity_scale()
                if state then
                    self.stand_time_midnight:trigger()
                    graphics.set_light_override_max_intensity_scale(0.0)
                    graphics.set_timecycle_modifier_strength(1.2)
                    graphics.set_timecycle_modifier('superDARK')
                else
                    graphics.set_light_override_max_intensity_scale(light_intensity)
                    graphics.clear_timecycle_modifier()
                end
            end
        end)

        self.blackout_intensity = self.blackout:slider_float(T'Intensity', {T'rwblackintensity'}, 'Intensity of the blackout', 0.0 * 100, math.max_float, 1.2 * 100, 0.01 * 100, function(value)
            graphics.set_timecycle_modifier_strength(value / 100)
        end)

        self.chams:toggle(T'Chams', {}, T'', function(state)
            if state then
                graphics.set_timecycle_modifier('mp_lad_night')
            else
                graphics.clear_timecycle_modifier()
            end
        end)

        self.chams_intensity = self.chams:slider_float(T'Intensity', {T'rwchamsintensity'}, 'Intensity of the chams', 0.0 * 100, math.max_float, 1.2 * 100, 0.01 * 100, function(value)
            graphics.set_timecycle_modifier_strength(value / 100)
        end)

        self.root:divider('')
        self.ghost_town = self.root:toggle(T'Ghost Town', {}, T'Los Santos becomes a ghost town (if players in your session are nearby this won\'t take effect)', function(state)
            if self.stand_lock_time:isValid() and self.stand_smooth_transition:isValid() and self.stand_time_midnight:isValid() then
                self.stand_lock_time.value = state
                self.stand_smooth_transition.value = not state
                self.stand_time_midnight:trigger()

                if state then
                    graphics.set_timecycle_modifier_strength(1)
                    graphics.set_timecycle_modifier('superDARK')
                    graphics.set_artificial_lights_state(true)
                    graphics.set_artificial_vehicle_lights_state(true)
                    util.create_tick_handler(function()
                        if not self.ghost_town.value then
                            return false
                        end
                        vehicle.set_ambient_vehicle_range_multiplier_this_frame(0.0)
                        ped.set_ped_density_multiplier_this_frame(0.0)
                        ped.set_scenario_ped_density_multiplier_this_frame(0.0, 0.0)
                        vehicle.set_vehicle_density_multiplier_this_frame(0.0)
                        vehicle.set_random_vehicle_density_multiplier_this_frame(0.0)
                        vehicle.set_parked_vehicle_density_multiplier_this_frame(0.0)
                    end)
                else
                    graphics.set_artificial_lights_state(false)
                    graphics.set_artificial_vehicle_lights_state(false)
                    graphics.clear_timecycle_modifier()
                end
            end
        end)

        self.root:toggle(T'Eternal Darkness', {}, T'No more sunrises or sunsets, you will see nothing', function(state)
            if state then
                graphics.set_timecycle_modifier_strength(math.max_float)
                graphics.set_timecycle_modifier('glasses_black')
            else
                graphics.clear_timecycle_modifier()
            end
        end)

        self.root:toggle(T'Riot Mode', {}, T'Makes everyone riot', function(state)
            misc.set_riot_mode_enabled(state)
        end)

        self.root:toggle_loop(T'The Purge', {}, T'Makes all peds hostile to each other', function()
            if self.stand_lock_time:isValid() and self.stand_smooth_transition:isValid() and self.stand_time_midnight:isValid() then
                self.stand_lock_time.value = true
                self.stand_smooth_transition.value = false
                self.stand_time_midnight:trigger()

                misc.set_riot_mode_enabled(true)
                graphics.set_timecycle_modifier_strength(1)
                graphics.set_timecycle_modifier('superDARK')
                graphics.set_artificial_lights_state(true)
                graphics.set_artificial_vehicle_lights_state(true)

                if os.time() > self.repopulate_timer then
                    ped.instantly_fill_ped_population()
                    self.repopulate_timer = os.time() + 10
                end

                for _, entity in pairs(entities.get_all_peds_as_handles()) do
                    if entity == players.user_ped() then
                        goto continue
                    end

                    ped.set_ped_combat_attributes(entity, 5, true)
                    ped.set_ped_combat_attributes(entity, 46, true)
                    ped.set_ped_combat_attributes(entity, 17, false)
                    ped.set_ped_combat_attributes(entity, 13, true)
                    ped.set_ped_combat_attributes(entity, 58, true)
                    ped.set_ped_combat_range(entity, 2)
                    ped.set_ped_combat_ability(entity, 2)
                    ped.set_ped_combat_movement(entity, 2)
                    if ped.is_ped_in_any_vehicle(entity, false) then
                        task.task_leave_any_vehicle(entity, 0, 0)
                        entities.delete_by_handle(ped.get_vehicle_ped_is_in(entity, false))
                    end

                    task.task_combat_ped(entity, players.user_ped(), 0, 16)

                    ::continue::
                end
            end
        end,
        function()
            if self.stand_lock_time:isValid() and self.stand_smooth_transition:isValid() then
                misc.set_riot_mode_enabled(false)
                graphics.clear_timecycle_modifier()
                graphics.set_artificial_lights_state(false)
                graphics.set_artificial_vehicle_lights_state(false)
                self.stand_lock_time.value = false
                self.stand_smooth_transition.value = true
            end
        end)
    end
end

return World