local root = menu.my_root()
local shadow_root = menu.shadow_root()
local T = require('translations')
local Shared = require('shared')
local PLAYER_ID = Shared.PLAYER_ID

local PlayerAimbot = require('player_aimbot')
local PedAimbot = require('ped_aimbot')

--[[void]] local function SeethroughSetHighlightNoise(--[[float]] noise)native_invoker.begin_call()native_invoker.push_arg_float(noise)native_invoker.end_call_2(0x1636D7FC127B10D2)end
--[[Hash (int)]] local function GetPedAmmoTypeFromWeapon(--[[Ped (int)]] ped,--[[Hash (int)]] weaponHash)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(weaponHash)native_invoker.end_call_2(0x7FEAD38B326B9F74)return native_invoker.get_return_value_int()end
--[[Vector3 (vector3)]] local function GetPedBoneCoords(--[[Ped (int)]] ped,--[[int]] boneId,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(boneId)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.end_call_2(0x17C07FC640E86B4E)return native_invoker.get_return_value_vector3()end
--[[Ped (int)]] local function GetPlayerPed(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0x43A66C31C68491C0)return native_invoker.get_return_value_int()end
--[[BOOL (bool)]] local function IsPedInAnyVehicle(--[[Ped (int)]] ped,--[[BOOL (bool)]] atGetIn)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(atGetIn)native_invoker.end_call_2(0x997ABD671D25CA0B)return native_invoker.get_return_value_bool()end
--[[void]] local function SeethroughSetFadeStartdistance(--[[float]] distance)native_invoker.begin_call()native_invoker.push_arg_float(distance)native_invoker.end_call_2(0xA78DE25577300BA1)end
--[[Hash (int)]] local function GetSelectedPedWeapon(--[[Ped (int)]] ped)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.end_call_2(0x0A6DB4965674D243)return native_invoker.get_return_value_int()end
--[[void]] local function SeethroughSetMaxThickness(--[[float]] thickness)native_invoker.begin_call()native_invoker.push_arg_float(thickness)native_invoker.end_call_2(0x0C8FAC83902A62DF)end
--[[BOOL (bool)]] local function HasPedGotWeaponComponent(--[[Ped (int)]] ped,--[[Hash (int)]] weaponHash,--[[Hash (int)]] componentHash)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(componentHash)native_invoker.end_call_2(0xC593212475FAE340)return native_invoker.get_return_value_bool()end
--[[void]] local function SeethroughSetFadeEnddistance(--[[float]] distance)native_invoker.begin_call()native_invoker.push_arg_float(distance)native_invoker.end_call_2(0x9D75795B9DC6EBBF)end
--[[Ped (int)]] local function GetPlayerPedScriptIndex(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0x50FAC3A3E030A6E1)return native_invoker.get_return_value_int()end
--[[Vector3 (vector3)]] local function GetOffsetFromEntityInWorldCoords(--[[Entity (int)]] entity,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.end_call_2(0x1899F328B0E12848)return native_invoker.get_return_value_vector3()end
--[[float]] local function GetDistanceBetweenCoords(--[[float]] x1,--[[float]] y1,--[[float]] z1,--[[float]] x2,--[[float]] y2,--[[float]] z2,--[[BOOL (bool)]] useZ)native_invoker.begin_call()native_invoker.push_arg_float(x1)native_invoker.push_arg_float(y1)native_invoker.push_arg_float(z1)native_invoker.push_arg_float(x2)native_invoker.push_arg_float(y2)native_invoker.push_arg_float(z2)native_invoker.push_arg_bool(useZ)native_invoker.end_call_2(0xF1B760881820C952)return native_invoker.get_return_value_float()end
--[[BOOL (bool)]] local function GetScreenCoordFromWorldCoord(--[[float]] worldX,--[[float]] worldY,--[[float]] worldZ,--[[float* (pointer)]] screenX,--[[float* (pointer)]] screenY)native_invoker.begin_call()native_invoker.push_arg_float(worldX)native_invoker.push_arg_float(worldY)native_invoker.push_arg_float(worldZ)native_invoker.push_arg_pointer(screenX)native_invoker.push_arg_pointer(screenY)native_invoker.end_call_2(0x34E82F05DF2974F5)return native_invoker.get_return_value_bool()end
--[[BOOL (bool)]] local function GetUsingseethrough()native_invoker.begin_call()native_invoker.end_call_2(0x44B80ABAB9D80BD3)return native_invoker.get_return_value_bool()end
--[[BOOL (bool)]] local function IsPedFacingPed(--[[Ped (int)]] ped,--[[Ped (int)]] otherPed,--[[float]] angle)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(otherPed)native_invoker.push_arg_float(angle)native_invoker.end_call_2(0xD71649DB0A545AA3)return native_invoker.get_return_value_bool()end
--[[void]] local function SeethroughSetNoiseMin(--[[float]] amount)native_invoker.begin_call()native_invoker.push_arg_float(amount)native_invoker.end_call_2(0xFF5992E1C9E65D05)end
--[[void]] local function SeethroughSetNoiseMax(--[[float]] amount)native_invoker.begin_call()native_invoker.push_arg_float(amount)native_invoker.end_call_2(0xFEBFBFDFB66039DE)end
--[[BOOL (bool)]] local function IsPedShooting(--[[Ped (int)]] ped)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.end_call_2(0x34616828CD07F1A1)return native_invoker.get_return_value_bool()end
--[[void]] local function AddPedAmmoByType(--[[Ped (int)]] ped,--[[Hash (int)]] ammoTypeHash,--[[int]] ammo)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(ammoTypeHash)native_invoker.push_arg_int(ammo)native_invoker.end_call_2(0x2472622CE1F2D45F)end
--[[BOOL (bool)]] local function HasEntityClearLosToEntity(--[[Entity (int)]] entity1,--[[Entity (int)]] entity2,--[[int]] traceType)native_invoker.begin_call()native_invoker.push_arg_int(entity1)native_invoker.push_arg_int(entity2)native_invoker.push_arg_int(traceType)native_invoker.end_call_2(0xFCDFF7B72D23A1AC)return native_invoker.get_return_value_bool()end
--[[void]] local function ShootSingleBulletBetweenCoordsIgnoreEntity(--[[float]] x1,--[[float]] y1,--[[float]] z1,--[[float]] x2,--[[float]] y2,--[[float]] z2,--[[int]] damage,--[[BOOL (bool)]] p7,--[[Hash (int)]] weaponHash,--[[Ped (int)]] ownerPed,--[[BOOL (bool)]] isAudible,--[[BOOL (bool)]] isInvisible,--[[float]] speed,--[[Entity (int)]] entity,--[[Any (int)]] p14)native_invoker.begin_call()native_invoker.push_arg_float(x1)native_invoker.push_arg_float(y1)native_invoker.push_arg_float(z1)native_invoker.push_arg_float(x2)native_invoker.push_arg_float(y2)native_invoker.push_arg_float(z2)native_invoker.push_arg_int(damage)native_invoker.push_arg_bool(p7)native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(ownerPed)native_invoker.push_arg_bool(isAudible)native_invoker.push_arg_bool(isInvisible)native_invoker.push_arg_float(speed)native_invoker.push_arg_int(entity)native_invoker.push_arg_int(p14)native_invoker.end_call_2(0xE3A7742E0B7A2F8B)end
--[[float]] local function SeethroughGetMaxThickness()native_invoker.begin_call()native_invoker.end_call_2(0x43DBAE39626CE83F)return native_invoker.get_return_value_float()end
--[[BOOL (bool)]] local function IsEntityDead(--[[Entity (int)]] entity,--[[BOOL (bool)]] p1)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(p1)native_invoker.end_call_2(0x5F9532F3B5CC2551)return native_invoker.get_return_value_bool()end
--[[void]] local function GiveWeaponComponentToPed(--[[Ped (int)]] ped,--[[Hash (int)]] weaponHash,--[[Hash (int)]] componentHash)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(componentHash)native_invoker.end_call_2(0xD966D51AA5B28BB9)end
--[[int]] local function GetEntityHealth(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0xEEF059FAD016D209)return native_invoker.get_return_value_int()end
--[[float]] local function GetWeaponDamage(--[[Hash (int)]] weaponHash,--[[Hash (int)]] componentHash)native_invoker.begin_call()native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(componentHash)native_invoker.end_call_2(0x3133B907D8B32053)return native_invoker.get_return_value_float()end
--[[BOOL (bool)]] local function IsPedAPlayer(--[[Ped (int)]] ped)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.end_call_2(0x12534C348C6CB68B)return native_invoker.get_return_value_bool()end
--[[BOOL (bool)]] local function DoesEntityExist(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0x7239B21A38F536BA)return native_invoker.get_return_value_bool()end
--[[void]] local function SeethroughReset()native_invoker.begin_call()native_invoker.end_call_2(0x70A64C0234EF522C)end
--[[BOOL (bool)]] local function IsPlayerFreeAiming(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0x2E397FD2ECD37C87)return native_invoker.get_return_value_bool()end
--[[void]] local function SetSeethrough(--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x7E08924259E08CE0)end

local ScriptGlobal = memory.script_global
local ReadInt = memory.read_int
local ReadShort = memory.read_short
local ReadByte = memory.read_byte
local ReadFloat = memory.read_float
local ReadLong = memory.read_long
local WriteInt = memory.write_int
local WriteShort = memory.write_short
local WriteByte = memory.write_byte
local WriteUByte = memory.write_ubyte
local WriteFloat = memory.write_float
local WriteLong = memory.write_long
local Alloc = memory.alloc
local ref_by_rel_path = menu.ref_by_rel_path

local Bit = Shared.Bit
local BitMask = Shared.BitMask

local sx_ptr, sy_ptr = memory.alloc(4), memory.alloc(4)

local sns_ammo_types <const> = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'Hollow Point', 'FMJ'}
local heavy_revolver_types <const> = {'Default Clip', 'Tracer', 'Incendiary', 'Hollow Point', 'FMJ'}
local special_carbine_types <const> = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local bullpup_rifle_types <const> = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local pump_shotgun_types <const> = {'Default Shells', 'Dragons Breathe', 'Flechette Shells', 'Steel Buckshot Shells', 'Explosive Slugs'}
local marksman_rifle_types <const> = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local pistol_types <const> = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'Hollow Point', 'FMJ'}
local smg_types <const> = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'Hollow Point', 'FMJ'}
local assault_rifle_types <const> = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local carbine_rifle_types <const> = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local combat_mg_types <const> = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local heavy_sniper_types <const> = {'Default Clip', 'Extended Clip', 'Incendiary', 'FMJ', 'Armor Piercing', 'Explosive'}

local heavy_sniper_scopes <const> = {'Zoom Scope', 'Advanced Scope', 'Night Vision Scope', 'Thermal Scope'}

local weapons_hashmap <const> = {
    ['SNS Pistol'] = util.joaat('WEAPON_SNSPISTOL_MK2'),
    ['Heavy Revolver'] = util.joaat('WEAPON_REVOLVER_MK2'),
    ['Special Carbine'] = util.joaat('WEAPON_SPECIALCARBINE_MK2'),
    ['Bullpup Rifle'] = util.joaat('WEAPON_BULLPUPRIFLE_MK2'),
    ['Pump Shotgun'] = util.joaat('WEAPON_PUMPSHOTGUN_MK2'),
    ['Marksman Rifle'] = util.joaat('WEAPON_MARKSMANRIFLE_MK2'),
    ['Pistol'] = util.joaat('WEAPON_PISTOL_MK2'),
    ['SMG'] = util.joaat('WEAPON_SMG_MK2'),
    ['Assault Rifle'] = util.joaat('WEAPON_ASSAULTRIFLE_MK2'),
    ['Carbine Rifle'] = util.joaat('WEAPON_CARBINERIFLE_MK2'),
    ['Combat MG'] = util.joaat('WEAPON_COMBATMG_MK2'),
    ['Heavy Sniper'] = util.joaat('WEAPON_HEAVYSNIPER_MK2')
}

local weapons_names <const> = {
    'None',
    'SNS Pistol',
    'Heavy Revolver',
    'Special Carbine',
    'Bullpup Rifle',
    'Pump Shotgun',
    'Marksman Rifle',
    'Pistol',
    'SMG',
    'Assault Rifle',
    'Carbine Rifle',
    'Combat MG',
    'Heavy Sniper'
}

local function ammo_type_to_hash(type, weapon)
    local weapon_name = util.reverse_joaat(weapon)
    weapon_name = weapon_name:gsub('WEAPON_', '')

    local comp = 'COMPONENT_' .. weapon_name .. '_CLIP_'

    if type == 'Default Clip' or type == 'Default Shells' then
        return util.joaat(comp .. '01')
    elseif type == 'Extended Clip' then
        return util.joaat(comp .. '02')
    elseif type == 'Tracer' then
        return util.joaat(comp .. 'TRACER')
    elseif type == 'Incendiary' then
        return util.joaat(comp .. 'INCENDIARY')
    elseif type == 'Hollow Point' then
        return util.joaat(comp .. 'HOLLOWPOINT')
    elseif type == 'FMJ' then
        return util.joaat(comp .. 'FMJ')
    elseif type == 'Explosive' then
        return util.joaat(comp .. 'EXPLOSIVE')
    elseif type == 'Armor Piercing' then
        return util.joaat(comp .. 'ARMORPIERCING')
    elseif type == 'Dragons Breathe' then
        return util.joaat(comp .. 'INCENDIARY')
    elseif type == 'Flechette Shells' then
        return util.joaat(comp .. 'HOLLOWPOINT')
    elseif type == 'Steel Buckshot Shells' then
        return util.joaat(comp .. 'ARMORPIERCING')
    elseif type == 'Explosive Slugs' then
        return util.joaat(comp .. 'EXPLOSIVE')
    end
end

local function GiveComponent(weapon_hash, component_hash)
    if not HasPedGotWeaponComponent(players.user_ped(), weapon_hash, component_hash) then
        GiveWeaponComponentToPed(players.user_ped(), weapon_hash, component_hash)
        local ammo_type = GetPedAmmoTypeFromWeapon(players.user_ped(), weapon_hash)
        AddPedAmmoByType(players.user_ped(), ammo_type, 9999)
    end
end

pluto_class Weapons
    function __construct()
        self.root = root:list(T'Weapons', {}, T'Weapons options')
        local weapons = self.root
        local weapons_mk2 = weapons:list(T'Weapons MK2', {}, T'Weapons MK2 options')
        local thermal = weapons:list(T'Thermal', {}, T'Thermal')
        local aimbot = weapons:list(T'Aimbot', {}, T'Aimbot')
    
        weapons_mk2:list_select(T'Weapon', {}, T'Weapon to modify', weapons_names, 1, function(index)
            if not SCRIPT_CAN_CONTINUE then return end
    
            for i, child in pairs(weapons_mk2:getChildren()) do
                if child.menu_name ~= 'Weapon' then
                    child:delete()
                end
            end
    
            local weapon = weapons_names[index]
            local weapon_hash = weapons_hashmap[weapon]
    
            if weapon == 'SNS Pistol' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', sns_ammo_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(sns_ammo_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'Heavy Revolver' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', heavy_revolver_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(heavy_revolver_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'Special Carbine' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', special_carbine_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(special_carbine_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'Bullpup Rifle' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', bullpup_rifle_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(bullpup_rifle_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'Pump Shotgun' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', pump_shotgun_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(pump_shotgun_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'Marksman Rifle' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', marksman_rifle_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(marksman_rifle_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'Pistol' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', pistol_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(pistol_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'SMG' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', smg_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(smg_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'Assault Rifle' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', assault_rifle_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(assault_rifle_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'Carbine Rifle' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', carbine_rifle_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(carbine_rifle_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'Combat MG' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', combat_mg_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(combat_mg_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
            elseif weapon == 'Heavy Sniper' then
                local ammo = weapons_mk2:textslider('Ammo Type', {}, '', heavy_sniper_types, function(table_index)
                    local ammo_type = ammo_type_to_hash(heavy_sniper_types[table_index], weapon_hash)
                    GiveComponent(weapon_hash, ammo_type)
                end)
    
                local scope = weapons_mk2:textslider('Scope', {}, '', heavy_sniper_scopes, function(table_index)
                    local weapon_hash = util.joaat('WEAPON_HEAVYSNIPER_MK2')
                    local scope = heavy_sniper_scopes[table_index]
                    local component_hash = ''
    
                    if scope == 'Zoom Scope' then
                        component_hash = util.joaat('COMPONENT_AT_SCOPE_LARGE_MK2')
                    elseif scope == 'Advanced Scope' then
                        component_hash = util.joaat('COMPONENT_AT_SCOPE_MAX')
                    elseif scope == 'Night Vision Scope' then
                        component_hash = util.joaat('COMPONENT_AT_SCOPE_NV')
                    elseif scope == 'Thermal Scope' then
                        component_hash = util.joaat('COMPONENT_AT_SCOPE_THERMAL')
                    end
    
                    if not HasPedGotWeaponComponent(players.user_ped(), weapon_hash, component_hash) then
                        GiveWeaponComponentToPed(players.user_ped(), weapon_hash, component_hash)
                        local ammo_type = GetPedAmmoTypeFromWeapon(players.user_ped(), weapon_hash)
                        AddPedAmmoByType(players.user_ped(), ammo_type, 9999)
                    end
                end)
            end
        end)
    
        thermal:toggle_loop(T'ESP Thermal', {}, T'Makes thermal more op than it already is', function()
            if GetUsingseethrough() then
                SeethroughSetMaxThickness(SeethroughGetMaxThickness())
                SeethroughSetNoiseMin(0.0)
                SeethroughSetNoiseMax(0.0)
                SeethroughSetFadeStartdistance(0.0)
                SeethroughSetFadeEnddistance(Shared.MAX_INT + 0.0)
                SeethroughSetHighlightNoise(0.0)
            else
                SeethroughReset()
            end
        end,
        function()
            SeethroughReset()
        end)
    
        do
            local a = pluto_new PlayerAimbot(aimbot)
            local b = pluto_new PedAimbot(aimbot)
        end
    end
end

return Weapons