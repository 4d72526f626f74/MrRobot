pluto_use class

local Module = require('abstract_base_classes.module')
local T = require('languages.trans')
local esp = require('libs.esp')

enum DispatchServices begin
    DT_Invalid,
    DT_PoliceAutomobile,
    DT_PoliceHelicopter,
    DT_FireDepartment,
    DT_SwatAutomobile,
    DT_AmbulanceDepartment,
    DT_PoliceRiders,
    DT_PoliceVehicleRequest,
    DT_PoliceRoadBlock,
    DT_PoliceAutomobileWaitPulledOver,
    DT_PoliceAutomobileWaitCruising,
    DT_Gangs,
    DT_SwatHelicopter,
    DT_PoliceBoat,
    DT_ArmyVehicle,
    DT_BikerBackup
end

class World extends Module
    function __construct(root)
        self.root = root
        self.repopulate_timer = os.time() + 10
        self.blackout = self.root:list(T'Blackout', {T'rwblackout'}, 'Blackout options')
        self.chams = self.root:list(T'Chams', {T'rwchams'}, 'Chams options')
        self.dispatch_service = self.root:list(T'Dispatch Services', {T'rwdispatch'}, 'Enable/disable certain dispatch services (police, fire dept etc)')

        do
            self.blackout:toggle(T'Black Out', {}, 'Turn off all artificial lights', function(state)
                graphics.set_artificial_lights_state(state)
                graphics.set_artificial_vehicle_lights_state(state)
                if self.stand_lock_time:isValid() and self.stand_smooth_transition:isValid() and self.stand_time_midnight:isValid() then
                    self.stand_lock_time.value = state
                    self.stand_smooth_transition.value = not state
    
                    local light_intensity = graphics.get_light_override_max_intensity_scale()
                    if state then
                        self.stand_time_midnight:trigger()
                        graphics.set_light_override_max_intensity_scale(0.0)
                        graphics.set_timecycle_modifier_strength(1.2)
                        graphics.set_timecycle_modifier('superDARK')
                    else
                        graphics.set_light_override_max_intensity_scale(light_intensity)
                        graphics.clear_timecycle_modifier()
                    end
                end
            end)
    
            self.blackout_intensity = self.blackout:slider_float(T'Intensity', {T'rwblackintensity'}, 'Intensity of the blackout', 0.0 * 100, math.max_float, 1.2 * 100, 0.01 * 100, function(value)
                graphics.set_timecycle_modifier_strength(value / 100)
            end)
        end

        do
            self.chams:toggle(T'Chams', {}, T'', function(state)
                if state then
                    graphics.set_timecycle_modifier('mp_lad_night')
                else
                    graphics.clear_timecycle_modifier()
                end
            end)

            self.chams_intensity = self.chams:slider_float(T'Intensity', {T'rwchamsintensity'}, 'Intensity of the chams', 0.0 * 100, math.max_float, 1.2 * 100, 0.01 * 100, function(value)
                graphics.set_timecycle_modifier_strength(value / 100)
            end)
        end

        do
            self.police_automobile = self.dispatch_service:list(T'Police Automobile', {}, '')
            self.police_automobile:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceAutomobile, true)
            end)
            self.police_automobile:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceAutomobile, false)
            end)

            self.police_helicopter = self.dispatch_service:list(T'Police Helicopter', {}, '')
            self.police_helicopter:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceHelicopter, true)
            end)
            self.police_helicopter:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceHelicopter, false)
            end)

            self.fire_department = self.dispatch_service:list(T'Fire Department', {}, '')
            self.fire_department:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_FireDepartment, true)
            end)
            self.fire_department:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_FireDepartment, false)
            end)

            self.swat_automobile = self.dispatch_service:list(T'SWAT Automobile', {}, '')
            self.swat_automobile:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_SwatAutomobile, true)
            end)
            self.swat_automobile:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_SwatAutomobile, false)
            end)

            self.ambulance_department = self.dispatch_service:list(T'Ambulance Department', {}, '')
            self.ambulance_department:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_AmbulanceDepartment, true)
            end)
            self.ambulance_department:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_AmbulanceDepartment, false)
            end)

            self.police_riders = self.dispatch_service:list(T'Police Riders', {}, '')
            self.police_riders:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceRiders, true)
            end)
            self.police_riders:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceRiders, false)
            end)

            self.police_vehicle_request = self.dispatch_service:list(T'Police Vehicle Request', {}, '')
            self.police_vehicle_request:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceVehicleRequest, true)
            end)
            self.police_vehicle_request:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceVehicleRequest, false)
            end)

            self.police_road_block = self.dispatch_service:list(T'Police Road Block', {}, '')
            self.police_road_block:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceRoadBlock, true)
            end)
            self.police_road_block:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceRoadBlock, false)
            end)

            self.police_automobile_wait_pulled_over = self.dispatch_service:list(T'Police Automobile Wait Pulled Over', {}, '')
            self.police_automobile_wait_pulled_over:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceAutomobileWaitPulledOver, true)
            end)
            self.police_automobile_wait_pulled_over:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceAutomobileWaitPulledOver, false)
            end)

            self.police_automobile_wait_cruising = self.dispatch_service:list(T'Police Automobile Wait Cruising', {}, '')
            self.police_automobile_wait_cruising:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceAutomobileWaitCruising, true)
            end)
            self.police_automobile_wait_cruising:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceAutomobileWaitCruising, false)
            end)

            self.gangs = self.dispatch_service:list(T'Gangs', {}, '')
            self.gangs:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_Gangs, true)
            end)
            self.gangs:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_Gangs, false)
            end)

            self.swat_helicopter = self.dispatch_service:list(T'SWAT Helicopter', {}, '')
            self.swat_helicopter:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_SwatHelicopter, true)
            end)
            self.swat_helicopter:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_SwatHelicopter, false)
            end)

            self.police_boat = self.dispatch_service:list(T'Police Boat', {}, '')
            self.police_boat:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceBoat, true)
            end)
            self.police_boat:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_PoliceBoat, false)
            end)

            self.army_vehicle = self.dispatch_service:list(T'Army Vehicle', {}, '')
            self.army_vehicle:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_ArmyVehicle, true)
            end)
            self.army_vehicle:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_ArmyVehicle, false)
            end)

            self.biker_backup = self.dispatch_service:list(T'Biker Backup', {}, '')
            self.biker_backup:action(T'Enable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_BikerBackup, true)
            end)
            self.biker_backup:action(T'Disable', {}, '', function()
                misc.enable_dispatch_service(DispatchServices.DT_BikerBackup, false)
            end)

            self.dispatch_service:divider('')
            self.dispatch_service:action(T'Enable All', {}, '', function()
                for i = 1, 16 do
                    misc.enable_dispatch_service(i, true)
                end
            end)

            self.dispatch_service:action(T'Disable All', {}, '', function()
                for i = 1, 16 do
                    misc.enable_dispatch_service(i, false)
                end
            end)
        end

        do
            self.root:divider('')
            self.ghost_town = self.root:toggle(T'Ghost Town', {}, T'Los Santos becomes a ghost town (if players in your session are nearby this won\'t take effect)', function(state)
                if self.stand_lock_time:isValid() and self.stand_smooth_transition:isValid() and self.stand_time_midnight:isValid() then
                    self.stand_lock_time.value = state
                    self.stand_smooth_transition.value = not state
                    self.stand_time_midnight:trigger()
    
                    if state then
                        graphics.set_timecycle_modifier_strength(1)
                        graphics.set_timecycle_modifier('superDARK')
                        graphics.set_artificial_lights_state(true)
                        graphics.set_artificial_vehicle_lights_state(true)
                        util.create_tick_handler(function()
                            if not self.ghost_town.value then
                                return false
                            end
                            vehicle.set_ambient_vehicle_range_multiplier_this_frame(0.0)
                            ped.set_ped_density_multiplier_this_frame(0.0)
                            ped.set_scenario_ped_density_multiplier_this_frame(0.0, 0.0)
                            vehicle.set_vehicle_density_multiplier_this_frame(0.0)
                            vehicle.set_random_vehicle_density_multiplier_this_frame(0.0)
                            vehicle.set_parked_vehicle_density_multiplier_this_frame(0.0)
                        end)
                    else
                        graphics.set_artificial_lights_state(false)
                        graphics.set_artificial_vehicle_lights_state(false)
                        graphics.clear_timecycle_modifier()
                    end
                end
            end)
    
            self.root:toggle(T'Eternal Darkness', {}, T'No more sunrises or sunsets, you will see nothing', function(state)
                if state then
                    graphics.set_timecycle_modifier_strength(math.max_float)
                    graphics.set_timecycle_modifier('glasses_black')
                else
                    graphics.clear_timecycle_modifier()
                end
            end)
    
            self.root:toggle(T'Riot Mode', {}, T'Makes everyone riot', function(state)
                misc.set_riot_mode_enabled(state)
            end)
    
            self.root:toggle_loop(T'The Purge', {}, T'Makes all peds hostile to each other', function()
                if self.stand_lock_time:isValid() and self.stand_smooth_transition:isValid() and self.stand_time_midnight:isValid() then
                    self.stand_lock_time.value = true
                    self.stand_smooth_transition.value = false
                    self.stand_time_midnight:trigger()
    
                    misc.set_riot_mode_enabled(true)
                    graphics.set_timecycle_modifier_strength(1)
                    graphics.set_timecycle_modifier('superDARK')
                    graphics.set_artificial_lights_state(true)
                    graphics.set_artificial_vehicle_lights_state(true)
    
                    if os.time() > self.repopulate_timer then
                        ped.instantly_fill_ped_population()
                        self.repopulate_timer = os.time() + 10
                    end
    
                    for _, entity in pairs(entities.get_all_peds_as_handles()) do
                        if entity == players.user_ped() then
                            goto continue
                        end
    
                        ped.set_ped_combat_attributes(entity, 5, true)
                        ped.set_ped_combat_attributes(entity, 46, true)
                        ped.set_ped_combat_attributes(entity, 17, false)
                        ped.set_ped_combat_attributes(entity, 13, true)
                        ped.set_ped_combat_attributes(entity, 58, true)
                        ped.set_ped_combat_range(entity, 2)
                        ped.set_ped_combat_ability(entity, 2)
                        ped.set_ped_combat_movement(entity, 2)
                        if ped.is_ped_in_any_vehicle(entity, false) then
                            task.task_leave_any_vehicle(entity, 0, 0)
                            entities.delete_by_handle(ped.get_vehicle_ped_is_in(entity, false))
                        end
    
                        task.task_combat_ped(entity, players.user_ped(), 0, 16)
    
                        ::continue::
                    end
                end
            end,
            function()
                if self.stand_lock_time:isValid() and self.stand_smooth_transition:isValid() then
                    misc.set_riot_mode_enabled(false)
                    graphics.clear_timecycle_modifier()
                    graphics.set_artificial_lights_state(false)
                    graphics.set_artificial_vehicle_lights_state(false)
                    self.stand_lock_time.value = false
                    self.stand_smooth_transition.value = true
                end
            end)
    
            self.root:toggle_loop(T'Peds Turn Blindeye', {}, T'Peds don\'t give a fuck what you do', function()
                for entities.get_all_peds_as_handles() as p do
                    if not ped.is_ped_a_player(p) and not ped.get_ped_config_flag(p, 17, true) then
                        ped.set_blocking_of_non_temporary_events(p, true)
                        task.task_set_blocking_of_non_temporary_events(p, true)
                    end
                end
            end)
    
            self.root:toggle_loop(T'Display Health Bar', {}, T'Show a health bar for peds', function()
                local my_pos = players.get_position(players.user())
                for entities.get_all_peds_as_pointers() as ptr do
                    local pos = entities.get_position(ptr)
                    if my_pos:distance(pos) < 300 then
                        local ent = entities.pointer_to_handle(ptr)
                        if not entity.is_entity_dead(ent) and not ped.is_ped_a_player(ent) then
                            esp.draw_health_esp(ent)
                        end
                    end
                end
            end)

            self.root:toggle_loop(T'Bone ESP', {}, T'Show bone positions for peds', function()
                local my_pos = players.get_position(players.user())
                for entities.get_all_peds_as_handles() as ent do
                    local pos = entity.get_entity_coords(ent)
                    if my_pos:distance(pos) < 1500 then
                        if not entity.is_entity_dead(ent) and not ped.is_ped_a_player(ent) then
                            local los = entity.has_entity_clear_los_to_entity(players.user_ped(), ent, 17)
                            local colour = (los) ? 0x00FF00FF : 0xFF0000FF
                            esp.draw_bone_esp(ent, colour)
                        end
                    end
                end
            end)
    
            self.root:toggle_loop(T'Bone ESP For Hostile Peds', {}, T'Show bone positions for hostile peds', function()
                local my_pos = players.get_position(players.user())
                for entities.get_all_peds_as_handles() as ent do
                    local pos = entity.get_entity_coords(ent)
                    if my_pos:distance(pos) < 1500 then
                        if not entity.is_entity_dead(ent) and not ped.is_ped_a_player(ent) then
                            local relation = ped.get_relationship_between_peds(ent, players.user_ped())
                            if relation == 4 or relation == 5 or ped.is_ped_in_combat(ent, players.user_ped()) then
                                local los = entity.has_entity_clear_los_to_entity(players.user_ped(), ent, 17)
                                local colour = (los) ? 0x00FF00FF : 0xFF0000FF
                                esp.draw_bone_esp(ent, colour)
                            end
                        end
                    end
                end
            end)

            self.root:toggle(T'Enable Snow', {}, '', function(state)
                if not util.can_continue() then return end
                memory.write_byte(self.g.EnableSnow:g(), state ? 1 : 0)
            end, memory.read_byte(self.g.EnableSnow:g()) == 1)

            self.root:toggle(T'Enable Maze Bank Shootout', {}, '', function(state)
                if not util.can_continue() then return end
                memory.write_byte(self.g.EnableMazeBankShootout:g(), state ? 1 : 0)
            end, memory.read_byte(self.g.EnableMazeBankShootout:g()) == 1)

            self.root:toggle(T'Enable Gang Convoy', {}, '', function(state)
                if not util.can_continue() then return end
                memory.write_byte(self.g.EnableGangConvoy:g(), state ? 1 : 0)
            end, memory.read_byte(self.g.EnableGangConvoy:g()) == 1)

            self.root:toggle(T'Enable Random Event Armoured Truck', {}, '', function(state)
                if not util.can_continue() then return end
                memory.write_byte(self.g.EnableRandomEventArmouredTruck:g(), state ? 1 : 0)
            end, memory.read_byte(self.g.EnableRandomEventArmouredTruck:g()) == 1)

            self.root:toggle(T'Enable Daily Bike Time Trial', {}, '', function(state)
                if not util.can_continue() then return end
                memory.write_byte(self.g.EnableDailyBikeTimeTrial:g(), state ? 1 : 0)
            end, memory.read_byte(self.g.EnableDailyBikeTimeTrial:g()) == 1)

            self.root:toggle(T'Enable Cayo Perico Attrition Mode', {}, '', function(state)
                if not util.can_continue() then return end
                memory.write_byte(self.g.EnableCayoPericoAttritionMode:g(), state ? 1 : 0)
            end, memory.read_byte(self.g.EnableCayoPericoAttritionMode:g()) == 1)

            self.root:toggle(T'Enable Halloween Ghost Hunt', {}, '', function(state)
                if not util.can_continue() then return end
                memory.write_byte(self.g.EnableHalloweenGhostHunt:g(), state ? 1 : 0)
            end, memory.read_byte(self.g.EnableHalloweenGhostHunt:g()) == 1)

            self.root:toggle(T'Enable Halloween Possessed Animal', {}, '', function(state)
                if not util.can_continue() then return end
                memory.write_byte(self.g.EnableHalloweenPossessedAnimal:g(), state ? 1 : 0)
            end, memory.read_byte(self.g.EnableHalloweenPossessedAnimal:g()) == 1)
        end
    end
end

return World