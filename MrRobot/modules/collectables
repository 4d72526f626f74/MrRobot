local T, S, H = require('translations'), require('shared'), require('handler')

local blips = setmetatable({}, {
    __index = blips,
    __gc = function(self)
        for self as blip do
            util.remove_blip(blip.handle)
        end
    end
})

function H.CollectablesRemoveBlips()
    blips = nil
end

enum Category begin
    Invalid = 0,
    CasinoCards = 1,
    SignalJammers = 2
end

pluto_class Collectables
    function __construct(root)
        self.root = root:list(T'Collectables', {T'rcollectables'}, '')
        self.root:action(T'Find All', {}, T'Finds most of the collectables', || -> self:FindAll())
        self.root:divider('')

        self:CreateCasino()
        self:CreateJammers()
        self:CreateFigurines()
        self:CreateLDOrganics()
        self:CreateSnowmen()
    end

    function CreateCasino()
        self.casino = self.root:list(T'Casino', {T'rccasino'}, '')
        self.casino:action(T'Find All Cards', {}, T'Instantly find all the cards', || -> self:Find(26911, 26964))

        self.casino:toggle(T'Show All Cards', {}, T'Shows all the cards on the map', function(state)
            if state then
               for ({
                    v3(-423, 1212.2420654297, 325.75823974609),
                    v3(251.75042724609, 214.47691345215, 106.2868347168),
                    v3(726.65893554688, 4187.9926757812, 40.709247589111),
                    v3(98.641494750977, 6620.3461914062, 32.435325622559),
                    v3(-284.32104492188, 6225.0498046875, 31.497802734375),
                    v3(-746.65942382812, 5599.1127929688, 41.654636383057),
                    v3(-1582.5842285156, 5201.306640625, 3.9842200279236),
                    v3(-2302.9250488281, 3387.6613769531, 31.256513595581),
                    v3(-525.26916503906, 4192.5961914062, 193.7311706543),
                    v3(76.81307220459, 3704.1840820312, 41.077209472656),
                    v3(-1101.5334472656, 2715.1713867188, 19.113943099976),
                    v3(-289.46228027344, 2544.1696777344, 75.415725708008),
                    v3(899.43041992188, 3555.9985351562, 33.827239990234),
                    v3(1692.1530761719, 3589.4685058594, 35.620971679688),
                    v3(1989.9505615234, 3045.7651367188, 47.215061187744),
                    v3(1705.8336181641, 4919.57421875, 42.063674926758),
                    v3(2122.9821777344, 4785.626953125, 40.970268249512),
                    v3(2693.8247070312, 4325.2573242188, 45.851989746094),
                    v3(2940.1257324219, 5325.48046875, 100.9655456543),
                    v3(3689.2438964844, 4570.0986328125, 25.107622146606),
                    v3(2750.11328125, 3467.5876464844, 55.711933135986),
                    v3(-3147.9494628906, 1114.5297851562, 20.846366882324),
                    v3(-3046.32421875, 584.15051269531, 7.9089274406433),
                    v3(-1827.4471435547, 798.64654541016, 138.16368103027),
                    v3(-1839.5356445312, -1233.5810546875, 13.017261505127),
                    v3(-1513.4025878906, -104.87504577637, 54.184757232666),
                    v3(-1152.6549072266, -525.74230957031, 32.125282287598),
                    v3(-1167.3082275391, -232.46827697754, 37.947425842285),
                    v3(-968.50933837891, 104.63013458252, 55.666194915771),
                    v3(-1286.1337890625, -1117.7790527344, 6.990110874176),
                    v3(-1205.1097412109, -1557.8605957031, 4.6167182922363),
                    v3(-167.74485778809, -299.07723999023, 39.733310699463),
                    v3(-410.2529296875, 586.95886230469, 124.61524963379),
                    v3(-1029.8304443359, -2744.5158691406, 13.842164039612),
                    v3(812.63977050781, -2978.5576171875, 6.0206537246704),
                    v3(-72.862899780273, -2003.5484619141, 18.275272369385),
                    v3(825.76293945312, -2158.7817382812, 29.619009017944),
                    v3(989.45788574219, -1797.9250488281, 31.635583877563),
                    v3(1130.9044189453, -980.15997314453, 46.415859222412),
                    v3(204.16436767578, -1645.7397460938, 29.803215026855),
                    v3(119.6584854126, -1295.4942626953, 29.269523620605),
                    v3(11.997032165527, -1103.1140136719, 29.797031402588),
                    v3(182.15174865723, -683.46136474609, 43.140930175781),
                    v3(547.30261230469, -189.86305236816, 54.481349945068),
                    v3(1160.9501953125, -314.63861083984, 69.205039978027),
                    v3(2565.671875, 299.03778076172, 108.73483276367),
                    v3(1486.19140625, 1128.1567382812, 114.33664703369),
                    v3(2340.3068847656, 2570.3623046875, 47.730003356934),
                    v3(731.86688232422, 2514.689453125, 73.170501708984),
                    v3(188.28002929688, 3074.34375, 43.082084655762),
                    v3(1874.6353759766, 6409.7607421875, 46.654632568359),
                    v3(-535.78289794922, -1277.8481445312, 26.901580810547),
                    v3(-102.85450744629, 366.66351318359, 112.88076019287)
                }) as vector do
                    local blip = hud.add_blip_for_coord(vector.x, vector.y, vector.z)
                    hud.set_blip_sprite(blip, 680)
                    hud.set_blip_scale(blip, 0.7)
                    table.insert(blips, {handle=blip, category=Category.CasinoCards})
                end
            else
                if blips ~= nil then
                    for blips as blip do
                        if blip.category == Category.CasinoCards then
                            util.remove_blip(blip.handle)
                        end
                    end
                end
            end
        end)
    end

    function CreateJammers()
        self.jammers = self.root:list(T'Signal Jammers', {T'rcjammers'}, '')
        self.jammers:action(T'Unlock Avi Schwartzman', {}, T'Instantly unlock Avi Schwartzman', || -> self:Find(28099, 28148))

        self.jammers:toggle(T'Show All Jammers', {}, T'Shows all the jammers on the map', function(state)
            if state then
                for ({
                    v3(1006.372, -2881.68, 30.422),
                    v3(-980.242, -2637.703, 88.528),
                    v3(-688.195, -1399.329, 23.331),
                    v3(1120.696, -1539.165, 54.871),
                    v3(2455.134, -382.585, 112.635),
                    v3(793.878, -717.299, 48.083),
                    v3(-168.3, -590.153, 210.936),
                    v3(-1298.3429, -435.8369, 108.129),
                    v3(-2276.4841, 335.0941, 195.723),
                    v3(-667.25, 228.545, 154.051),
                    v3(682.561, 567.5302, 153.895),
                    v3(2722.561, 1538.1031, 85.202),
                    v3(758.539, 1273.6871, 445.181),
                    v3(-3079.2578, 768.5189, 31.569),
                    v3(-2359.338, 3246.831, 104.188),
                    v3(1693.7318, 2656.602, 60.84),
                    v3(3555.018, 3684.98, 61.27),
                    v3(1869.0221, 3714.4348, 117.068),
                    v3(2902.552, 4324.699, 101.106),
                    v3(-508.6141, 4426.661, 87.511),
                    v3(-104.417, 6227.2783, 63.696),
                    v3(1607.5012, 6437.3154, 32.162),
                    v3(2792.933, 5993.922, 366.867),
                    v3(1720.6129, 4822.467, 59.7),
                    v3(-1661.0101, -1126.742, 29.773),
                    v3(-1873.49, 2058.357, 154.407),
                    v3(2122.4602, 1750.886, 138.114),
                    v3(-417.424, 1153.1431, 339.128),
                    v3(3303.9011, 5169.7925, 28.735),
                    v3(-1005.8481, 4852.1475, 302.025),
                    v3(-306.627, 2824.859, 69.512),
                    v3(1660.6631, -28.07, 179.137),
                    v3(754.647, 2584.067, 133.904),
                    v3(-279.9081, -1915.608, 54.173),
                    v3(-260.4421, -2411.8071, 126.019),
                    v3(552.132, -2221.8528, 73),
                    v3(394.3919, -1402.144, 76.267),
                    v3(1609.7911, -2243.767, 130.187),
                    v3(234.2919, 220.771, 168.981),
                    v3(-1237.1211, -850.4969, 82.98),
                    v3(-1272.7319, 317.9532, 90.352),
                    v3(0.088, -1002.4039, 96.32),
                    v3(470.5569, -105.049, 135.908),
                    v3(-548.5471, -197.9911, 82.813),
                    v3(2581.0469, 461.9421, 115.095),
                    v3(720.14, 4097.634, 38.075),
                    v3(1242.4711, 1876.0681, 92.242),
                    v3(2752.1128, 3472.779, 67.911),
                    v3(-2191.856, 4292.4077, 55.013),
                    v3(450.475, 5581.514, 794.0683),
                }) as vector do
                    local blip = hud.add_blip_for_coord(vector.x, vector.y, vector.z)
                    hud.set_blip_sprite(blip, 802)
                    hud.set_blip_scale(blip, 1.1)
                    table.insert(blips, {handle=blip, category=Category.SignalJammers})
                end
            else
                if blips ~= nil then
                    for blips as blip do
                        if blip.category == Category.SignalJammers then
                            util.remove_blip(blip.handle)
                        end
                    end
                end
            end
        end)
    end

    function CreateFigurines()
        self.figures = self.root:list(T'Action Figures', {T'rcfigures'}, '')
        self.figures:action(T'Find All Action Figures', {}, T'Instantly find all action figures', || -> self:Find(26811, 26910))
    end

    function CreateLDOrganics()
        self.ldo = self.root:list(T'LD Organics', {T'rcldo'}, '')
        self.ldo:action(T'Find All LD Organics', {}, T'Instantly find all LD Organics', || -> self:Find(34262, 34361))
    end

    function CreateSnowmen()
        self.snowmen = self.root:list(T'Snowmen', {T'rcsnowmen'}, '')
        self.snowmen:action(T'Find All Snowmen', {}, T'Instantly find all snowmen', || -> self:Find(36630, 36654))
    end

    function FindAll()
        local char_slot = util.get_char_slot()
        for i = 26811, 26910 do stats.set_packed_stat_bool_code(i, true, char_slot) end
        for i = 28099, 28148 do stats.set_packed_stat_bool_code(i, true, char_slot) end
        for i = 30241, 30250 do stats.set_packed_stat_bool_code(i, true, char_slot) end
        for i = 34262, 34361 do stats.set_packed_stat_bool_code(i, true, char_slot) end
        for i = 36630, 36654 do stats.set_packed_stat_bool_code(i, true, char_slot) end
        for i = 30297, 30307 do stats.set_packed_stat_bool_code(i, true, char_slot) end

        S:NewSessionMsg()
    end

    function Find(start, _end)
        local char_slot = util.get_char_slot()
        for i = start, _end do stats.set_packed_stat_bool_code(i, true, char_slot) end
        S:NewSessionMsg()
    end
end

return Collectables