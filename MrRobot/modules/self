local T, S = require('translations'), require('shared')
local PedList = require('pedlist')
local Cutscenes = require('cutscenes')
local ScriptOffsets = require('offsets')
local Globals = require('script_globals')
local Network = require('network')

PedList = S:SortTable(PedList, |a, b| -> a < b)
Cutscenes = S:SortTable(Cutscenes, |a, b| -> a < b)

local Bits = ScriptOffsets.Self.Bits
local Settings = pluto_new Bitfield(100)
local VehicleBitfield = ScriptOffsets.Vehicles.VehicleBitfield
local VehicleData = ScriptOffsets.Vehicles.LSCustoms

local suicide_ref = menu.ref_by_path('Self>Suicide')

pluto_class SelfOptions
    impact_coords = v3()
    ent_proofs_all = {true, true, true, true, true, true, true}
    ent_proofs_off = {false, false, false, false, false, false, false, false}

    function __construct(root)
        self.root = root:list(T'Self', {T'rself'}, '')
        self.sroot = filesystem.script_root()
        self.simages = $'{self.sroot}/images'

        self.healing = self.root:list(T'Healing', {T'healing'}, T'Healing options')
        self.healthmod = self.root:list(T'Health', {T'health'}, T'Modded health options')
        self.superpunch = self.root:list(T'Super Punch', {T'superpunch'}, T'Super Punch options')
        self.hiding = self.root:list(T'Hiding', {T'hiding'}, T'Hiding options')
        self.mental_state = self.root:list(T'Mental State', {T'mentalstate'}, T'Mental State options')
        self.noclip = self.root:list(T'No Clip', {T'noclip'}, T'No Clip options')
        self.bounty = self.root:list(T'Bounty', {T'bounty'}, T'Bounty options')
        self.model_changer = self.root:list(T'Model Changer', {T'modelchanger'}, T'Model Changer options')
        self.cutscene = self.root:list(T'Cutscenes', {T'cutscene'}, T'Cutscene options')
        self.pvp_helper = self.root:list(T'PvP Helper', {T'pvphelper'}, T'PvP Helper options')
        self.entity_aiming_at = memory.alloc(4)
        self.root:divider('')

        self.auto_heal = self.healing:toggle_loop(T'Auto Heal', {T'rautoheal'}, T'Automatically heal when your health falls below the threshold that you have set', function()
            local localplayer = players.localplayer()
            local max_health = localplayer:get_entity_max_health()
            local current_health = localplayer:get_entity_health()
            local health_percent = math.floor((current_health / max_health) * 100)

            if health_percent < Settings:Get(Bits.HealthThreshold) then
                localplayer:set_entity_health(max_health)
            end
        end)

        self.display_health_percent = self.healing:toggle_loop(T'Display Current Health Percentage', {T'rdisplayhealthpercent'}, T'Displays your current health as a percentage', function()
            local localplayer = players.localplayer()
            local max_health = localplayer:get_entity_max_health(Ped)
            local current_health = localplayer:get_entity_health(Ped)
            local health_percent = math.floor((current_health / max_health) * 100)
            util.draw_debug_text('Current Health: ' .. tostring(health_percent) .. '%')
        end)

        self.health_threshold = self.healing:slider(T'Health Threshold', {T'rhealthreshold'}, T'Health threshold to start healing', 0, 100, Settings:Get(Bits.HealthThreshold), 1, function(value)
            Settings:Clear(Bits.HealthThreshold)
            Settings:Set(value)
        end)

        self.mod_maxhealth = self.healthmod:toggle(T'Mod Max Health', {T'rmoddedhealth'}, T'Modded max health', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            local localplayer = players.localplayer()
            if state then
                Settings:Set(Bits.ModdedHealth)
            else
                Settings:Clear(Bits.ModdedHealth)
                localplayer:set_ped_max_health(328)
                localplayer:set_entity_health(328)
            end
        end, Settings:IsSet(Bits.ModdedHealth))

        self.moddedhealth_amount = self.healthmod:text_input(T'Max Health', {T'rmaxhealth'}, T'Change your max health', function(health)
            local localplayer = players.localplayer()
            
            if Settings:IsSet(Bits.ModdedHealth) then
                local state, err = pcall(function()
                    local health = tonumber(health)
                    localplayer:set_ped_max_health(health)
                    localplayer:set_entity_health(health)
                end)

                if not state then
                    util.error(err)
                end
            end
        end)

        self.p_superpunch = self.superpunch:toggle_loop(T'Super Punch', {}, T'Kill players and peds in a single hit', function()
            self:SuperPunch(17, 1000.0, false, true, 0.0)
        end)

        self.orbital_superpunch = self.superpunch:toggle_loop(T'Orbital Cannon Super Punch', {}, T'Kill players and peds in a single hit', function()
            local orbital_cannon = memory.script_global(Globals.OrbitalCannon)
            memory.write_byte(orbital_cannon, 1)
            self:SuperPunch(60, 1000.0, false, true, 0.0)
        end)

        self.anti_psychpath = self.mental_state:toggle_loop(T'Anti-Psychopath', {T'rantipsychopath'}, T'Disables killing players, peds and cops affecting your mental state', function()
            local mental_state = memory.script_global(Globals.MentalState)
            local mental_state_value = memory.script_global(Globals.MentalStateValue)
    
            memory.write_byte(mental_state, 1)
            memory.write_float(mental_state_value, 0.0)
        end,
        function()
            local mental_state = memory.script_global(Globals.MentalState)
            memory.write_byte(mental_state, 0)
        end)

        self.psychopath = self.mental_state:toggle_loop(T'Psychopath', {T'rpsychopath'}, T'Show your inner psychopath', function()
            local mental_state_value = memory.script_global(Globals.MentalStateValue)
            memory.write_float(mental_state_value, 100.0)
        end)
    
        self.display_mental_state = self.mental_state:toggle_loop(T'Display Mental State', {T'rdisplaymentalstate'}, T'Displays your current mental state', function()
            local mental_state_value = memory.script_global(Globals.MentalStateValue)
            local value = memory.read_float(mental_state_value)
            util.draw_debug_text('Mental State: ' .. value)
        end)

        self.p_noclip = self.noclip:toggle_loop(T'No Clip', {T'rnoclip'}, T'Fly around the map', function()
            local localplayer = players.localplayer()
            if localplayer:is_ped_in_any_vehicle() then
                local veh = players.localplayer_vehicle()
                if veh.entity ~= 0 then
                    veh:freeze_entity_position(true)
                    veh:set_entity_collision(false, true)

                    local rot = cam.get_gameplay_cam_rot(5)
                    veh:set_entity_rotation(rot.x, rot.y, rot.z, 5, true)

                    if util.is_key_down(0x57) then -- W
                        local pos = veh:get_offset_from_entity_in_world_coords(0, 1 * self.noclip_speed.value, 0)
                        veh:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                    elseif util.is_key_down(0x53) then -- S
                        local pos = veh:get_offset_from_entity_in_world_coords(0, -1 * self.noclip_speed.value, 0)
                        veh:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                    end

                    if util.is_key_down(0x41) then -- A
                        local pos = veh:get_offset_from_entity_in_world_coords(-1 * self.noclip_speed.value, 0, 0)
                        veh:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                    elseif util.is_key_down(0x44) then -- D
                        local pos = veh:get_offset_from_entity_in_world_coords(1 * self.noclip_speed.value, 0, 0)
                        veh:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                    end

                    -- left shift
                    if util.is_key_down(0x10) then
                        local pos = veh:get_offset_from_entity_in_world_coords(0, 0, 1 * self.noclip_speed.value)
                        veh:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                    end

                    -- left control
                    if util.is_key_down(0x11) then
                        local pos = veh:get_offset_from_entity_in_world_coords(0, 0, -1 * self.noclip_speed.value)
                        veh:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                    end
                end
            else
                localplayer:freeze_entity_position(true)
                localplayer:set_entity_collision(false, true)

                local rot = cam.get_gameplay_cam_rot(5)
                localplayer:set_entity_rotation(rot.x, rot.y, rot.z, 5, true)

                if util.is_key_down(0x57) then -- W
                    local pos = localplayer:get_offset_from_entity_in_world_coords(0, 1 * self.noclip_speed.value, 0)
                    localplayer:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                elseif util.is_key_down(0x53) then -- S
                    local pos = localplayer:get_offset_from_entity_in_world_coords(0, -1 * self.noclip_speed.value, 0)
                    localplayer:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                end

                if util.is_key_down(0x41) then -- A
                    local pos = localplayer:get_offset_from_entity_in_world_coords(-1 * self.noclip_speed.value, 0, 0)
                    localplayer:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                elseif util.is_key_down(0x44) then -- D
                    local pos = localplayer:get_offset_from_entity_in_world_coords(1 * self.noclip_speed.value, 0, 0)
                    localplayer:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                end

                -- left shift
                if util.is_key_down(0x10) then
                    local pos = localplayer:get_offset_from_entity_in_world_coords(0, 0, 1 * self.noclip_speed.value)
                    localplayer:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                end

                -- left control
                if util.is_key_down(0x11) then
                    local pos = localplayer:get_offset_from_entity_in_world_coords(0, 0, -1 * self.noclip_speed.value)
                    localplayer:set_entity_coords_no_offset(pos.x, pos.y, pos.z, false, false, false)
                end
            end
        end, function()
            local localplayer = players.localplayer()
            if localplayer:is_ped_in_any_vehicle() then
                local veh = players.localplayer_vehicle()
                if veh.entity ~= 0 then
                    veh:freeze_entity_position(false)
                    veh:set_entity_collision(true, true)
                end
            else
                localplayer:freeze_entity_position(false)
                localplayer:set_entity_collision(true, true)
                localplayer:clear_ped_tasks_immediately()
            end
        end)

        self.noclip_speed = self.noclip:slider(T'Speed', {}, T'Speed multiplier', 1, 100, 1, 1, function(value) end)

        self.stealth_mode = self.root:toggle(T'Stealth', {T'rsstealthmode'}, T'Removes your blip from the radar for the entire session (this method does not trigger a off the radar too long detection)', Network.ToggleStealthMode)
        self.bribe_authorities = self.root:toggle_loop(T'Bribe Authorities', {T'rbribeauthorities'}, T'Bribes the authorities to ignore your crimes', function()
            Network.ToggleBribeAuthorities(true)
        end,
        function()
            Network.ToggleBribeAuthorities(false)
        end)

        self.invisibility = self.root:toggle_loop(T'Invisibility', {T'rinvisibility'}, T'Makes you invisible to other players', function()
            Network.ToggleInvisibility(true)
        end,
        function()
            Network.ToggleInvisibility(false)
        end)

        self.spoof_interior_state = self.root:toggle(T'Spoof Interior State', {T'rspoofinteriorstate'}, T'Spoofs your interior state', Network.SpoofInteriorState)

        self.harden_player = self.root:toggle(T'Harden Player', {T'rhardenplayer'}, T'Hardens your player', function(state)
            local localplayer = players.localplayer()
            localplayer:set_ped_suffers_critical_hits(not state)
            localplayer:set_ped_upper_body_damage_only(state)
        end)

        self.fast_respawn = self.root:toggle_loop(T'Fast Respawn', {T'rfastrespawn'}, T'Respawns you instantly', function()
            local respawn = memory.script_global(Globals.FastRespawn)
            local respawn_state = memory.script_global(Globals.RespawnState)
            if memory.read_byte(respawn_state) ~= 0 then
                memory.write_byte(respawn, 1)
                util.yield_once()
                memory.write_byte(respawn, 0)
            end
        end)

        self.killer_karma = self.root:toggle_loop(T'Killer Karma', {T'rkillerkarma'}, T'Karma the plaer that killed you', function()
            local killer_karma = memory.script_global(Globals.PlayerKiller)
            local respawn = memory.script_global(Globals.FastRespawn)
            local respawn_state = memory.script_global(Globals.RespawnState)
            if memory.read_byte(respawn_state) ~= 0 then
                local pid = memory.read_int(killer_karma)
                local state, err = pcall(function()
                    local entity = players.localplayer()
                    entity.entity = player.get_player_ped(pid)
                    local pos = entity:get_offset_from_entity_in_world_coords(0.0, 0.0, 0.0)
                    if not entity:is_entity_dead() then
                        entity.add_owned_explosion(players.user_ped(), pos.x, pos.y, pos.z, 18, 1000, false, true, 0.0)
                        memory.write_byte(killer_karma, -1)
                        memory.write_byte(respawn, 1)
                        util.yield_once()
                        memory.write_byte(respawn, 0)
                    end
                end)
                if not state then
                    util.error(err)
                end
            end
        end)

        self.infinite_otr_ghost = self.root:toggle_loop(T'Infinite OTR / Ghost Org', {T'rsinfiniteotr'}, T'Freezes the timer for ghost org and off the radar', function()
            Network.SetOTRGhostOrgTimer(nil)
        end)

        self.force_ghost_org = self.root:toggle(T'Force Ghost Org', {T'rsforceghostorg'}, T'Always go ghost org instead of off the radar (this won \'t work unless you are in an organisation)', function(state)
            local force = memory.script_global(Globals.AbilitiesBitfield)
            local value = memory.read_byte(force)
            value = memory.bits:setbool(value, Bits.ForceGhostOrg, state)
            memory.write_byte(force, value)
        end)

        self.snack_insta_restore = self.root:toggle(T'Snacks Instantly Restore', {T'rssnackinstarestore'}, T'All snacks fill you health up after just 1 snack', function(state)
            for i = Globals.SnacksInstantRestoreStart, Globals.SnacksInstantRestoreEnd do
                memory.write_float(memory.script_global(262145 + i), state ? 100.0 : 1.0)
            end
        end)

        self.beast_mode = self.root:toggle(T'Beast Mode', {T'rsbeastmode'}, T'Enables beast mode which makes you stronger, faster and more durable than normal', function(state)
            local localplayer = players.localplayer()
            if not util.is_session_started() then
                self.beast_mode.value = false
                return
            end

            if state then
                util.create_tick_handler(function()
                    if not self.beast_mode.value then
                        return false
                    end
                    localplayer:set_entity_health(math.max_int)
                end)
                localplayer:give_weapon_to_ped(('WEAPON_UNARMED'):joaat(), 0, true, true)
                repeat
                    util.yield_once()
                    localplayer:clear_ped_tasks_immediately()
                until localplayer:is_ped_stopped()
                util.yield(50)

                local pos = localplayer:get_offset_from_entity_in_world_coords(0.05, 0.5, -1.11)
                local scene = network.network_create_synchronised_scene(pos.x, pos.y, pos.z, 0.0, 0.0, localplayer:get_entity_heading() + 90.0, 2, false, false, 1.0, 0.0, 1.0)
                network.network_add_synchronised_scene_camera(scene, 'ANIM@MP_FM_EVENT@INTRO', 'BEAST_TRANSFORM_CAM')
                localplayer:task_play_anim('ANIM@MP_FM_EVENT@INTRO', 'BEAST_TRANSFORM', 1000.0, -2.0, -1, 0, 0.0, false, false, false)
                localplayer:force_ped_ai_and_animation_update(false, false)
                network.network_force_local_use_of_synced_scene_camera(scene)
                network.network_start_synchronised_scene(scene)

                if not graphics.animpostfx_is_running('BeastIntroScene') then
                    graphics.ANIMPOSTFX_PLAY('BeastIntroScene', 0, false)
                end

                audio.start_audio_scene('FM_Event_Beast_Transform_Sequence_Scene')
                audio.play_sound_frontend(-1, 'Frontend_Beast_Transform_Back', 'FM_Events_Sasquatch_Sounds', false)

                localplayer:clear_ped_stored_hat_prop()
                localplayer:clear_all_ped_props(1)
                localplayer:set_ped_config_flag(189, true)
                localplayer:set_ped_config_flag(407, true)
                player.set_player_melee_weapon_damage_modifier(players.user(), 100.0, true)
                localplayer:set_ped_suffers_critical_hits(false)
                localplayer:set_disable_high_fall_death(true)
                player.set_player_max_explosive_damage(players.user(), 500.0)
                localplayer:set_ped_config_flag(410, true)
                player.set_player_vehicle_defense_modifier(players.user(), math.max_float)
                player.set_player_vehicle_damage_modifier(players.user(), math.min_float)
                localplayer:set_ped_config_flag(411, true)
                misc.set_player_is_in_animal_form(true)
                player.set_player_leave_ped_behind(players.user(), false)
                localplayer:finalize_head_blend()
                player.set_run_sprint_multiplier_for_player(players.user(), 1.49)
            else
                localplayer:clear_ped_stored_hat_prop()
                localplayer:clear_all_ped_props(1)
                localplayer:set_ped_config_flag(189, false)
                localplayer:set_ped_config_flag(407, false)
                player.set_player_melee_weapon_damage_modifier(players.user(), 1.0, true)
                localplayer:set_ped_max_health(328) 
                localplayer:set_entity_health(328)
                localplayer:set_ped_suffers_critical_hits(true)
                localplayer:set_disable_high_fall_death(false)
                player.set_player_max_explosive_damage(players.user(), 100.0)
                localplayer:set_ped_config_flag(410, false)
                localplayer:set_entity_alpha(255, false)
                player.set_player_vehicle_defense_modifier(players.user(), 1.0)
                player.set_player_vehicle_damage_modifier(players.user(), 1.0)
                localplayer:set_ped_config_flag(411, false)
                misc.set_player_is_in_animal_form(false)
                player.set_player_leave_ped_behind(players.user(), true)
                network.network_disable_leave_remote_ped_behind(false)
                localplayer:set_ped_component_variation(1, 0, 0, 0)
                player.set_run_sprint_multiplier_for_player(players.user(), 1.0)
            end
        end)

        self.crouch_strafe = self.root:toggle_loop(T'Crouch Strafe', {}, T'Make your player strafe a crouched position (only works in first person)', function()
            local localplayer = players.localplayer()
            localplayer:set_ped_strafe_clipset('move_ped_crouched_strafing')
        end, function()
            local localplayer = players.localplayer()
            localplayer:reset_ped_strafe_clipset()
        end)

        self.tbag = self.root:toggle_loop(T'Tbag', {}, T'Make you tbag the ground (only works in first person)', function()
            local localplayer = players.localplayer()
            localplayer:set_ped_strafe_clipset('move_ped_crouched_strafing')
            util.yield_once()
            localplayer:reset_ped_strafe_clipset()
        end, function()
            local localplayer = players.localplayer()
            localplayer:reset_ped_strafe_clipset()
        end)

        self.become_interior = self.root:toggle(T'Become Interior', {T'rbecomeinterior'}, T'Your blip on the map will show as if you are inside of an interior when you really aren\'t', function(state)
            Network.ToggleIsInInterior(state)
        end)

        self.pause_menu_active = self.root:toggle(T'Pause Menu Active', {}, T'Make it look like you\'re in the pause menu when you are not', function(state)
            Network.TogglePauseMenu(state)
        end)

        self.bypass_oncall = self.root:toggle_loop(T'Bypass On Call', {}, T'Bypass the game preventing you leave interiors due to being on call (untested because cannot seem to force the requirements to test it)', function()
            memory.write_byte(memory.script_global(Globals.BypassOnCall), -1)
        end)

        self.out_of_sight = self.root:toggle_loop(T'Out Of Sight', {}, T'Enable out of sight, what else?', function()
            Network.ToggleOutOfSight(true)
        end,
        function()
            Network.ToggleOutOfSight(false)
        end)

        self.base = memory.scan('')
        self.cops_ignore_crimes = self.root:toggle(T'Cops Ignore Crimes', {}, T'Crimes do not increase your wanted level, instead they make it disappear if you have one', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            local mapped = {
                { offset =  0x660143, modded = 0xB883C7, original = 0x1000000B883C7 }, -- mov [rbx+B8],00000000, mov [rbx+B8],00000001
                { offset =  0x660117, modded = 0xB883C7, original = 0x2000000B883C7 }, -- mov [rbx+B8],00000000, mov [rbx+B8],00000002
                { offset =  0x6600DD, modded = 0xB883C7, original = 0x3000000B883C7 }, -- mov [rbx+B8],00000000, mov [rbx+B8],00000003
                { offset =  0x6600B1, modded = 0xB883C7, original = 0x4000000B883C7 }, -- mov [rbx+B8],00000000, mov [rbx+B8],00000004
                { offset =  0x660081, modded = 0xB883C7, original = 0x5000000B883C7 }, -- mov [rbx+B8],00000000, mov [rbx+B8],00000005
                { offset =  0x660143 - 0x2, modded = 0x1A75, original = 0x1A7C }, -- jne GTA5.exe+66012D, jl GTA5.exe+66012D
                { offset =  0x660117 - 0x2, modded = 0x1A75, original = 0x1A7C }, -- jne GTA5.exe+660131, jl GTA5.exe+660131
                { offset =  0x6600DD - 0x2, modded = 0x2675, original = 0x267C }, -- jne GTA5.exe+660103, jl GTA5.exe+660103
                { offset =  0x6600B1 - 0x2, modded = 0x1875, original = 0x187C }, -- jne GTA5.exe+6600C9, jl GTA5.exe+6600C9
                { offset =  0x660081 - 0x2, modded = 0x1C75, original = 0x1C7C }, -- jne GTA5.exe+66009D, jl GTA5.exe+66009D
            }
            
            for mapped as data do memory.write(self.base + data.offset, state ? data.modded : data.original) end
        end)

        self.force_script_host = self.root:toggle_loop(T'Force Script Host', {}, T'Force you to become script host', function()
            Network.BecomeScriptHost()
        end)

        self.infinite_bst = self.root:toggle_loop(T'Infinite BST', {}, T'Infinite BST', function()
            local localplayer = players.localplayer()
            local bst = memory.script_local('freemode', Globals.BSTTimer)
            local bst_toggle = memory.script_global(Globals.InstantBST)
            local bst_local = memory.script_local('freemode', Globals.InstantBSTLocal)

            if not localplayer:is_entity_dead() and memory.read_byte(bst_toggle) == 0 then
                util.yield(700)
                memory.write_byte(bst_toggle, 1)
                memory.write_byte(bst_local, 0)
            elseif localplayer:is_entity_dead() and memory.read_byte(bst_toggle) == 1 then
                self.disable_bst:trigger()
            end

            memory.write_int(bst, network.get_network_time())
        end)

        self.infinite_bribe_authorities = self.root:toggle_loop(T'Infinite Bribe Authorities', {}, T'Makes bribe authorities last forever', function()
            local timer = memory.script_global(Globals.BribeAuthoritiesTimer)
            memory.write_int(timer, network.get_network_time())
        end)

        self.auto_restock = self.root:toggle_loop(T'Auto Restock Snacks And Armour', {}, T'Fully stocked snacks and armour in your inventory at all times', function()
            local value = math.max_int
            local char_slot = util.get_char_slot()
            stats.stat_set_int(($'MP{char_slot}_NO_BOUGHT_YUM_SNACKS'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NO_BOUGHT_HEALTH_SNACKS'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NO_BOUGHT_EPIC_SNACKS'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NUMBER_OF_CHAMP_BOUGHT'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NUMBER_OF_ORANGE_BOUGHT'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NUMBER_OF_BOURGE_BOUGHT'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NUMBER_OF_SPRUNK_BOUGHT'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_CIGARETTES_BOUGHT'):joaat(), 0)
            stats.stat_set_int(($'MP{char_slot}_MP_CHAR_ARMOUR_5_COUNT'):joaat(), value)
        end)
        self.auto_restock.value = true

        self.remove_bounty = self.bounty:action(T'Remove Bounty', {T'rsremovebounty'}, T'Removes your bounty (this function differently to Stand\'s remove bounty feature)', function()
            local pid = players.user()
            Network.SetBounty(pid, 0, false)
            Network.SetBountyReward(pid, 0)
        end)

        self.collect_bounty = self.bounty:action(T'Collect Bounty', {T'rscollectbounty'}, T'Collect your bounty', function()
            memory.write_int(memory.script_global(Globals.BountyTimer), 2880000)
            memory.write_byte(memory.script_global(Globals.BountyLocal), -1)
        end)

        self.model_custom_ped = self.model_changer:text_input(T'Custom Model', {T'rscustomped'}, T'Change your ped to something else', function(model)
            local hash = model:joaat()
            if streaming.is_model_valid(hash) then
                self:LoadAndSetModel(hash)
            else
                util.toast($'Invalid model: {model}')
            end
        end, 'A_C_Cat_01')

        self.random_ped = self.model_changer:action(T'Random Ped', {T'rsrandomped'}, T'Become a random ped', function()
            local rand = math.random(1, #PedList)
            local hash = PedList[rand]:joaat()
            self:LoadAndSetModel(hash)
        end)

        self.model_changer_list = self.model_changer:list(T'Models', {}, T'A list of possible peds in the game')

        for PedList as model do
            self.model_changer_list:action(tostring(model), {}, T'Change your model', function()
                local hash = model:joaat()
                self:LoadAndSetModel(hash)
            end)
        end

        self.play_cutscene = self.cutscene:text_input(T'Play Cutscene', {T'rplaycutscene'}, T'Play a cutscene', function(name)
            self:LoadAndPlayCutscene(name)
        end, 'abigail_mcs_1_concat')

        self.stop_cutscene = self.cutscene:action(T'Stop Cutscene', {T'rstopcutscene'}, T'Stop the cutscene you are currently playing', function()
            cutscene.stop_cutscene_immediately()
        end)

        self.cutscene_list = self.cutscene:list(T'Cutscenes', {}, T'A list of cutscenes in the game')

        for Cutscenes as scene do
            self.cutscene_list:action(tostring(scene), {}, T'Play this cutscene', function()
                self:LoadAndPlayCutscene(scene)
            end)
        end

        self.auto_bst = self.pvp_helper:toggle_loop(T'Auto BST', {T'rsautobst'}, T'Automatically use BST when a player is within 300m of you while using BST', function(state)
            local bst = memory.script_global(Globals.DisableBST)
            local player_coords = players.get_position(players.user())
            local localplayer = players.localplayer()
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) and pid ~= players.user() then
                    local player_ped = player.get_player_ped(pid)
                    local ptr = entities.handle_to_pointer(player_ped)
                    local coords = entity.get_offset_from_entity_in_world_coords(player_ped, 0.0, 0.0, 0.0)
                    if ptr ~= 0 and player_coords:distance(coords) < 300.0 then
                        local player_info = entities.get_player_info(ptr)
                        if player_info then
                            local weapon_defense = memory.read_float(player_info + 0x0D60)
                            if weapon_defense < 0.99 and not localplayer:is_entity_dead() then
                                local value = memory.read_byte(bst)
                                if memory.read_byte(bst) == 0 then
                                    self.instant_bst:trigger()
                                    util.yield(50)
                                    util.toast(players.get_name(pid) .. T' is using BST, enabling BST to counter it')
                                end
                            end
                        end
                    end
                end
            end
        end)

        self.auto_swap_ammo = self.pvp_helper:toggle_loop(T'Auto Swap Special Ammo', {}, T'Automatically swaps between AP, HP and FMJ rounds depending on whether the target is a vehicle or has armour', function()
            local localplayer = players.localplayer()
            if localplayer.ptr == 0 then return end
            local weapon_manager = entities.get_weapon_manager(localplayer.ptr)
            local ammo = 0 -- none
            if weapon_manager ~= 0 then
                local current_weapon = memory.read_long(weapon_manager + 0x0020)
                if current_weapon ~= 0 then
                    local ammo_info = memory.read_long(current_weapon + 0x0060)
                    if ammo_info ~= 0 then
                        if player.get_entity_player_is_free_aiming_at(players.user(), self.entity_aiming_at) then
                            local ent = memory.read_int(self.entity_aiming_at)
                            if ent ~= 0 then
                                local ptr = entities.handle_to_pointer(ent)
                                local armor = memory.read_float(ptr + 0x150C)
                                if armor > 0 then
                                    memory.write_int(ammo_info + 0x003C, 1)
                                else
                                    memory.write_int(ammo_info + 0x003C, 4)
                                end
                            end
                        end
                    end
                end
            end
        end)
        self.auto_swap_ammo.value = true

        self.hide_m1 = self.hiding:toggle(T'Hide Method 1', {T'rsdisappear'}, T'Just a shortcut for enabling stealth mode and invisibility', function(state)
            self.stealth_mode.value = state
            self.invisibility.value = state
        end)

        self.hide_m2 = self.hiding:toggle(T'Hide Method 2', {T'rsdisappear1'}, T'Just a shortcut for enabling interior state spoofing and invisibility', function(state)
            self.spoof_interior_state.value = state
            self.invisibility.value = state
        end)

        self.demi_god = self.root:toggle(T'Demi God', {}, T'Become a demi god, this will protect you from bullets, collisions and melee attacks (ONLY AGAINST PEDS, PLAYERS CAN STILL CAUSE YOU DAMAGE)', function(state)
            local ptr = entities.handle_to_pointer(players.user_ped())
            local addr = ptr + 0x188
            memory.write_int(addr, memory.bits:setbool(memory.read_int(addr), 1 << 10, state))
        end)

        self.root:divider('')
        self.press_me = self.root:action(T'Press Me', {}, T'By pressing this button you have agreed to pay the price for your wrong doings within the world of GTA Online, this will rid you of your mk2 and money as retribution for the sins of owning an oppressor mk2 and from here on out you declare that you will never again buy another mk2, have a nice day!', function()
            local ops = {}
            local wallet = Network.GetWallet()
            local bank = Network.GetBank()
            local bitfield = pluto_new Bitfield()
            local anim_args = {self.simages .. '/Jesus.png', 1.7, 0.19}

            Network.TransferToBank()
            repeat
                util.yield_once()
                wallet = Network.GetWallet()
            until wallet == 0

            for slot = 0, 415 do
                local data = memory.script_global(Globals:PersonalVehicleData(slot))
                local hash = memory.read_int(data + VehicleData.VehicleModel)
                local addr = data + VehicleData.VehicleBitfield
                
                local value = memory.read_int(addr)
                value = memory.bits:clear(value, VehicleBitfield.Request)
                memory.write_int(addr, value)

                if hash == ('oppressor2'):joaat() then
                    table.insert(ops, data)
                end
            end

            if #ops <= 0 then
                util.toast('You do not own an oppressor, you are free to go!')
                S:PlayAnimation(table.unpack(anim_args))
                util.stop_thread()
            else
                for ops as broomstick do
                    local addr = broomstick + VehicleData.VehicleBitfield
                    bitfield.addr = addr
                    bitfield.value = memory.read_int(addr)

                    bitfield:Clear(VehicleBitfield.Request)
                    util.yield_once()
                    bitfield:Clear(Masks.VehicleClearAllBits)
                    util.yield(1000)
                    bitfield:Set(VehicleBitfield.Request)
                end

                if bank > 0 then
                    memory.write_byte(memory.script_global(Globals.SinRemover), bank)
                    repeat
                        util.yield_once()
                        bank = Network.GetBank()
                        memory.write_byte(memory.script_global(Globals.InsufficientFunds), 1)
                    until bank == 0
                    memory.write_byte(memory.script_global(Globals.InsufficientFunds), 0)
                    util.yield(1000)
                    S:PlayAnimation(table.unpack(anim_args))
                end
            end
        end)

        self.root:action(T'Max Health', {T'rsmaxhealth'}, T'Set your health to max', function()
            local localplayer = players.localplayer()
            localplayer:set_entity_health(localplayer:get_entity_max_health())
        end)
    
        self.root:action(T'Max Armour', {T'rsmaxarmour'}, T'Set your armour to max', function()
            local localplayer = players.localplayer()
            localplayer:set_ped_armour(player.get_player_max_armour(players.user()))
        end)

        self.root:action(T'Infinite Snacks And Armor', {T'rsinfiniteinventory'}, T'Gives you infinite snacks and armor in your inventory', function()
            local value = math.max_int
            local char_slot = util.get_char_slot()
            
            stats.stat_set_int(($'MP{char_slot}_NO_BOUGHT_YUM_SNACKS'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NO_BOUGHT_HEALTH_SNACKS'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NO_BOUGHT_EPIC_SNACKS'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NUMBER_OF_CHAMP_BOUGHT'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NUMBER_OF_ORANGE_BOUGHT'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NUMBER_OF_BOURGE_BOUGHT'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_NUMBER_OF_SPRUNK_BOUGHT'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_CIGARETTES_BOUGHT'):joaat(), 0)
            stats.stat_set_int(($'MP{char_slot}_MP_CHAR_ARMOUR_1_COUNT'):joaat(), 0)
            stats.stat_set_int(($'MP{char_slot}_MP_CHAR_ARMOUR_2_COUNT'):joaat(), 0)
            stats.stat_set_int(($'MP{char_slot}_MP_CHAR_ARMOUR_3_COUNT'):joaat(), 0)
            stats.stat_set_int(($'MP{char_slot}_MP_CHAR_ARMOUR_4_COUNT'):joaat(), 0)
            stats.stat_set_int(($'MP{char_slot}_MP_CHAR_ARMOUR_5_COUNT'):joaat(), value)
            stats.stat_set_int(($'MP{char_slot}_BREATHING_APPAR_BOUGHT'):joaat(), value)
        end)
        
        self.instant_bst = self.root:action(T'Instant BST', {T'rinstantbst'}, T'Instantly reap the reward of bst', function()
            local bst_local = memory.script_local('freemode', Globals.InstantBSTLocal)
            local bst = memory.script_global(Globals.InstantBST)

            if bst_local ~= 0 then
                memory.write_byte(bst, 1)
                memory.write_byte(bst_local, 0)
            end
        end)

        self.teleport_hospital = self.root:action(T'Teleport To Nearest Hospital', {T'rstpnearbyhospital'}, T'Teleport you to the nearest hospital as if someone just used the orbital cannon on you', function()
            local tp = memory.script_global(Globals.TeleportNearestHospital)
            memory.write_byte(tp, 1)
            util.yield(2000)
            memory.write_byte(tp, 0)
        end)

        self.equip_ballistic_armor = self.root:action(T'Equip Ballistic Armor', {T'rsequiparmor'}, T'Equip ballistic armor', function()
            local armor = memory.script_global(Globals.EquipBallisticArmor)
            if memory.read_byte(armor) == 0 then
                memory.write_byte(armor, 1)
            end
        end)

        self.off_the_radar = self.root:action(T'Off The Radar', {T'rsofftheradar'}, T'Gives you off the radar', function()
            Network.ToggleOffTheRadar(true, false)
        end)

        self.ghost_org = self.root:action(T'Ghost Organisation', {T'rsghostorg'}, T'Gives you ghost organisation', function()
            Network.ToggleOffTheRadar(true, true)
        end)

        self.reset_otr_timer = self.root:action(T'Reset OTR/Ghost Org Timer', {T'rresetotrghostorgtimer'}, T'Reset the timer for off the radar/ghost org', function()
            memory.write_int(memory.script_global(Globals.OtrGhostTimer), network.get_network_time())
        end)
    
        self.disable_otr = self.root:action(T'Disable Ghost Org / OTR', {T'rstophiding'}, T'Disable off the radar / ghost org', function()
            Network.ToggleOffTheRadar(false, false)
        end)

        self.disable_blindeye = self.root:action(T'Disable Blind Eye', {T'stopblindeye'}, T'Disable the cops turning a blind eye to you', function()
            memory.write_byte(memory.script_global(Globals.BribeAuthorities), 0)
        end)

        self.disable_bst = self.root:action(T'Disable BST', {T'disablebst'}, T'Disable bst', function()
            local bst = memory.script_global(Globals.DisableBST)
            local value = memory.read_byte(bst)
            if (memory.bits:check(value, 1 << 0)) then
                memory.write_byte(bst, memory.bits:set(value, 0b00000111))
            end
        end)

        self.root:action(T'Suicide', {T'rssuicide'}, T'Improved version of Stand\'s suicide function', function()
            local localplayer = players.localplayer()
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) and pid ~= players.user() then
                    local ped = player.get_player_ped(pid)
                    localplayer:clear_entity_last_damage_entity(ped)
                end
            end
            util.yield_once()
            localplayer:set_entity_health(0)
        end)
    end

    function SuperPunch(exp_type=17, damage=1000, is_audible=false, is_invisible=true, camera_shake=0.0)
        local localplayer = players.localplayer()
        if localplayer:get_selected_ped_weapon() == ('WEAPON_UNARMED'):joaat() then
            if localplayer:get_ped_last_weapon_impact_coord(self.impact_coords) then
                localplayer:set_entity_proofs(table.unpack(self.ent_proofs_all))
                localplayer:add_owned_explosion(self.impact_coords.x, self.impact_coords.y, self.impact_coords.z, exp_type, damage, is_audible, is_invisible, camera_shake)
                util.yield(500)
                localplayer:set_entity_proofs(table.unpack(self.ent_proofs_off))                
            end
        end
    end

    function LoadAndSetModel(hash)
        local state, err = pcall(util.request_model, hash)
        if not state then
            util.toast($'Error loading model: {err}')
            return
        else
            player.set_player_model(players.user(), hash)
            streaming.set_model_as_no_longer_needed(hash)
        end
    end

    function LoadAndPlayCutscene(name)
        cutscene.request_cutscene(name, 8)
        repeat
            util.yield_once()
        until cutscene.has_cutscene_loaded(name)
        cutscene.start_cutscene(name)
    end
end

return SelfOptions