local T, S = require('translations'), require('shared')
local Globals = require('script_globals')
local Weapons = require('weapons_list')

pluto_class GunVan
    function __construct(root)
        self.gunvan_root = root:list(T'Gun Van', {T'rgunvan'}, '')
        local weapons_tbl = S:SortTable(Weapons:AsTable(), |a, b| -> a < b)

        self.gunvan_weapons = self.gunvan_root:list(T'Weapons', {T'gunvanweapons'}, T'Gun Van Weapons', nil, nil, function()
            local start, finish = Globals.GunVanWeaponsStart, Globals.GunVanWeaponsEnd
            if #self.gunvan_weapons:getChildren() == 0 then
                for index = start, finish do
                    local weapon_index = memory.script_global(262145 + index)
                    local name = util.reverse_joaat(memory.read_int(weapon_index))
                    local slot = self.gunvan_weapons:list(name, {}, '')

                    slot:list_action(T'Weapon', {}, T'Weapon to change to', weapons_tbl, function(index)
                        local weapon = weapons_tbl[index]
                        local hash = Weapons:FindHash(weapon)
                        local name = util.reverse_joaat(hash)
                        memory.write_int(weapon_index, hash)
                        slot.menu_name = name
                    end)
                end
            else
                for index, child in pairs(self.gunvan_weapons:getChildren()) do
                    if child:isValid() then
                        local weapon_index = memory.script_global((262145 + (start + index)) - 1)
                        local name = util.reverse_joaat(memory.read_int(weapon_index))
                        child.menu_name = name
                    end
                end
            end
        end)

        self.gunvan_throwables = self.gunvan_root:list(T'Throwables', {T'gunvanthrowables'}, T'Gun Van Throwables', nil, nil, function()
            local start, finish = Globals.GunVanThrowablesStart, Globals.GunVanThrowablesEnd
            if #self.gunvan_throwables:getChildren() == 0 then
                for index = start, finish do
                    local weapon_index = memory.script_global(262145 + index)
                    local name = util.reverse_joaat(memory.read_int(weapon_index))
                    local slot = self.gunvan_throwables:list(name, {}, '')

                    slot:list_action(T'Weapon', {}, T'Weapon to change to', weapons_tbl, function(index)
                        local weapon = weapons_tbl[index]
                        local hash = Weapons:FindHash(weapon)
                        local name = util.reverse_joaat(hash)
                        memory.write_int(weapon_index, hash)
                        slot.menu_name = name
                    end)
                end
            else
                for index, child in pairs(self.gunvan_throwables:getChildren()) do
                    if child:isValid() then
                        local weapon_index = memory.script_global((262145 + (start + index)) - 1)
                        local name = util.reverse_joaat(memory.read_int(weapon_index))
                        child.menu_name = name
                    end
                end
            end
        end)

        self.gunvan_root:divider('')
        self.gunvan_pos = self.gunvan_root:list(T'Position', {}, T'Gun Van position')
        self.gunvan_root:toggle(T'Remove Proximity', {}, T'Remove proximity radius so the gun van will appear on your map regardless of where you are', function(state)
            local proximity = memory.script_global(Globals.GunVanProximity)
            memory.write_float(proximity, state ? math.max_float : 500.0)
        end)

        local positions = {'None', 'Default', 'You'}
        self.gunvan_pos:list_select(T'Location', {}, T'Change gun van location', positions, 1, function(index)
            if not SCRIPT_CAN_CONTINUE then return end
            local choice = positions[index]
            local coords = memory.script_global(Globals.GunVanPositionVectorStart)

            switch choice do
                case 'None':
                    break
                case 'Default':
                    for i = 1, 3 do memory.write_float(coords + (i << 3), 0.0) end
                    break
                case 'You':
                    local pos = players.localplayer():get_offset_from_entity_in_world_coords(0.0, 8.0, 0.0)
                    memory.write_float(coords, pos.x)
                    memory.write_float(coords + 0x8, pos.y)
                    memory.write_float(coords + 0x10, pos.z)
                    break
            end
        end)
    end
end

return GunVan