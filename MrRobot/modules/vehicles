local root = menu.my_root()
local shadow_root = menu.shadow_root()
local T = require('translations')
local Bitfield = require('bitfield')
local Shared = require('shared')
local vehmodels = require('vehicle_models')
local PLAYER_ID = Shared.PLAYER_ID

local ScriptGlobal = Shared.ScriptGlobal
local PV_SLOT <constexpr> = 2359296 + 1 + (0 * 5568) + 681 + 2 -- Global_2359296[func_876() /*5568*/].f_681.f_2

--[[local CARMOD_CAP_VAL_SELL_CAP <constexpr> = 262145 + 175 -- 50000 default
local PURCHASED_CAR_SALE_MAX_CAP <constexpr> = 262145 + 4774 -- 1000000 default
local SELLING_PURCHASED_PERSONAL_VEHICLE_CAP <constexpr> = 262145 + 7078 -- 1000000 default
local SELLING_STOLEN_PERSONAL_VEHICLE_CAP <constexpr> = 262145 + 7077 -- 1000000 default
local SELLING_STOLEN_VEHICLE_CAP <constexpr> = 262145 + 7076 -- 1000000 default
local G_29D821DD <constexpr> = 262145 + 20169 -- default 0
local DAILY_CAP <constexpr> = 262145 + 7069 -- default 1]]

local TUNABLE_BASE <const> = ScriptGlobal(262145)

enum Offsets begin
	VehicleBitfield = 0x338,
	LicensePlateType = 0x0,
	LicensePlate = 0x8,
	VehicleModel = 0x210,
	VehicleRadio = 0x3D0,
	VehicleAerials = 0x1A8,
	VehicleArmour = 0xD0,
	VehicleArmourPlatingPrimaryWeapon = 0x78,
	VehicleBrakes = 0xB0,
	VehicleFrontBumper = 0x58,
	VehicleRearBumper = 0x60,
	VehicleEngine = 0xA8,
	VehicleCanards = 0x80,
	VehicleHorn = 0xC0,
	VehicleImaniTech = 0x1B0,
	VehicleHeadLights = 0x100,
	VehicleNeonLayout = 0x268,
	VehicleNeonColourRed = 0x250,
	VehicleNeonColourGreen = 0x258,
	VehicleNeonColourBlue = 0x260,
	VehicleLivery = 0x1D0,
	VehicleMirrors = 0x90,
	VehicleRoofSecondaryWeapon = 0xA0,
	VehicleSkirts = 0x68,
	VehicleLouvers = 0x80,
	VehiclePrimaryColourRed = 0x238,
	VehiclePrimaryColourGreen = 0x240,
	VehiclePrimaryColourBlue = 0x248,
	VehiclePrimaryColourToggle = 0x268,
	VehiclePrimaryColour = 0x28,
	VehicleSecondaryColour = 0x30,
	VehicleTrimColour = 0x308,
	VehicleCrewEmblem = 0x338,
	VehicleSunStrips = 0xA0,
	VehicleSpoiler = 0x50,
	VehicleSuspension = 0xC8,
	VehicleTrunks = 0x88,
	VehicleTransmission = 0xB8,
	VehicleTurbo = 0xE0,
	VehicleWheelType = 0x108,
	VehicleRimType = 0x230,
	VehicleWheelColour = 0x40,
	VehicleTiresDesign = 0x1E0,
	VehicleTiresDesign1 = 0xF0,
	VehicleBulletProofTires = 0x260,
	VehicleBulletProofTiresToggle = 0x330,
	VehicleTiresSmokeColourRed = 0x1F0,
	VehicleTiresSmokeColourGreen = 0x1F8,
	VehicleTriesSmokeColourBlue = 0x200,
	VehicleWindows = 0x200
end

local vehicle_classes = {
    [0] = 'Compacts',
    [1] = 'Sedans',
    [2] = 'SUVs',
    [3] = 'Coupes',
    [4] = 'Muscle',
    [5] = 'Sports Classics',
    [6] = 'Sports',
    [7] = 'Super',
    [8] = 'Motorcycles',
    [9] = 'Off-road',
    [10] = 'Industrial',
    [11] = 'Utility',
    [12] = 'Vans',
    [13] = 'Cycles',
    [14] = 'Boats',
    [15] = 'Helicopters',
    [16] = 'Planes',
    [17] = 'Service',
    [18] = 'Emergency',
    [19] = 'Military',
    [20] = 'Commercial',
    [21] = 'Trains',
}

local neon_layouts = { 'None', 'Front', 'Back', 'Sides', 'Front and Back', 'Front and Sides', 'Back and Sides', 'All' }
local imani_tech_upgrades = { 'None', 'Remote Control Unit', 'Missile Lock-On Jammer' }
local wheel_type = {
    'Sport',
    'Muscle',
    'Lowrider',
    'SUV',
    'Offroad',
    'Tuner',
    'NULL',
    'High End',
    'NULL',
    'NULL',
    'NULL',
    'Street',
    'Track'
}
local wheel_design = { 'None', 'Custom Tires' }
local window_tints = { 'None', 'Limo', 'Dark Smoke','Light Smoke' }

--[[void]] local function SetVehicleDoorsShut(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] closeInstantly)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(closeInstantly)native_invoker.end_call_2(0x781B3D62BB013EF5)end
--[[int]] local function DecorGetInt(--[[Entity (int)]] entity,--[[string]] propertyName)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_string(propertyName)native_invoker.end_call_2(0xA06C969B02A97298)return native_invoker.get_return_value_int()end
--[[Vehicle (int)]] local function GetVehiclePedIsIn(--[[Ped (int)]] ped,--[[BOOL (bool)]] includeLastVehicle)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(includeLastVehicle)native_invoker.end_call_2(0x9A9112A0FE9A4713)return native_invoker.get_return_value_int()end
--[[Hash (int)]] local function GetEntityModel(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0x9F47B058362C84B5)return native_invoker.get_return_value_int()end
--[[void]] local function ClearVehiclePhoneExplosiveDevice()native_invoker.begin_call()native_invoker.end_call_2(0xAA3F739ABDDCF21F)end
--[[BOOL (bool)]] local function DecorSetInt(--[[Entity (int)]] entity,--[[string]] propertyName,--[[int]] value)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_string(propertyName)native_invoker.push_arg_int(value)native_invoker.end_call_2(0x0CE3AA5E1CA19E10)return native_invoker.get_return_value_bool()end
--[[void]] local function AddVehiclePhoneExplosiveDevice(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x99AD4CCCB128CBC9)end
--[[Vehicle (int)]] local function NetToVeh(--[[int]] netHandle)native_invoker.begin_call()native_invoker.push_arg_int(netHandle)native_invoker.end_call_2(0x367B936610BA360C)return native_invoker.get_return_value_int()end
--[[void]] local function DetonateVehiclePhoneExplosiveDevice()native_invoker.begin_call()native_invoker.end_call_2(0xEF49CF0270307CBE)end
--[[BOOL (bool)]] local function IsPedInAnyVehicle(--[[Ped (int)]] ped,--[[BOOL (bool)]] atGetIn)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(atGetIn)native_invoker.end_call_2(0x997ABD671D25CA0B)return native_invoker.get_return_value_bool()end
--[[Ped (int)]] local function GetPlayerPed(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0x50FAC3A3E030A6E1)return native_invoker.get_return_value_int()end
--[[Hash (int)]] local function NetworkHashFromPlayerHandle(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0xBC1D768F2F5D6C05)return native_invoker.get_return_value_int()end
--[[BOOL (bool)]] local function HasVehiclePhoneExplosiveDevice()native_invoker.begin_call()native_invoker.end_call_2(0x6ADAABD3068C5235)return native_invoker.get_return_value_bool()end
--[[void]] local function SetVehicleDoorsLockedForPlayer(--[[Vehicle (int)]] vehicle,--[[Player (int)]] player,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(player)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x517AAF684BB50CD1)end
--[[void]] local function SetVehicleIsStolen(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] isStolen)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(isStolen)native_invoker.end_call_2(0x67B2C79AA7FF5738)end
--[[Interior (int)]] local function GetInteriorFromEntity(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0x2107BA504071A6BB)return native_invoker.get_return_value_int()end
--[[BOOL (bool)]] local function StatSetInt(--[[Hash (int)]] statName,--[[int]] value,--[[BOOL (bool)]] save)native_invoker.begin_call()native_invoker.push_arg_int(statName)native_invoker.push_arg_int(value)native_invoker.push_arg_bool(save)native_invoker.end_call_2(0xB3271D7AB655B441)return native_invoker.get_return_value_bool()end
--[[Vector3 (vector3)]] local function GetEntityCoords(--[[Entity (int)]] entity,--[[BOOL (bool)]] alive)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(alive)native_invoker.end_call_2(0x3FEF770D40960D5A)return native_invoker.get_return_value_vector3()end
--[[float]] local function GetEntityHeading(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0xE83D4F9BA2A38914)return native_invoker.get_return_value_float()end
--[[Vector3 (vector3)]] local function GetOffsetFromCoordAndHeadingInWorldCoords(--[[float]] xPos,--[[float]] yPos,--[[float]] zPos,--[[float]] heading,--[[float]] xOffset,--[[float]] yOffset,--[[float]] zOffset)native_invoker.begin_call()native_invoker.push_arg_float(xPos)native_invoker.push_arg_float(yPos)native_invoker.push_arg_float(zPos)native_invoker.push_arg_float(heading)native_invoker.push_arg_float(xOffset)native_invoker.push_arg_float(yOffset)native_invoker.push_arg_float(zOffset)native_invoker.end_call_2(0x163E252DE035A133)return native_invoker.get_return_value_vector3()end
--[[void]] local function ShootSingleBulletBetweenCoordsIgnoreEntityNew(--[[float]] x1,--[[float]] y1,--[[float]] z1,--[[float]] x2,--[[float]] y2,--[[float]] z2,--[[int]] damage,--[[BOOL (bool)]] p7,--[[Hash (int)]] weaponHash,--[[Ped (int)]] ownerPed,--[[BOOL (bool)]] isAudible,--[[BOOL (bool)]] isInvisible,--[[float]] speed,--[[Entity (int)]] entity,--[[BOOL (bool)]] p14,--[[BOOL (bool)]] p15,--[[Entity (int)]] targetEntity,--[[BOOL (bool)]] p17,--[[Any (int)]] p18,--[[Any (int)]] p19,--[[Any (int)]] p20)native_invoker.begin_call()native_invoker.push_arg_float(x1)native_invoker.push_arg_float(y1)native_invoker.push_arg_float(z1)native_invoker.push_arg_float(x2)native_invoker.push_arg_float(y2)native_invoker.push_arg_float(z2)native_invoker.push_arg_int(damage)native_invoker.push_arg_bool(p7)native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(ownerPed)native_invoker.push_arg_bool(isAudible)native_invoker.push_arg_bool(isInvisible)native_invoker.push_arg_float(speed)native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(p14)native_invoker.push_arg_bool(p15)native_invoker.push_arg_int(targetEntity)native_invoker.push_arg_bool(p17)native_invoker.push_arg_int(p18)native_invoker.push_arg_int(p19)native_invoker.push_arg_int(p20)native_invoker.end_call_2(0xBFE5756E7407064A)end
--[[void]] local function PlaySoundFromEntity(--[[int]] soundId,--[[string]] audioName,--[[Entity (int)]] entity,--[[string]] audioRef,--[[BOOL (bool)]] isNetwork,--[[Any (int)]] p5)native_invoker.begin_call()native_invoker.push_arg_int(soundId)native_invoker.push_arg_string(audioName)native_invoker.push_arg_int(entity)native_invoker.push_arg_string(audioRef)native_invoker.push_arg_bool(isNetwork)native_invoker.push_arg_int(p5)native_invoker.end_call_2(0xE65F427EB70AB1ED)end
--[[BOOL (bool)]] local function StartParticleFxNonLoopedOnEntity(--[[string]] effectName,--[[Entity (int)]] entity,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ,--[[float]] rotX,--[[float]] rotY,--[[float]] rotZ,--[[float]] scale,--[[BOOL (bool)]] axisX,--[[BOOL (bool)]] axisY,--[[BOOL (bool)]] axisZ)native_invoker.begin_call()native_invoker.push_arg_string(effectName)native_invoker.push_arg_int(entity)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.push_arg_float(rotX)native_invoker.push_arg_float(rotY)native_invoker.push_arg_float(rotZ)native_invoker.push_arg_float(scale)native_invoker.push_arg_bool(axisX)native_invoker.push_arg_bool(axisY)native_invoker.push_arg_bool(axisZ)native_invoker.end_call_2(0x0D53A3B8DA0809D2)return native_invoker.get_return_value_bool()end
--[[void]] local function SetVehicleAllowHomingMissleLockonSynced(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] canBeLockedOn,--[[BOOL (bool)]] p2)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(canBeLockedOn)native_invoker.push_arg_bool(p2)native_invoker.end_call_2(0x1DDA078D12879EEE)end
--[[BOOL (bool)]] local function StartNetworkedParticleFxNonLoopedOnEntity(--[[string]] effectName,--[[Entity (int)]] entity,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ,--[[float]] rotX,--[[float]] rotY,--[[float]] rotZ,--[[float]] scale,--[[BOOL (bool)]] axisX,--[[BOOL (bool)]] axisY,--[[BOOL (bool)]] axisZ)native_invoker.begin_call()native_invoker.push_arg_string(effectName)native_invoker.push_arg_int(entity)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.push_arg_float(rotX)native_invoker.push_arg_float(rotY)native_invoker.push_arg_float(rotZ)native_invoker.push_arg_float(scale)native_invoker.push_arg_bool(axisX)native_invoker.push_arg_bool(axisY)native_invoker.push_arg_bool(axisZ)native_invoker.end_call_2(0xC95EB1DB6E92113D)return native_invoker.get_return_value_bool()end
--[[void]] local function SetVehicleCountermeasureAmmo(--[[Vehicle (int)]] vehicle,--[[int]] counterMeasureCount)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(counterMeasureCount)native_invoker.end_call_2(0x9BDA23BF666F0855)end
--[[BOOL (bool)]] local function IsPlayerPressingHorn(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0xFA1E2BF8B10598F9)return native_invoker.get_return_value_bool()end
--[[void]] local function SetVehicleForwardSpeed(--[[Vehicle (int)]] vehicle,--[[float]] speed)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(speed)native_invoker.end_call_2(0xAB54A438726D25D5)end
--[[float]] local function GetEntitySpeed(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0xD5037BA82E12416F)return native_invoker.get_return_value_float()end
--[[void]] local function SetVehicleHandlingOverride(--[[Vehicle (int)]] vehicle,--[[Hash (int)]] hash)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(hash)native_invoker.end_call_2(0x10655FAB9915623D)end
--[[void]] local function SetOverrideNitrousLevel(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle,--[[float]] level,--[[float]] power,--[[float]] rechargeTime,--[[BOOL (bool)]] disableSound)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.push_arg_float(level)native_invoker.push_arg_float(power)native_invoker.push_arg_float(rechargeTime)native_invoker.push_arg_bool(disableSound)native_invoker.end_call_2(0xC8E9B6B71B8E660D)end
--[[void]] local function SetSubmarineCrushDepths(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] p1,--[[float]] depth1,--[[float]] depth2,--[[float]] depth3)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(p1)native_invoker.push_arg_float(depth1)native_invoker.push_arg_float(depth2)native_invoker.push_arg_float(depth3)native_invoker.end_call_2(0xC59872A5134879C7)end
--[[void]] local function SetVehicleKersAllowed(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x99C82F8A139F3E4E)end
--[[void]] local function SetVehicleNumberPlateText(--[[Vehicle (int)]] vehicle,--[[string]] plateText)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_string(plateText)native_invoker.end_call_2(0x95A88F0B409CDA47)end
--[[void]] local function SetDriftTyres(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x5AC79C98C5C17F05)end
--[[void]] local function SetVehicleReduceGrip(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x222FF6A823D122E2)end
--[[void]] local function SetVehicleReduceGripLevel(--[[Vehicle (int)]] vehicle,--[[int]] val)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(val)native_invoker.end_call_2(0x6DEE944E1EE90CFB)end
--[[void]] local function SetEntityHeading(--[[Entity (int)]] entity,--[[float]] heading)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(heading)native_invoker.end_call_2(0x8E2530AA8ADA980E)end
--[[void]] local function SetEntityRotation(--[[Entity (int)]] entity,--[[float]] pitch,--[[float]] roll,--[[float]] yaw,--[[int]] rotationOrder,--[[BOOL (bool)]] p5)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(pitch)native_invoker.push_arg_float(roll)native_invoker.push_arg_float(yaw)native_invoker.push_arg_int(rotationOrder)native_invoker.push_arg_bool(p5)native_invoker.end_call_2(0x8524A8B0171D5E07)end
--[[Vector3 (vector3)]] local function GetEntityRotation(--[[Entity (int)]] entity,--[[int]] rotationOrder)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_int(rotationOrder)native_invoker.end_call_2(0xAFBD61CC738D9EB9)return native_invoker.get_return_value_vector3()end
--[[void]] local function SetVehicleLightMultiplier(--[[Vehicle (int)]] vehicle,--[[float]] multiplier)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(multiplier)native_invoker.end_call_2(0xB385454F8791F57C)end
--[[void]] local function SetVehicleInteriorlight(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0xBC2042F090AF6AD3)end
--[[void]] local function SetVehicleForceInteriorlight(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x8821196D91FA2DE5)end
--[[void]] local function PopOutVehicleWindscreen(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x6D645D59FB5F5AD3)end
--[[void]] local function PopOffVehicleRoofWithImpulse(--[[Vehicle (int)]] vehicle,--[[float]] x,--[[float]] y,--[[float]] z)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(x)native_invoker.push_arg_float(y)native_invoker.push_arg_float(z)native_invoker.end_call_2(0xE38CB9D7D39FDBCC)end
--[[void]] local function SmashVehicleWindow(--[[Vehicle (int)]] vehicle,--[[int]] windowIndex)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(windowIndex)native_invoker.end_call_2(0x9E5B5E4D2CCD2259)end
--[[void]] local function RollDownWindows(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x85796B0549DDE156)end
--[[void]] local function RollUpWindow(--[[Vehicle (int)]] vehicle,--[[int]] windowIndex)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(windowIndex)native_invoker.end_call_2(0x602E548F46E24D59)end
--[[void]] local function FixVehicleWindow(--[[Vehicle (int)]] vehicle,--[[int]] windowIndex)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(windowIndex)native_invoker.end_call_2(0x772282EBEB95E682)end
--[[void]] local function RemoveVehicleWindow(--[[Vehicle (int)]] vehicle,--[[int]] windowIndex)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(windowIndex)native_invoker.end_call_2(0xA711568EEDB43069)end
--[[void]] local function SetVehicleHasUnbreakableLights(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x1AA8A837D2169D94)end
--[[void]] local function SetVehicleFixed(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x115722B1B9C14C1C)end
--[[void]] local function SetVehicleDeformationFixed(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x953DA1E1B12C0491)end
--[[void]] local function SetVehicleMaxSpeed(--[[Vehicle (int)]] vehicle,--[[float]] speed)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(speed)native_invoker.end_call_2(0xBAA045B4E42F3C06)end
--[[void]] local function SetEntityMaxSpeed(--[[Entity (int)]] entity,--[[float]] speed)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(speed)native_invoker.end_call_2(0x0E46A3FCBDE2A1B1)end
--[[void]] local function SetVehicleCheatPowerIncrease(--[[Vehicle (int)]] vehicle,--[[float]] value)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(value)native_invoker.end_call_2(0xB59E4BD37AE292DB)end
--[[void]] local function SetInvertVehicleControls(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] state)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(state)native_invoker.end_call_2(0x5B91B229243351A8)end
--[[Vehicle (int)]] local function NetToVeh(--[[int]] netHandle)native_invoker.begin_call()native_invoker.push_arg_int(netHandle)native_invoker.end_call_2(0x367B936610BA360C)return native_invoker.get_return_value_int()end
--[[BOOL (bool)]] local function DecorRemove(--[[Entity (int)]] entity,--[[string]] propertyName)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_string(propertyName)native_invoker.end_call_2(0x00EE9F297C738720)return native_invoker.get_return_value_bool()end
--[[Vector3 (vector3)]] local function GetOffsetFromEntityInWorldCoords(--[[Entity (int)]] entity,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.end_call_2(0x1899F328B0E12848)return native_invoker.get_return_value_vector3()end
--[[BOOL (bool)]] local function IsEntityVisible(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0x47D6F43D77935C75)return native_invoker.get_return_value_bool()end

-- other
local ReadInt = memory.read_int
local ReadShort = memory.read_short
local ReadByte = memory.read_byte
local ReadFloat = memory.read_float
local ReadString = memory.read_string
local WriteInt = memory.write_int
local WriteShort = memory.write_short
local WriteByte = memory.write_byte
local WriteFloat = memory.write_float
local WriteString = memory.write_string
local Alloc = memory.alloc
local ref_by_rel_path = menu.ref_by_rel_path
local handle_to_pointer = entities.handle_to_pointer
local ref_by_rel_path = menu.ref_by_rel_path
local create_tick_handler = util.create_tick_handler
local get_current_menu_list = menu.get_current_menu_list
local reverse_joaat = util.reverse_joaat
local joaat = util.joaat
local get_label_text = util.get_label_text
local is_key_down = util.is_key_down
local get_all_vehicles_as_pointers = entities.get_all_vehicles_as_pointers
local get_all_objects_as_pointers = entities.get_all_objects_as_pointers
local get_model_hash = entities.get_model_hash
local get_position = entities.get_position
local pointer_to_handle = entities.pointer_to_handle
local delete_by_pointer = entities.delete_by_pointer
local get_user_vehicle_as_pointer = entities.get_user_vehicle_as_pointer
local vehicle_get_handling = entities.vehicle_get_handling
local handling_get_subhandling = entities.handling_get_subhandling
local set_can_migrate = entities.set_can_migrate

local GetPlayerPed = Shared.GetPlayerPed

local function GetNeonLayout(slot)
    local data <const> = ScriptGlobal(1586468 + 1 + (slot * 142))
    local layout <const> = ReadInt(data + Offsets.VehicleNeonLayout + 1) >> 16
    
    return ({
        [0] = 1,
        [0x10] = 2,
        [0x20] = 3,
        [0x1C] = 4,
        [0x30] = 5,
        [0xD0] = 6,
        [0xE0] = 7,
        [0xF0] = 8
    })[layout] or 1
end

local function GetNeonColour(slot)
    local data <const> = ScriptGlobal(1586468 + 1 + (slot * 142)) -- Global_1586468[func_1155() /*142*/].f_103

    return {
        r = ReadByte(data + Offsets.VehicleNeonColourRed) / 0xFF,
        g = ReadByte(data + Offsets.VehicleNeonColourGreen) / 0xFF,
        b = ReadByte(data + Offsets.VehicleNeonColourBlue) / 0xFF,
        a = 1
    }
end

local function ToggleOwnerCheck(state)
    WriteByte(ScriptGlobal(78558), state and 1 or 0) -- Global_78558
end

local function GetPersonalVehicleData(slot=0)
    local pv_slot = ScriptGlobal(PV_SLOT)
    slot = slot ?? ReadInt(ScriptGlobal(PV_SLOT))

    return ScriptGlobal(1586468 + 1 + (slot * 142)) -- Global_1586468[func_1155() /*142*/].f_103
end

local function ClaimVehicle(slot, respawn=false)
    local data = GetPersonalVehicleData(slot)
    local bitfield = Bitfield.new(ReadByte(data + Offsets.VehicleBitfield))

    if bitfield:BitTest(1 << 1) or bitfield:BitTest(1 << 6) then
        bitfield:BitClear(0x23)
        if not respawn then
            bitfield:BitSet(1 << 2)
        else
            bitfield:BitSet(0x5)
        end

        bitfield(data + Offsets.VehicleBitfield, 8)
    end

    data = nil
    bitfield = nil
end

local function GetNetworkId(pid)
    return ReadInt(ScriptGlobal(2657589 + 1 + (pid * 466) + 38)) -- Global_2657589[PLAYER::PLAYER_ID() /*466*/].f_38
end

local function GetVehicleFromNetId(pid)
    return NetToVeh(GetNetworkId(pid))
end

local function SetPersonalVehicleSlot(slot)
    WriteInt(ScriptGlobal(PV_SLOT), slot)
end

local function GetVehicleFromNetId(pid)
    return NetToVeh(GetNetworkId(pid))
end

local function GetPedVehicle(ped)
    if IsPedInAnyVehicle(ped) then
        return GetVehiclePedIsIn(ped, false)
    else
        return 0
    end
end

pluto_class Vehicles
    function __construct()
        local vehicles = root:list(T'Vehicles', {}, T'Vehicles options')
        local gifting = vehicles:list(T'Gifting', {}, T'Gifting options')
        local mors = vehicles:list(T'Mors Mutual', {}, T'Mors Mutual Insurance')
    
        gifting:action(T'Gift Vehicle', {T'giftself'}, T'Improved version of Stand\'s native vehicle gifting option', function()
            local ped = players.user_ped()
            
            if not IsPedInAnyVehicle(ped, false) then
                return util.toast(T'You are not in a vehicle')
            end
    
            local veh = GetVehiclePedIsIn(ped, false)
            local start = os.time() + 30
    
            if veh == 0 or veh == nil then
                return
            end
    
            local nethash = NetworkHashFromPlayerHandle(PLAYER_ID)
            local player_veh = get_user_vehicle_as_pointer()
    
            local bitset = DecorSetInt(veh, 'MPBitset', DecorGetInt(veh, 'MPBitset') | 0x1000008)
            ToggleOwnerCheck(false)
            for {'Player_Vehicle', 'Veh_Modded_By_Player'} as decor do DecorSetInt(veh, decor, nethash) end
            for {'Previous_Owner', 'PV_Slot'} as decor do DecorSetInt(veh, decor, 0) end
            SetVehicleIsStolen(veh, false)
    
            local interior = GetInteriorFromEntity(ped)
    
            repeat
                if os.time() >= start then
                    ToggleOwnerCheck(true)
                    return util.toast(T'Failed to gift vehicle, you took too long')
                end
    
                interior = GetInteriorFromEntity(ped)
                util.yield_once()
            until interior ~= 0
    
            local ref = Shared.Refs.GiftingDeleteVeh
    
            repeat
                interior = GetInteriorFromEntity(ped)
                util.yield_once()
            until interior == 0
    
            util.yield(1000)
    
            if ref:isValid() then
                -- triggering it once doesn't seem to delete the correct vehicle
                ref:trigger()
                util.yield_once()
                ref:trigger()
            end
        end)
    
        Shared.Refs.GiftingDeleteVeh = gifting:action(T'Delete Obstructing Vehicle', {}, T'Delete the invisible vehicle that is left behind when gifting', function()
            for get_all_vehicles_as_pointers() as entity do
                local handle = pointer_to_handle(entity)
                local veh_pos = get_position(entity)
    
                if not IsEntityVisible(handle) then
                    delete_by_pointer(entity)
                    util.toast('Deleted ' .. handle)
                end
            end
        end)
    
        mors:divider(T'Settings')
    
        mors:toggle(T'Respawn Next To You', {}, T'Respawns your vehicle next to you after it is claimed', function(state) end)
    
        mors:divider('')
    
        mors:action(T'Claim All Personal Vehicles', {}, T'Claims all your personal vehicles from mors mutual', function()
            for slot = 0, 415 do
                ClaimVehicle(slot)
            end
        end)
    
        mors:action(T'Claim Personal Vehicle', {}, T'Claim your current active personal vehicle', function()
            ClaimVehicle(ReadShort(ScriptGlobal(PV_SLOT)), ref_by_rel_path(mors, T'Respawn Next To You').value)
        end)
    
        mors:action(T'Add Temp Insurance', {}, T'Temporarily insures your personal vehicle, you need to goto ls customs and change any upgrade for this to stick', function()
            local data = GetPersonalVehicleData(slot)
            local bitfield = Bitfield.new(ReadInt(data + Offsets.VehicleBitfield))
            
            if bitfield:BitTest(1 << 2) then
                local model = get_label_text(reverse_joaat(ReadInt(data + Offsets.VehicleModel)))
                util.toast(T'Your ' .. model .. T' is already insured')
                model = nil
            else
                bitfield:BitSet(0x400904)
                bitfield(data + Offsets.VehicleBitfield, 32)
                util.toast(T'WARNING: You need to goto ls customs and change any upgrade for this to stick')
            end
    
            bitfield = nil
            data = nil
        end)
    
        mors:divider('')
    
        mors:toggle_loop(T'Auto Claim All', {}, T'Automatically claims all your personal vehicles from mors mutual', function()
            ref_by_rel_path(mors, T'Claim All Personal Vehicles'):trigger()
        end)
    
        mors:toggle_loop(T'Auto Claim', {}, T'Automatically claims your current active personal vehicle', function()
            ref_by_rel_path(mors, T'Claim Personal Vehicle'):trigger()
        end)
    
        mors:toggle_loop(T'Auto Add Temp Insurance', {}, T'Automatically insures your personal vehicle, you need to goto ls customs and change any upgrade for this to stick', function()
            local data = GetPersonalVehicleData(slot)
            local bitfield = Bitfield.new(ReadInt(data + Offsets.VehicleBitfield))
            
            if bitfield:BitTest(1 << 2) then
                local model = get_label_text(reverse_joaat(ReadInt(data + Offsets.VehicleModel)))
                util.toast(T'Your ' .. model .. T' is already insured')
                model = nil
            else
                bitfield:BitSet(0x400904)
                bitfield(data + Offsets.VehicleBitfield, 32)
                util.toast(T'WARNING: You need to goto ls customs and change any upgrade for this to stick')
            end
    
            bitfield = nil
            data = nil
        end)
    
        -- just like in online and self_options we are using relative offsets instead of excessively calling ScriptGlobal
        -- we are doing this to avoid the overhead of calling ScriptGlobal when we can just add a relative offset to the base address
        -- which is faster and more efficient
    
        local pv_manager = vehicles:list(T'Personal Vehicle Manager', {}, T'Personal Vehicle Manager', function()
            local pv_slot = ScriptGlobal(PV_SLOT)
            local ref = ref_by_rel_path(vehicles, T'Personal Vehicle Manager')
    
            for ref:getChildren() as child do
                if child:isValid() then child:delete() end
            end
    
            local active_pv = ReadShort(pv_slot)
            local active_model = get_label_text(reverse_joaat(ReadInt(GetPersonalVehicleData(active_pv) + 0x210)))
            local active_veh = ref:readonly(T'Active' .. ': ' .. active_model, '')
            ref:divider('')
    
            for slot = 0, 415 do
                local data = GetPersonalVehicleData(slot)
                local model = get_label_text(reverse_joaat(ReadInt(data + Offsets.VehicleModel)))
                local bitfield = Bitfield.new(ReadInt(data + Offsets.VehicleBitfield))
    
                if model ~= 'NULL' then
                    local v_slot = nil
                    local pv_plate = nil
                    local is_active = nil
                    local is_destroyed = nil
                    local is_insured = nil
                    local is_impounded = nil
                    local is_delivered = nil
                    local is_mors_spawn = nil
                    local pv_bitfield = nil
                    local pv_radio = nil
    
                    local pv = ref:list(model, {}, '', function()
                        create_tick_handler(function()
                            local item = get_current_menu_list()
                            if item.menu_name ~= model then
                                item = nil
                                return false
                            end
    
                            bitfield.value = ReadInt(data + Offsets.VehicleBitfield)
                            v_slot.menu_name = T'Slot' .. ': ' .. slot
                            pv_plate.menu_name = T'Plate' .. ': ' .. ReadString(data + Offsets.LicensePlate)
                            is_active.menu_name = T'Active' .. ': ' .. (bitfield:BitTest(1 << 0) ? 'Yes' : 'No')
                            is_destroyed.menu_name = T'Destroyed' .. ': ' .. (bitfield:BitTest(1 << 1) ? 'Yes' : 'No')
                            is_insured.menu_name = T'Insured' .. ': ' .. (bitfield:BitTest(1 << 2) ? 'Yes' : 'No')
                            is_impounded.menu_name = T'Impounded' .. ': ' .. (bitfield:BitTest(1 << 6) ? 'Yes' : 'No')
                            is_delivered.menu_name = T'Delivered' .. ': ' .. (not bitfield:BitTest(1 << 10) ? 'Yes' : 'No')
                            is_mors_spawn.menu_name = T'Mors Spawn' .. ': ' .. (bitfield:BitTest(1 << 11) ? 'Yes' : 'No')
                            pv_bitfield.menu_name = T'Bitfield' .. ': ' .. string.format('0x%X', bitfield.value)
                            pv_radio.menu_name = T'Radio' .. ': ' .. ReadString(data + Offsets.VehicleRadio)
                        end)
                    end)
    
                    v_slot = pv:readonly(T'Slot' .. ': ' .. slot, '')
                    pv_plate = pv:readonly(T'Plate' .. ': ' .. ReadString(data + Offsets.LicensePlate), '')
                    is_active = pv:readonly(T'Active' .. ': ' .. (bitfield:BitTest(1 << 0) ? 'Yes' : 'No'), '')
                    is_destroyed = pv:readonly(T'Destroyed' .. ': ' .. (bitfield:BitTest(1 << 1) ? 'Yes' : 'No'), '')
                    is_insured = pv:readonly(T'Insured' .. ': ' .. (bitfield:BitTest(1 << 2) ? 'Yes' : 'No'), '')
                    is_impounded = pv:readonly(T'Impounded' .. ': ' .. (bitfield:BitTest(1 << 6) ? 'Yes' : 'No'), '')
                    is_delivered = pv:readonly(T'Delivered' .. ': ' .. (not (bitfield:BitTest(1 << 10)) ? 'Yes' : 'No'), '')
                    is_mors_spawn = pv:readonly(T'Mors Spawn' .. ': ' .. (bitfield:BitTest(1 << 11) ? 'Yes' : 'No'), '')
                    pv_bitfield = pv:readonly(T'Bitfield' .. ': ' .. string.format('0x%X', bitfield.value), '')
                    pv_radio = pv:readonly(T'Radio' .. ': ' .. ReadString(data + Offsets.VehicleRadio), '')
    
                    pv:divider('')
                    pv:action(T'Request', {}, '', function()
                        WriteByte(pv_slot, slot)
                        if bitfield:BitTest(1 << 1) or bitfield:BitTest(1 << 6) then
                            bitfield:BitClear(0x23)
                            bitfield(data + Offsets.VehicleBitfield, 32)
                        end
                        bitfield:BitSet(1 << 0)
                        bitfield(data + Offsets.VehicleBitfield, 32)
                    end)
    
                    local return_ref
                    return_ref = pv:action(T'Return', {}, '', function()
                        WriteByte(pv_slot, slot)
                        bitfield:BitClear(1 << 0)
                        bitfield(data + Offsets.VehicleBitfield, 32)
                    end)
    
                    pv:action(T'Instant Delivery', {}, '', function()
                        bitfield:BitClear(1 << 10)
                        bitfield(data + Offsets.VehicleBitfield, 32)
                    end)
    
                    pv:action(T'Claim', {}, '', function()
                        if bitfield:BitTest(1 << 1) or bitfield:BitTest(1 << 6) then
                            bitfield:BitClear(0x23)
                            bitfield(data + Offsets.VehicleBitfield, 32)
                        end
                    end)
    
                    pv:action(T'Delete', {}, '', function()
                        bitfield:BitClear(0xFFFFFFFF)
                        bitfield(data + Offsets.VehicleBitfield, 32)
                        bitfield:BitSet(0x10041)
                        bitfield(data + Offsets.VehicleBitfield, 32)
                        util.yield(1000)
                        return_ref:trigger()
                    end)
    
                    pv:divider('')
    
                    --local proximity_return = pv:list(T'Proximity Return', {}, '')
                    local model_spoofer = pv:list(T'Model Spoofer', {}, T'')
                    local veh_bitfield = pv:list(T'Bitfield', {}, '')
                    local lsc = pv:list(T'Los Santos Customs (WIP)', {}, '')
                    local bumpers = shadow_root:list(T'Bumpers', {}, '')
                    local imani_tech = shadow_root:list(T'Imani Tech', {}, '')
                    local lights = shadow_root:list(T'Lights', {}, '')
                    local lplate = shadow_root:list(T'License Plate', {}, '')
                    local respray = shadow_root:list(T'Respray', {}, '')
                    local wheels = shadow_root:list(T'Wheels', {}, '')
    
                    model_spoofer:text_input(T'Model', {T'modelspoof'}, T'The model to spoof as', function(model)
                        if SCRIPT_CAN_CONTINUE then
                            local hash = joaat(model)
                            if util.get_label_text(model) ~= 'NULL' then
                                WriteInt(data + Offsets.VehicleModel, hash)
                            else
                                util.toast('Invalid model')
                            end
                        end
                    end)
    
                    model_spoofer:divider('')
    
                    for vehmodels as veh_model do
                        model_spoofer:action(veh_model, {}, T'Spoof as ' .. veh_model, function()
                            if SCRIPT_CAN_CONTINUE then
                                local hash = joaat(veh_model)
                                WriteInt(data + Offsets.VehicleModel, hash)
                            end
                        end)
                    end
    
                    -- TODO: implement this
                    --[[proximity_return:toggle_loop(T'Enabled', {T'proximityreturn'}, T'Enable or disable proximity return', function()
                        if SCRIPT_CAN_CONTINUE then
                            local ped = players.user_ped()
                            local pv_slot = ReadByte(pv_slot)
                        end
                    end)
    
                    local proxy_radius_ref
                    proxy_radius_ref = proximity_return:slider(T'Radius', {T'proximityreturn'}, T'The radius the vehicle must outside of for the vehicle to be auto returned', 0, 100000, 1000, 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            
                        end
                    end)]]
    
                    lsc:slider(T'Aerials', {}, '', 0, 4, ReadShort(data + Offsets.VehicleAerials), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteShort(data + Offsets.VehicleAerials, value)
                        end
                    end)
    
                    lsc:slider(T'Armour', {}, '', 0, 5, ReadInt(data + Offsets.VehicleArmour), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleArmour, value)
                        end
                    end)
    
                    lsc:slider(T'Armour Plating / Primary Weapon', {}, '', 0, 1, ReadInt(data + Offsets.VehicleArmourPlatingPrimaryWeapon), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleArmourPlatingPrimaryWeapon, value)
                        end
                    end)
    
                    lsc:slider(T'Brakes', {}, '', 0, 3, ReadInt(data + Offsets.VehicleBrakes), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleBrakes, value)
                        end
                    end)
    
                    bumpers = lsc:attach(bumpers)
    
                    bumpers:slider(T'Front', {}, '', 0, 17, ReadInt(data + Offsets.VehicleFrontBumper), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleFrontBumper, value)
                        end
                    end)
    
                    bumpers:slider(T'Rear', {}, '', 0, 17, ReadInt(data + Offsets.VehicleRearBumper), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleRearBumper, value)
                        end
                    end)
    
                    lsc:slider(T'Engine', {}, '', 0, 3, ReadInt(data + Offsets.VehicleEngine), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleEngine, value)
                        end
                    end)
    
                    lsc:slider(T'Canards', {}, '', 0, 3, ReadInt(data + Offsets.VehicleCanards), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleCanards, value)
                        end
                    end)
    
                    lsc:slider(T'Horn', {}, '', 0, 58, ReadInt(data + Offsets.VehicleHorn), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleHorn, value)
                        end
                    end)
    
                    imani_tech = lsc:attach(imani_tech)
                    local imani_current = ReadInt(data + Offsets.VehicleImaniTech)
                    if imani_current < 0 or imani_current > 2 then
                        imani_current = 1
                    end
    
                    imani_tech:list_select(T'Imani', {}, '', imani_tech_upgrades, imani_current + 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleImaniTech, value - 1)
                        end
                    end)
    
                    lights = lsc:attach(lights)
    
                    lsc:slider(T'Headlights', {}, '', 0, 14, ReadInt(data + Offsets.VehicleHeadLights), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleHeadLights, value)
                        end
                    end)
    
                    lights:list_select(T'Neon Layout', {}, '', neon_layouts, GetNeonLayout(slot) or 1, function(value)
                        local layout = neon_layouts[value]
                        local bitfield = ReadInt(data + Offsets.VehicleNeonLayout)
                    
                        if SCRIPT_CAN_CONTINUE then
                            if layout == 'None' then
                                WriteInt(data + Offsets.VehicleNeonLayout, bitfield & ~0x1F0000000)
                            elseif layout == 'Front' then
                                bitfield &= ~0x1F0000000
                                WriteInt(data + Offsets.VehicleNeonLayout, bitfield | (1 << 28))
                            elseif layout == 'Back' then
                                bitfield &= ~0x1F0000000
                                WriteInt(data + Offsets.VehicleNeonLayout, bitfield | (1 << 29))
                            elseif layout == 'Sides' then
                                bitfield &= ~0x1F0000000
                                WriteInt(data + Offsets.VehicleNeonLayout, bitfield | 0x1C0000000)
                            elseif layout == 'Front and Back' then
                                bitfield &= ~0x1F0000000
                                WriteInt(data + Offsets.VehicleNeonLayout, bitfield | 0x30000000)
                            elseif layout == 'Front and Sides' then
                                bitfield &= ~0x1F0000000
                                WriteInt(data + Offsets.VehicleNeonLayout, bitfield | 0x1D0000000)
                            elseif layout == 'Back and Sides' then
                                bitfield &= ~0x1F0000000
                                WriteInt(data + Offsets.VehicleNeonLayout, bitfield | 0x1E0000000)
                            elseif layout == 'All' then
                                bitfield &= ~0x1F0000000
                                WriteInt(data + Offsets.VehicleNeonLayout, bitfield | 0x1F0000000)
                            end
                        end
                    end)
                    
                    local neon_custom = lights:colour(T'Neon Colour', {}, '', GetNeonColour(slot), false, function(colour)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleNeonColourRed, math.floor(colour.r * 255))
                            WriteInt(data + Offsets.VehicleNeonColourGreen, math.floor(colour.g * 255))
                            WriteInt(data + Offsets.VehicleNeonColourBlue, math.floor(colour.b * 255))
                        end
                    end)
                    
                    neon_custom:divider(T'Hex')
                    
                    neon_custom:action(T'Enter Hex Code', {}, '', function()
                        local hexa = script.display_onscreen_keyboard()
                        hexa = tonumber(hexa, 16)
                    
                        if hexa == nil then
                            script.toast(T'Invalid input has been provided')
                        end
                    
                        local red = (hexa & 0xFF)
                        local green = ((hexa >> 8) & 0xFF)
                        local blue = ((hexa >> 16) & 0xFF)
                    
                        WriteInt(data + Offsets.VehicleNeonColourRed, red)
                        WriteInt(data + Offsets.VehicleNeonColourGreen, green)
                        WriteInt(data + Offsets.VehicleNeonColourBlue, blue)
                    
                        local red_ref = stand.ref_by_rel_path(neon_custom, T'Red')
                        local green_ref = stand.ref_by_rel_path(neon_custom, T'Green')
                        local blue_ref = stand.ref_by_rel_path(neon_custom, T'Blue')
                    
                        red_ref.value = red
                        green_ref.value = green
                        blue_ref.value = blue
                    end)
    
                    lsc:slider(T'Livery', {}, '', 0, 10, ReadInt(data + Offsets.VehicleLivery), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleLivery, value)
                        end
                    end)
    
                    lsc:slider(T'Mirrors', {}, '', 0, 3, ReadInt(data + Offsets.VehicleMirrors), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleMirrors, value)
                        end
                    end)
    
                    lsc:slider(T'Roof / Secondary Weapon', {}, '', 0, 4, ReadInt(data + Offsets.VehicleRoofSecondaryWeapon), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleRoofSecondaryWeapon, value)
                        end
                    end)
    
                    lsc:slider(T'Skirts', {}, '', 0, 12, ReadInt(data + Offsets.VehicleSkirts), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleSkirts, value)
                        end
                    end)
    
                    lsc:slider(T'Louvers', {}, '', 0, 10, ReadInt(data + Offsets.VehicleLouvers), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleLouvers, value)
                        end
                    end)
    
                    lplate = lsc:attach(lplate)
    
                    lplate:slider(T'Type', {}, '', 0, 4, ReadInt(data + Offsets.LicensePlateType), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.LicensePlateType, value)
                        end
                    end)
    
                    lplate:text_input(T'Text', {'pvmanager' .. slot .. 'plate'}, '', function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteString(data + Offsets.LicensePlate, value)
                        end
                    end, ReadString(data + Offsets.LicensePlate))
    
                    respray = lsc:attach(respray)
                    local primary_colour = respray:list('Primary Colour', {}, 'Primary Colour')
                    local secondary_colour = respray:list('Secondary Colour', {}, 'Secondary Colour')
    
                    local default_colour = {
                        r = ReadInt(data + Offsets.VehiclePrimaryColourRed) / 255,
                        g = ReadInt(data + Offsets.VehiclePrimaryColourGreen) / 255,
                        b = ReadInt(data + Offsets.VehiclePrimaryColourBlue) / 255,
                        a = 1
                    }
    
                    primary_colour:colour('Custom Primary Colour', {}, 'The custom colour of the primary colour', default_colour, false, function(colour)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleNeonLayout, ReadInt(data + Offsets.VehicleNeonLayout) | (1 << 13))
                            WriteInt(data + Offsets.VehiclePrimaryColourRed, math.floor(colour.r * 255))
                            WriteInt(data + Offsets.VehiclePrimaryColourGreen, math.floor(colour.g * 255))
                            WriteInt(data + Offsets.VehiclePrimaryColourBlue, math.floor(colour.b * 255))
                        end
                    end)
    
                    primary_colour:slider('Primary Colour', {}, '', 0, 159, ReadInt(data + Offsets.VehiclePrimaryColour), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleNeonLayout, ReadInt(data + Offsets.VehicleNeonLayout) & ~(1 << 13))
                            WriteInt(data + Offsets.VehiclePrimaryColour, value)
                        end
                    end)
    
                    secondary_colour:slider('Secondary Colour', {}, '', 0, 159, ReadInt(data + Offsets.VehicleSecondaryColour), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleSecondaryColour, value)
                        end
                    end)
    
                    local trim_color = respray:slider('Trim Color', {}, '', 0, 112, ReadInt(data + Offsets.VehicleSecondaryColour), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleSecondaryColour, value)
                        end
                    end)
    
                    local crew_emblem = respray:toggle('Crew Emblem', {}, '', function(state)
                        if SCRIPT_CAN_CONTINUE then
                            local bitfield = ReadInt(data + Offsets.VehicleBitfield)
                            WriteInt(data + Offsets.VehicleBitfield, state and (bitfield | (1 << 8)) or (bitfield & ~(1 << 8)))
                        end
                    end, ReadInt(data + Offsets.VehicleBitfield) & (1 << 8) == (1 << 8))
    
                    lsc:slider('Sunstrips', {}, '', 0, 2, ReadInt(data + Offsets.VehicleRoofSecondaryWeapon), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleRoofSecondaryWeapon, value)
                        end
                    end)
    
                    lsc:slider('Spoiler', {}, '', 0, 9, ReadInt(data + Offsets.VehicleSpoiler), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleSpoiler, value)
                        end
                    end)
    
                    lsc:slider('Suspension', {}, '', 0, 4, ReadInt(data + Offsets.VehicleSuspension), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleSuspension, value)
                        end
                    end)
    
                    lsc:slider('Trunks', {}, '', 0, 2, ReadInt(data + Offsets.VehicleTrunks), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleTrunks, value)
                        end
                    end)
    
                    lsc:slider(T'Transmission', {}, '', 0, 3, ReadInt(data + Offsets.VehicleTransmission), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleTransmission, value)
                        end
                    end)
    
                    lsc:toggle('Turbo', {}, '', function(state)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleTurbo, state and 1 or 0)
                        end
                    end, ReadInt(data + Offsets.VehicleTurbo) ~= 0)
    
                    wheels = lsc:attach(wheels)
    
                    wheels:slider(T'Wheel Type', {}, '', 0, 30, ReadInt(data + Offsets.VehicleWheelType), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleWheelType, value)
                        end
                    end)
    
                    wheels:slider(T'Rim Type', {}, '', 0, 12, ReadInt(data + Offsets.VehicleRimType), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleRimType, value)
                        end
                    end)
    
                    wheels:slider(T'Wheel Colour', {}, '', 0, 160, ReadInt(data + Offsets.VehicleWheelColour), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleWheelColour, value)
                        end
                    end)
    
                    local tires = wheels:list(T'Tires', {}, '')
    
                    tires:list_select(T'Design', {}, '', wheel_design, ReadInt(data + Offsets.VehicleTiresDesign) + 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleTiresDesign, value - 1)
                            WriteInt(data + Offsets.VehicleTiresDesign1, 1)
                        end
                    end)
    
                    tires:toggle(T'Bulletproof Tires', {}, '', function(state)
                        if SCRIPT_CAN_CONTINUE then
                            local bitfield = ReadInt(data + Offsets.VehicleNeonLayout)
                            WriteInt(data + Offsets.VehicleNeonLayout, state and bitfield | 0xA00 or bitfield & ~0xA00)
                            WriteInt(data + Offsets.VehicleBulletProofTiresToggle, state and 1 or 0)
                        end
                    end, ReadInt(data + Offsets.VehicleBulletProofTiresToggle) ~= 0)
    
                    local colour = {
                        r = ReadInt(data + Offsets.VehicleTiresSmokeColourRed) / 255,
                        g = ReadInt(data + Offsets.VehicleTiresSmokeColourGreen) / 255,
                        b = ReadInt(data + Offsets.VehicleTriesSmokeColourBlue) / 255,
                        a = 1
                    }
    
                    tires:colour(T'Smoke Colour', {}, '', colour, false, function(colour)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + Offsets.VehicleTiresSmokeColourRed, math.floor(colour.r * 255))
                            WriteInt(data + Offsets.VehicleTiresSmokeColourGreen, math.floor(colour.g * 255))
                            WriteInt(data + Offsets.VehicleTriesSmokeColourBlue, math.floor(colour.b * 255))
                        end
                    end)
    
                    lsc:slider(T'Windows', {}, '', 0, 3, ReadInt(data + 0x208), 1, function(value)
                        if SCRIPT_CAN_CONTINUE then
                            WriteInt(data + 0x208, value)
                        end
                    end)
    
                    local bitfield = Bitfield.new(ReadInt(data + Offsets.VehicleBitfield))
    
                    for i = 0, 32 do
                        veh_bitfield:toggle('Bit ' .. i, {}, '', function(state)
                            if state then
                                bitfield:BitSet(1 << i)
                            else
                                bitfield:BitClear(1 << i)
                            end
    
                            bitfield(data + Offsets.VehicleBitfield, 32)
                        end, bitfield:BitTest(1 << i))
                    end
                end
            end
        end)
    
        local veh_cm = vehicles:list(T'Countermeasures', {}, T'Vehicle counter measures')
        veh_cm:action(T'Fire Flares', {}, T'Fire flare countermeasure', function()
            if IsPedInAnyVehicle(players.user_ped()) then
                local veh = GetVehiclePedIsIn(players.user_ped(), false)
                local coords = GetEntityCoords(veh)
                local heading = GetEntityHeading(veh)
                local model = GetEntityModel(veh)
                local offset = {x=0, y=0, z=0}
    
                if util.reverse_joaat(model) == 'oppressor2' then
                    offset.x = 1
                    offset.y = 4
                    offset.z = 0.2
                else
                    offset.x = 3
                    offset.y = 4
                    offset.z = 0.2
                end
    
                local spawn_pos = GetOffsetFromCoordAndHeadingInWorldCoords(coords.x, coords.y, coords.z, heading, -offset.x, offset.y, offset.z)
                ShootSingleBulletBetweenCoordsIgnoreEntityNew(spawn_pos.x, spawn_pos.y, spawn_pos.z, coords.x, coords.y, coords.z, 0, true, util.joaat('WEAPON_FLAREGUN'), players.user_ped(), true, false, -1, 0, false, true, 0, true, 1, 0, 0)
                spawn_pos = GetOffsetFromCoordAndHeadingInWorldCoords(coords.x, coords.y, coords.z, heading, offset.x, offset.y, offset.z)
                ShootSingleBulletBetweenCoordsIgnoreEntityNew(spawn_pos.x, spawn_pos.y, spawn_pos.z, coords.x, coords.y, coords.z, 0, true, util.joaat('WEAPON_FLAREGUN'), players.user_ped(), true, false, -1, 0, false, true, 0, true, 1, 0, 0)
                PlaySoundFromEntity(-1, 'flares_released', veh, 'DLC_SM_Countermeasures_Sounds', true, 0)
            end
        end)
    
        veh_cm:action(T'Fire Chaff', {}, T'Fire chaff countermeasure', function()
            if IsPedInAnyVehicle(players.user_ped()) then
                Shared:RequestNamedPtfxAsset ('scr_sm_counter')
                local veh = GetVehiclePedIsIn(players.user_ped(), false)
                local timeout = os.time() + 15
                
                StartNetworkedParticleFxNonLoopedOnEntity('scr_sm_counter_chaff', veh, 0, 0, 0, 0, 0, 0, 3, false, false, false)
                SetVehicleAllowHomingMissleLockonSynced(veh, false)
    
                util.create_tick_handler(function()
                    if os.time() > timeout then
                        SetVehicleAllowHomingMissleLockonSynced(veh, true)
                        return false
                    end
                end)
            end
        end)
    
        veh_cm:action(T'Refill Countermeasures', {}, T'Refill vehicle countermeasures', function()
            if IsPedInAnyVehicle(players.user_ped()) then
                local veh = GetVehiclePedIsIn(players.user_ped(), false)
                SetVehicleCountermeasureAmmo(veh, 2)
            end
        end)
    
        veh_cm:action(T'Delete Flares', {}, T'Delete flares', function()
            for get_all_objects_as_pointers() as entity do
                local model = reverse_joaat(get_model_hash(entity))
                if model:find('flare') then
                    Shared.DeleteByPointer(entity)
                end
            end
        end)
    
        veh_cm:divider('')
    
        veh_cm:toggle_loop(T'Auto Flares', {}, T'Automatically fire flares when there is a hostile projectile closing in', function()
            for get_all_objects_as_pointers() as entity do
                local model = reverse_joaat(get_model_hash(entity))
                if model:find('rocket') or model:find('homing') or model:find('missile') or model:find('rpg') then
                    ref_by_rel_path(veh_cm, T'Fire Flares'):trigger()
                    if model:find('flare') then
                        Shared.DeleteByPointer(entity)
                    end
                end
            end
        end)
    
        local tunables = vehicles:list(T'Tunables', {}, T'Vehicle tunables')
    
        tunables:action(T'Remove Vehicle Sell Timer', {}, T'Remove sell timer so you can sell as many vehicles as you want', function()
            StatSetInt(util.joaat('MPPLY_VEHICLE_SELL_TIME'), 0)
        end)
    
        tunables:toggle(T'Remove Sell Limitations', {}, T'Remove sell limitations so you can sell any vehicle regardless of the value', function(state)
            WriteInt(TUNABLE_BASE + 0x578, state and Shared.MAX_INT or 50000)
            WriteInt(TUNABLE_BASE + 0x9530, state and Shared.MAX_INT or 1000000)
            WriteInt(TUNABLE_BASE + 0xDD28, state and Shared.MAX_INT or 1000000)
            WriteInt(TUNABLE_BASE + 0xDD20, state and Shared.MAX_INT or 1000000)
            WriteInt(TUNABLE_BASE + 0x27648, state and 1 or 0)
            WriteInt(TUNABLE_BASE + 0xDCE8, state and Shared.MAX_INT or 1)
        end)
    
        local handling = nil
        handling = vehicles:list(T'Handling Flags & Editor', {}, T'Edit vehicle flags and handling', function()
            local vehicle_handling = require('vehicle_handling')
            
            for i, child in pairs(handling:getChildren()) do
                if child:isValid() then child:delete() end
            end
            
            if not IsPedInAnyVehicle(players.user_ped()) then
                return util.toast(T'You are not in a vehicle')
            end
    
            local model_flags = handling:list(T'Model Flags', {}, T'')
            local handling_flags = handling:list(T'Handling Flags', {}, T'')
            local damage_flags = handling:list(T'Damage Flags', {}, T'')
            local advanced_flags = handling:list(T'Advanced Flags', {}, T'')
            local car_handling = handling:list(T'Car Handling', {}, T'')
            local bike_handling = handling:list(T'Bike Handling', {}, T'')
            local flying_handling = handling:list(T'Flying Handling', {}, T'')
            local boat_handling = handling:list(T'Boat Handling', {}, T'')
            local sea_plane_handling = handling:list(T'Sea Plane Handling', {}, T'')
            local submarine_handling = handling:list(T'Submarine Handling', {}, T'')
            local trailer_handling = handling:list(T'Trailer Handling', {}, T'')
    
            local veh = get_user_vehicle_as_pointer()
            if veh ~= 0 then
                local CHandlingData = vehicle_get_handling(veh)
                local CBikeHandlingData = handling_get_subhandling(CHandlingData, 0)
                local CFlyingHandlingData = handling_get_subhandling(CHandlingData, 1)
                local CBoatHandlingData = handling_get_subhandling(CHandlingData, 3)
                local CSeaPlaneHandlingData = handling_get_subhandling(CHandlingData, 4)
                local CSubmarineHandlingData = handling_get_subhandling(CHandlingData, 5)
                local CTrailerHandlingData = handling_get_subhandling(CHandlingData, 7)
                local CCarHandlingData = handling_get_subhandling(CHandlingData, 8)
    
                advanced_flags.visible = false
    
                for i, flag in pairs(vehicle_handling.model) do
                    model_flags:toggle(flag.name, {}, flag.desc, function(state)
                        if not SCRIPT_CAN_CONTINUE then return end
                        if state then
                            WriteInt(CHandlingData + vehicle_handling.MF_OFFSET, ReadInt(CHandlingData + vehicle_handling.MF_OFFSET) | flag.bit)
                        else
                            WriteInt(CHandlingData + vehicle_handling.MF_OFFSET, ReadInt(CHandlingData + vehicle_handling.MF_OFFSET) & ~flag.bit)
                        end
                    end, ReadInt(CHandlingData + vehicle_handling.MF_OFFSET) & flag.bit == flag.bit)
                end
    
                for i, flag in pairs(vehicle_handling.handling) do
                    handling_flags:toggle(flag.name, {}, flag.desc, function(state)
                        if not SCRIPT_CAN_CONTINUE then return end
                        if state then
                            WriteInt(CHandlingData + vehicle_handling.HF_OFFSET, ReadInt(CHandlingData + vehicle_handling.HF_OFFSET) | flag.bit)
                        else
                            WriteInt(CHandlingData + vehicle_handling.HF_OFFSET, ReadInt(CHandlingData + vehicle_handling.HF_OFFSET) & ~flag.bit)
                        end
                    end, ReadInt(CHandlingData + vehicle_handling.HF_OFFSET) & flag.bit == flag.bit)
                end
    
                for i, flag in pairs(vehicle_handling.damage) do
                    damage_flags:toggle(flag.name, {}, flag.desc, function(state)
                        if not SCRIPT_CAN_CONTINUE then return end
                        if state then
                            WriteInt(CHandlingData + vehicle_handling.DF_OFFSET, ReadInt(CHandlingData + vehicle_handling.DF_OFFSET) | flag.bit)
                        else
                            WriteInt(CHandlingData + vehicle_handling.DF_OFFSET, ReadInt(CHandlingData + vehicle_handling.DF_OFFSET) & ~flag.bit)
                        end
                    end, ReadInt(CHandlingData + vehicle_handling.DF_OFFSET) & flag.bit == flag.bit)
                end
    
                local status, err = pcall(function()
                    local CF_FLAGS = ReadInt(CCarHandlingData + vehicle_handling.CF_OFFSET)
                end)
    
                if status then
                    advanced_flags.visible = true
                    for i, flag in pairs(vehicle_handling.advanced) do
                        advanced_flags:toggle(flag.name, {}, flag.desc, function(state)
                            if not SCRIPT_CAN_CONTINUE then return end
                            if state then
                                WriteInt(CCarHandlingData + vehicle_handling.CF_OFFSET, ReadInt(CCarHandlingData + vehicle_handling.CF_OFFSET) | flag.bit)
                            else
                                WriteInt(CCarHandlingData + vehicle_handling.CF_OFFSET, ReadInt(CCarHandlingData + vehicle_handling.CF_OFFSET) & ~flag.bit)
                            end
                        end, ReadInt(CCarHandlingData + vehicle_handling.CF_OFFSET) & flag.bit == flag.bit)
                    end
                else
                    advanced_flags.visible = false
                end
    
                local status, err = pcall(function()
                    for i = 1, #vehicle_handling.bike do
                        local name, offset = vehicle_handling.bike[i][1], vehicle_handling.bike[i][2]
                        bike_handling:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(ReadFloat(CBikeHandlingData + offset) * 100), 1.0, function(value)
                            if not SCRIPT_CAN_CONTINUE then return end
                            WriteFloat(CBikeHandlingData + offset, value / 100)
                        end)
                    end
                end)
    
                bike_handling.visible = status
    
                local status, err = pcall(function()
                    for i = 1, #vehicle_handling.flying do
                        local name, offset = vehicle_handling.flying[i][1], vehicle_handling.flying[i][2]
                        flying_handling:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(ReadFloat(CFlyingHandlingData + offset) * 100), 1.0, function(value)
                            if not SCRIPT_CAN_CONTINUE then return end
                            WriteFloat(CFlyingHandlingData + offset, value / 100)
                        end)
                    end
                end)
    
                flying_handling.visible = status
    
                local status, err = pcall(function()
                    for i = 1, #vehicle_handling.boat do
                        local name, offset = vehicle_handling.boat[i][1], vehicle_handling.boat[i][2]
                        boat_handling:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(ReadFloat(CBoatHandlingData + offset) * 100), 1.0, function(value)
                            if not SCRIPT_CAN_CONTINUE then return end
                            WriteFloat(CBoatHandlingData + offset, value / 100)
                        end)
                    end
                end)
    
                boat_handling.visible = status
    
                local status, err = pcall(function()
                    for i = 1, #vehicle_handling.sea_plane do
                        local name, offset = vehicle_handling.sea_plane[i][1], vehicle_handling.sea_plane[i][2]
                        sea_plane_handling:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(ReadFloat(CSeaPlaneHandlingData + offset) * 100), 1.0, function(value)
                            if not SCRIPT_CAN_CONTINUE then return end
                            WriteFloat(CSeaPlaneHandlingData + offset, value / 100)
                        end)
                    end
                end)
    
                sea_plane_handling.visible = status
    
                local status, err = pcall(function()
                    for i = 1, #vehicle_handling.submarine do
                        local name, offset = vehicle_handling.submarine[i][1], vehicle_handling.submarine[i][2]
                        submarine_handling:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(ReadFloat(CSubmarineHandlingData + offset) * 100), 1.0, function(value)
                            if not SCRIPT_CAN_CONTINUE then return end
                            WriteFloat(CSubmarineHandlingData + offset, value / 100)
                        end)
                    end
                end)
    
                submarine_handling.visible = status
    
                local status, err = pcall(function()
                    for i = 1, #vehicle_handling.trailer do
                        local name, offset = vehicle_handling.trailer[i][1], vehicle_handling.trailer[i][2]
                        heli_handling:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(ReadFloat(CTrailerHandlingData + offset) * 100), 1.0, function(value)
                            if not SCRIPT_CAN_CONTINUE then return end
                            WriteFloat(CTrailerHandlingData + offset, value / 100)
                        end)
                    end
                end)
    
                trailer_handling.visible = status
    
                local status, err = pcall(function()
                    for i = 1, #vehicle_handling.ccarsub do
                        local name, offset = vehicle_handling.ccarsub[i][1], vehicle_handling.ccarsub[i][2]
                        car_handling:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(ReadFloat(CHandlingData  + offset) * 100), 1.0, function(value)
                            if not SCRIPT_CAN_CONTINUE then return end
                            WriteFloat(CHandlingData + offset, value / 100)
                        end)
                    end
    
                    for i = 1, #vehicle_handling.ccar do
                        local name, offset = vehicle_handling.ccar[i][1], vehicle_handling.ccar[i][2]
                        if not name:find('nInitialDriveGears') then
                            car_handling:slider_float(T(name), {T(name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(ReadFloat(CCarHandlingData + offset) * 100), 1.0, function(value)
                                if not SCRIPT_CAN_CONTINUE then return end
                                WriteFloat(CCarHandlingData + offset, value / 100)
                            end)
                        else
                            car_handling:slider_int(T(name), {T(name)}, '', 1, 10, ReadInt(CCarHandlingData + offset), 1, function(value)
                                if not SCRIPT_CAN_CONTINUE then return end
                                WriteInt(CCarHandlingData + offset, value)
                            end)
                        end
                    end
                end)
    
                car_handling.visible = status
            end
        end)
    
        vehicles:divider('')
    
        local AIHandling = {
            'AVERAGE',
            'TRUCK',
            'CRAP',
            'SPORTS_CAR'
        }
    
        vehicles:toggle(T'Improved Wheelie', {T'rimprovedwheelie'}, T'Improves the wheelie handling of bikes, allowing you to wheelie at high speeds and lean back pretty far', function(state)
            if IsPedInAnyVehicle(players.user_ped()) then
                local veh = get_user_vehicle_as_pointer()
                if veh ~= 0 then
                    local CHandlingData = vehicle_get_handling(veh)
                    local CBikeHandlingData = handling_get_subhandling(CHandlingData, 0)
                    WriteFloat(CBikeHandlingData + 0x14, state and 25.0 or 13.0)
                    WriteFloat(CBikeHandlingData + 0x3C, state and -60.0 or -1.0)
                    WriteFloat(CBikeHandlingData + 0x40, state and 70.0 or 60.0)
                end
            else
                local ref = ref_by_rel_path(vehicles, 'Improved Wheelie')
                ref.value = false
            end
        end)
    
        vehicles:toggle(T'BMX Superjump', {T'rbmxsuperjump'}, T'Jump higher on a BMX', function(state)
            if IsPedInAnyVehicle(players.user_ped()) then
                local veh = get_user_vehicle_as_pointer()
                if veh ~= 0 then
                    local CHandlingData = vehicle_get_handling(veh)
                    local CBikeHandlingData = handling_get_subhandling(CHandlingData, 0)
                    WriteFloat(CBikeHandlingData + 0x58, state and 20.0 or 5.0)
                end
            else
                local ref = ref_by_rel_path(vehicles, 'BMX Superjump')
                ref.value = false
            end
        end)
    
        vehicles:toggle(T'Enable Kers', {}, T'Enables kers on the vehicle', function(state)
            if IsPedInAnyVehicle(players.user_ped()) then
                local veh = get_user_vehicle_as_pointer()
                if veh ~= 0 then
                    local CHandlingData = vehicle_get_handling(veh)
                    local CCarHandlingData = handling_get_subhandling(CHandlingData, 8)
                    WriteInt(CHandlingData + 0x128, state and ReadInt(CHandlingData + 0x128) | (1 << 2) or ReadInt(CHandlingData + 0x128) & ~(1 << 2))
                    SetVehicleKersAllowed(pointer_to_handle(veh), true)
                end
            else
                local ref = ref_by_rel_path(vehicles, 'Improved Wheelie')
                ref.value = false
            end
        end)
    
        vehicles:toggle_loop(T'Horn Boost', {T'rhornboost'}, T'Boost your vehicle by honking', function(state)
            local veh = GetPedVehicle(players.user_ped())
    
            if veh ~= 0 then
                local speed = ref_by_rel_path(vehicles, 'Horn Boost Speed')
                local relative = ref_by_rel_path(vehicles, 'Horn Boost Speed Relative')
                if IsPlayerPressingHorn(PLAYER_ID) then
                    if not relative.value then
                        SetVehicleForwardSpeed(veh, speed.value)
                    else
                        SetVehicleForwardSpeed(veh, GetEntitySpeed(veh) + speed.value)
                    end
                end
            else
                local ref = ref_by_rel_path(vehicles, 'Horn Boost')
                ref.value = false
            end
        end)
    
        vehicles:toggle(T'Nitrous', {}, T'Enable nitrous for your current vehicle', function()
            local power = ref_by_rel_path(vehicles, 'Nitrous Power').value / 100
            local level = ref_by_rel_path(vehicles, 'Nitrous Level').value / 100
            local toggle = false
    
            if IsPedInAnyVehicle(players.user_ped()) then
                local veh = GetPedVehicle(players.user_ped())
                if veh ~= 0 then
                    local nitro = ref_by_rel_path(vehicles, 'Nitrous')
                    util.create_tick_handler(function()
                        if not nitro.value then
                            SetOverrideNitrousLevel(veh, false, level, power, 1.0, false)
                            return false
                        end
    
                        if is_key_down(0x58) then
                            toggle = not toggle
                        end
    
                        if toggle then
                            SetOverrideNitrousLevel(veh, true, level, power, 1.0, false)
                        end
    
                        SetOverrideNitrousLevel(veh, toggle, level, power, 1.0, false)
    
                        util.yield(150)
                    end)
                end
            end
        end)
    
        vehicles:toggle_loop(T'Drift', {}, T'Hold shift to drift', function()
            local veh = GetPedVehicle(players.user_ped())
                if veh ~= 0 then
                    if is_key_down(0xA0) then
                        SetDriftTyres(veh, true)
                    else
                        SetDriftTyres(veh, false)
                    end
                end
    
            util.yield(120)
        end,
        function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~+ 0 then
                SetDriftTyres(veh, false)
            end
        end)
    
        vehicles:toggle(T'Interior Light', {}, T'Enables the dashboard light within your vehicle', function(state)
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                SetVehicleInteriorlight(veh, state)
                SetVehicleForceInteriorlight(veh, state)
            end
        end)
    
        vehicles:toggle_loop(T'Set Torque Multiplier', {}, T'Set the torque multiplier of your vehicle', function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                local torque = ref_by_rel_path(vehicles, 'Torque Multiplier')
                SetVehicleCheatPowerIncrease(veh, torque.value / 100)
            end
    
            util.yield(120)
        end)
    
        vehicles:toggle(T'Inverted Controls', {}, T'Inverts the controls of your vehicle', function(state)
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                SetInvertVehicleControls(veh, state)
            end
        end)
    
        vehicles:toggle(T'Vehicle No Migrate', {}, T'Prevents anyone else in the session from taking control of your vehicle ever (even when you are not using it)', function(state)
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                local ptr = handle_to_pointer(veh)
                set_can_migrate(ptr, not state)
            end
        end)
    
        vehicles:action(T'Change License Plate', {}, T'Change the license plate of your vehicle', function()
            local veh = GetPedVehicle(players.user_ped())
            local personal = GetVehicleFromNetId(PLAYER_ID)
    
            if veh ~= personal then
                local plate = Shared.DisplayOnscreenKeyboard()
                SetVehicleNumberPlateText(veh, plate)
            else
                local pv_slot = ScriptGlobal(PV_SLOT)
                local data = GetPersonalVehicleData(ReadInt(pv_slot))
                local plate = Shared.DisplayOnscreenKeyboard()
                WriteString(data + Offsets.LicensePlate, plate)
            end
        end)
    
    
    
        vehicles:list_select(T'AIHandling', {}, T'Change the vehicles handling meta', AIHandling, 1, function(index)
            local value = AIHandling[index]
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                SetVehicleHandlingOverride(veh, joaat(value))
                util.toast(T'Changed handling to ' .. value)
            end
        end)
    
        vehicles:action(T'Detach Windscreen', {}, T'Detach the windscreen of your vehicle', function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                PopOutVehicleWindscreen(veh)
            end
        end)
    
        vehicles:action(T'Pop Off Roof', {}, T'Pops off the roof, does not work for all vehicles', function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                PopOffVehicleRoofWithImpulse(veh, 0.0, 0.0, 0.0)
            end
        end)
    
        vehicles:action(T'Smash Windows', {}, T'Smash all the windows of your vehicle', function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                for i = 0, 7 do
                    SmashVehicleWindow(veh, i)
                end
            end
        end)
    
        vehicles:action(T'Roll Down Windows', {}, T'Roll down all the windows of your vehicle', function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                RollDownWindows(veh)
            end
        end)
    
        vehicles:action(T'Roll Up Windows', {}, T'Roll up all the windows of your vehicle', function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                for i = 0, 7 do
                    RollUpWindow(veh, i)
                end
            end
        end)
    
        vehicles:action(T'Fix Windows', {}, T'Fix all the windows of your vehicle', function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                for i = 0, 7 do
                    FixVehicleWindow(veh, i)
                end
            end
        end)
    
        vehicles:action(T'Remove Windows', {}, T'Remove all the windows of your vehicle', function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                for i = 0, 7 do
                    RemoveVehicleWindow(veh, i)
                end
            end
        end)
    
        vehicles:action(T'Fix Vehicle', {}, T'Fixes the vehicle, what else?', function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                SetVehicleFixed(veh)
            end
        end)
    
        vehicles:action(T'Fix Deformation', {}, T'Fixes deformation but doesn\'t restore the vehicles health', function()
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                SetVehicleDeformationFixed(veh)
            end
        end)
    
        vehicles:divider('')
    
        vehicles:slider(T'Horn Boost Speed', {T'rhornboostspeed'}, T'Set the speed of the Horn Boost', 0, Shared.MAX_INT, 100, 1, function(value) end)
        vehicles:toggle(T'Horn Boost Speed Relative', {T'rhornboostrelspeed'}, T'Make the horn boost speed be added relative to your current speed', function() end)
        vehicles:slider_float(T'Nitrous Level', {T'rnitrouslevel'}, T'Set the nitrous level', 0.0, Shared.MAX_FLOAT, 5.0 * 100, 1.0 * 100, function(value) end)
        vehicles:slider_float(T'Nitrous Power', {T'rnitrouspower'}, T'Set the power of the nitrous', 0.0, Shared.MAX_FLOAT, 5.0 * 100, 1.0 * 100, function(value) end)
    
        vehicles:slider_float(T'Vehicle Headlight Multiplier', {T'rvehlightmultiplier'}, T'Set the multiplier for vehicle lights', 0.0, Shared.MAX_FLOAT, 1.0 * 100, 1.0 * 100, function(value) 
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                SetVehicleLightMultiplier(veh, value / 100)
            end
        end)
    
        vehicles:slider_float(T'Set Max Speed', {T'rmaxspeed'}, T'Set the max speed of the vehicle', 0.0, Shared.MAX_FLOAT, 0.0, 1.0 * 100, function(value) 
            local veh = GetPedVehicle(players.user_ped())
            if veh ~= 0 then
                SetVehicleMaxSpeed(veh, value / 100)
                SetEntityMaxSpeed(veh, value / 100)
            end
        end)
    
        vehicles:slider_float(T'Torque Multiplier', {T'rtorquemultiplier'}, T'Set the torque multiplier of the vehicle', 0.0, Shared.MAX_FLOAT, 1.0 * 100, 1.0 * 100, function(value) end)
    end
end

return Vehicles