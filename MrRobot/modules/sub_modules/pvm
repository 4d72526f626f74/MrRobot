local T, S = require('translations'), require('shared')
local Globals = require('script_globals')
local ScriptOffsets = require('offsets')
local VehModels = require('vehicle_models')
local Masks = require('masks')
local Network = require('network')
local shadow_root = menu.shadow_root()

local Offsets = ScriptOffsets.Vehicles.LSCustoms
local VehicleBitfield = ScriptOffsets.Vehicles.VehicleBitfield
local RequestOffsets = ScriptOffsets.Other
local CEOVehicle = ScriptOffsets.Online.CEOVehicle

enum VehicleAccess begin
    Everyone = 0,
    Crew = 1,
    Friends = 2,
    CrewFriends = 3,
    Nobody = 4
end

local vehicle_classes = {
    [0] = 'Compacts',
    [1] = 'Sedans',
    [2] = 'SUVs',
    [3] = 'Coupes',
    [4] = 'Muscle',
    [5] = 'Sports Classics',
    [6] = 'Sports',
    [7] = 'Super',
    [8] = 'Motorcycles',
    [9] = 'Off-road',
    [10] = 'Industrial',
    [11] = 'Utility',
    [12] = 'Vans',
    [13] = 'Cycles',
    [14] = 'Boats',
    [15] = 'Helicopters',
    [16] = 'Planes',
    [17] = 'Service',
    [18] = 'Emergency',
    [19] = 'Military',
    [20] = 'Commercial',
    [21] = 'Trains',
}

local wheel_data = {
    wheel_type = {
        'Sport',
        'Muscle',
        'Lowrider',
        'SUV',
        'Offroad',
        'Tuner',
        'NULL',
        'High End',
        'NULL',
        'NULL',
        'NULL',
        'Street',
        'Track'
    },
    wheel_design = { 'None', 'Custom Tires' }
}

local neon_layouts = { 'None', 'Front', 'Back', 'Sides', 'Front and Back', 'Front and Sides', 'Back and Sides', 'All' }
local imani_tech = { 'None', 'Remote Control Unit', 'Missile Lock-On Jammer' }
local window_tints = { 'None', 'Limo', 'Dark Smoke','Light Smoke' }

local char_slot = util.get_char_slot()

pluto_class PVM
    function __construct(root)
        self.root = root:list(T'Personal Vehicle Manager', {T'pvm'}, T'Personal Vehicle Manager', || -> self:OnClick())
        self.pvslot = memory.script_global(Globals.ActivePVSlot)
        self.sroot = filesystem.script_root()
        self.spvcustom = $'{self.sroot}/personal_vehicles'
        self.max_slots = 415

        self.unused_slots = nil
        self.cars = nil
        self.aircraft = nil

        self.active_slot = memory.read_short(self.pvslot)
        self.active_data = memory.script_global(Globals:PersonalVehicleData(self.active_slot))
        self.active_model = util.get_label_text(util.reverse_joaat(memory.read_int(self.active_data + Offsets.VehicleModel)))
        self.active_plate = memory.read_string(memory.script_global(Globals:PersonalVehicleData(self.active_slot)) + Offsets.LicensePlate)
        self.active_display = self.root:readonly(self.active_model .. ' - ' .. self.active_plate .. ' (Slot ' .. self.active_slot .. ')', '')
        self.root:divider('')
        self.veh_access = self.root:list(T'Vehicle Access', {T'pvaccess'}, T'Vehicle Access')

        local commands = {}
        for ({
            { args = { T'Everyone', commands, T'Allows everyone to access your vehicle' }, value = VehicleAccess.Everyone },
            { args = { T'Crew', commands, T'Allows your crew to access your vehicle' }, value = VehicleAccess.Crew },
            { args = { T'Friends', commands, T'Allows your friends to access your vehicle' }, value = VehicleAccess.Friends },
            { args = { T'Crew + Friends', commands, T'Allows your crew and friends to access your vehicle' }, value = VehicleAccess.CrewFriends },
            { args = { T'Nobody', commands, T'Allows nobody to access your vehicle' }, value = VehicleAccess.Nobody }
        }) as data do
            local args = data.args
            args[4] = function() 
                stats.stat_set_int(($'MP{char_slot}_PERSONAL_VEHICLE_ACCESS'):joaat(), data.value, true)
            end
            self.veh_access:action(table.unpack(args))
        end
        commands = nil

        self.unused_slots = self.root:list(T'Unused Slots', {T'pvunused'}, T'Unused Slots')
        self.cars = self.root:list(T'Personal Vehicles', {T'pvcars'}, T'Personal Vehicles')
        self.aircraft = self.root:list(T'Personal Aircraft', {T'pvaircraft'}, T'Personal Aircraft')

        self:Populate()
    end

    function OnClick()
        if self.active_display:isValid() then
            self.active_data = memory.script_global(Globals:PersonalVehicleData(self.active_slot))
            self.active_model = util.get_label_text(util.reverse_joaat(memory.read_int(self.active_data + Offsets.VehicleModel)))
            self.active_plate = memory.read_string(memory.script_global(Globals:PersonalVehicleData(self.active_slot)) + Offsets.LicensePlate)
            self.active_display.menu_name = self.active_model .. ' - ' .. self.active_plate .. ' (Slot ' .. self.active_slot .. ')'
        end

        for ({'unused_slots', 'cars', 'aircraft'}) as root do
            if self[root] then
                local root = self[root]
                if type(root) == 'userdata' then
                    for root:getChildren() as child do
                        if child:isValid() then
                            child:delete()
                        end
                    end
                end
            end
        end
        menu.collect_garbage()
        self:Populate()
    end

    function Populate()
        local cars, aircrafts = {}, {}
        local unused_slots_children = #self.unused_slots:getChildren()
        local cars_children = #self.cars:getChildren()
        local aircraft_children = #self.aircraft:getChildren()

        for slot = 0, self.max_slots do
            local data = {}
            data.data = memory.script_global(Globals:PersonalVehicleData(slot))
            data.hash = memory.read_int(data.data + Offsets.VehicleModel)
            data.model = util.get_label_text(util.reverse_joaat(data.hash))
            data.bitfield = memory.read_int(data.data + Offsets.VehicleBitfield)

            if data.model == 'NULL' then
                if unused_slots_children <= 0 then self:AddUnused(slot, self.unused_slots, data) end
            elseif vehicle.is_this_model_a_car(data.hash) or vehicle.is_this_model_a_bike(data.hash) or vehicle.is_this_model_a_boat(data.hash) 
            or vehicle.is_this_model_a_jetski(data.hash) or vehicle.is_this_model_an_amphibious_car(data.hash) or vehicle.is_this_model_an_amphibious_quadbike(data.hash) then
                table.insert(cars, { slot = slot, data = data, hash = data.hash, model = data.model, bitfiel = data.bitfield, root = self.cars })
            elseif vehicle.is_this_model_a_heli(data.hash) or vehicle.is_this_model_a_plane(data.hash) then
                table.insert(aircrafts, { slot = slot, data = data, hash = data.hash, model = data.model, bitfiel = data.bitfield, root = self.aircraft })
            end
        end

        cars = S:SortTable(cars, |a, b| -> a.model < b.model)
        aircrafts = S:SortTable(aircrafts, |a, b| -> a.model < b.model)

        for cars as car do if cars_children <= 0 then self:AddVehicle(car.slot, car.root, car.data) end end
        for aircrafts as aircraft do if aircraft_children <= 0 then self:AddVehicle(aircraft.slot, aircraft.root, aircraft.data) end end
    end

    function AddUnused(slot, root, data)
        local data = data.data
        local veh_slot = root:list(tostring(slot), {}, T'Unused Slot')
        local add_veh = veh_slot:list(T'Add Vehicle', {T'pvaddveh'}, T'Add Vehicle')

        add_veh:text_input(T'Model', {T'pvmusmodel' .. tostring(slot)}, T'The model to set in this slot', function(model)
            if not SCRIPT_CAN_CONTINUE then return end
            local hash = model:joaat()
            if streaming.is_model_valid(hash) then
                memory.write_int(data + Offsets.VehicleModel, hash)
                veh_slot.menu_name = tostring(slot) .. ': ' .. util.get_label_text(model)
            else
                util.toast(T'Invalid model')
            end
        end, 'adder')
    end

    function AddVehicle(slot, root, data)
        local hash = data.hash
        local model = data.model
        local bitfield = data.bitfield
        local addr = data.data

        local info = {
            slot = nil,
            plate = nil,
            active = nil,
            destroyed = nil,
            insured = nil,
            impounded = nil,
            delivered = nil,
            mors_spawn = nil,
            bitfield = nil,
            radio = nil,
        }

        local pv = root:list(model, {T($'pvm{slot}')}, T($'Slot {slot}'), function()
            util.create_tick_handler(function()
                local item = menu.get_current_menu_list()
                if item.menu_name ~= model then
                    item = nil
                    return false
                end
                bitfield = memory.read_int(addr + Offsets.VehicleBitfield)
                info.slot.menu_name = T'Slot' .. ': ' .. slot
                info.plate.menu_name = T'Plate' .. ': ' .. memory.read_string(addr + Offsets.LicensePlate)
                info.active.menu_name = T'Active' .. ': ' .. (bitfield & VehicleBitfield.Active == VehicleBitfield.Active and 'Yes' or 'No')
                info.destroyed.menu_name = T'Destroyed' .. ': ' .. (bitfield & VehicleBitfield.Destroyed == VehicleBitfield.Destroyed and 'Yes' or 'No')
                info.insured.menu_name = T'Insured' .. ': ' .. (bitfield & VehicleBitfield.Insured == VehicleBitfield.Insured and 'Yes' or 'No')
                info.impounded.menu_name = T'Impounded' .. ': ' .. (bitfield & VehicleBitfield.Impounded == VehicleBitfield.Impounded and 'Yes' or 'No')
                info.delivered.menu_name = T'Delivered' .. ': ' .. (bitfield & VehicleBitfield.Delivered == VehicleBitfield.Delivered and 'Yes' or 'No')
                info.mors_spawn.menu_name = T'Mors Spawn' .. ': ' .. (bitfield & VehicleBitfield.SpawnMorsMutual == VehicleBitfield.SpawnMorsMutual and 'Yes' or 'No')
                info.bitfield.menu_name = T'Bitfield' .. ': ' .. string.format('0x%X', bitfield)
                info.radio.menu_name = T'Radio' .. ': ' .. memory.read_string(addr + Offsets.VehicleRadio)
            end)
        end)

        info.slot = pv:readonly(T'Slot' .. ': ' .. slot, '')
        info.plate = pv:readonly(T'Plate' .. ': ' .. memory.read_string(addr + Offsets.LicensePlate), '')
        info.active = pv:readonly(T'Active' .. ': ' .. (bitfield & VehicleBitfield.Active == VehicleBitfield.Active and 'Yes' or 'No'), '')
        info.destroyed = pv:readonly(T'Destroyed' .. ': ' .. (bitfield & VehicleBitfield.Destroyed == VehicleBitfield.Destroyed and 'Yes' or 'No'), '')
        info.insured = pv:readonly(T'Insured' .. ': ' .. (bitfield & VehicleBitfield.Insured == VehicleBitfield.Insured and 'Yes' or 'No'), '')
        info.impounded = pv:readonly(T'Impounded' .. ': ' .. (bitfield & VehicleBitfield.Impounded == VehicleBitfield.Impounded and 'Yes' or 'No'), '')
        info.delivered = pv:readonly(T'Delivered' .. ': ' .. (bitfield & VehicleBitfield.Delivered == VehicleBitfield.Delivered and 'Yes' or 'No'), '')
        info.mors_spawn = pv:readonly(T'Mors Spawn' .. ': ' .. (bitfield & VehicleBitfield.SpawnMorsMutual == VehicleBitfield.SpawnMorsMutual and 'Yes' or 'No'), '')
        info.bitfield = pv:readonly(T'Bitfield' .. ': ' .. string.format('0x%X', bitfield), '')
        info.radio = pv:readonly(T'Radio' .. ': ' .. memory.read_string(addr + Offsets.VehicleRadio), '')

        pv:divider('')

        pv:toggle(T'Spawn Mors Mutual', {}, '', function(state)
            memory.write_int(addr + Offsets.VehicleBitfield, memory.bits:setbool(bitfield, VehicleBitfield.SpawnMorsMutual, state))
        end)

        local claim = pv:toggle_loop(T'Auto Claim', {}, '', function()
            local mask = VehicleBitfield.Destroyed | VehicleBitfield.Impounded
            if bitfield & mask == VehicleBitfield.Destroyed or bitfield & mask == VehicleBitfield.Impounded then
               memory.write_int(addr + Offsets.VehicleBitfield, memory.bits:clear(bitfield, mask))
            end
        end)

        pv:toggle_loop(T'Auto Insure', {}, '', function()
            if bitfield & VehicleBitfield.Insured ~= VehicleBitfield.Insured then
                memory.write_int(addr + Offsets.VehicleBitfield, memory.bits:set(bitfield, VehicleBitfield.Insured))
            end
        end)

        if S.Settings:IsSet(S.SettingsBits.Debug) then
            pv:toggle_loop(T'Display Bits', {}, '', function()
                for i = 0, 31 do
                    util.draw_debug_text(tostring(i) .. ': ' .. (memory.bits:check(bitfield, 1 << i)))
                end
            end)
        end

        pv:divider('')

        pv:action(T'Request', {T'pvm' .. slot .. 'req'}, '', function()
            if not SCRIPT_CAN_CONTINUE then return end
            S:ReturnActivePV()
            util.yield(200)
            local mask = VehicleBitfield.Destroyed | VehicleBitfield.Impounded
            memory.write_short(self.pvslot, slot)

            if bitfield & mask ~= 0 then
                memory.write_int(addr + Offsets.VehicleBitfield, memory.bits:clear(bitfield, mask))
            end
            util.yield(50)
            memory.write_int(addr + Offsets.VehicleBitfield, memory.bits:set(bitfield, VehicleBitfield.Request))
            util.yield(200)

            if not (memory.bits:check(memory.read_int(addr + Offsets.VehicleBitfield), VehicleBitfield.Request)) then
                self:Request(slot)

                local timeout = os.time() + 2
                util.create_tick_handler(function()
                    if os.time() > timeout then
                        return false
                    end
                    memory.write_int(memory.script_local(Globals.FMScript, Globals.PersonalVehicleRequestDelay), 0)
                end)
            end
        end)

        pv:action(T'Request Safe', {T'pvm' .. slot .. T'reqs'}, '', function()
            self:Request(slot)
        end)

        pv:action(T'Request As Pegasus', {T'pvm' .. slot .. T'reqaspeg'}, '', function()
            local hash = memory.read_int(addr + Offsets.VehicleModel)
            self:RequestPegasusVehicle(hash)
        end)

        pv:action(T'Request As CEO', {T'pvm' .. slot .. T'reqasceo'}, '', function()
            local hash = memory.read_int(addr + Offsets.VehicleModel)
            Network.RegisterAsBoss(0)
            self:RequestCEOVehicle(hash)
        end)

        pv:action(T'Return', {T'pvm' .. slot .. T'ret'}, '', function()
            if not SCRIPT_CAN_CONTINUE then return end
            memory.write_short(self.pvslot, slot)
            memory.write_int(addr + Offsets.VehicleBitfield, memory.bits:clear(bitfield, VehicleBitfield.Active))
        end)

        pv:action(T'Instant Deliver', {T'pvm' .. slot .. T'instdeliver'}, '', function()
            if not SCRIPT_CAN_CONTINUE then return end
            memory.write_short(self.pvslot, slot)
            memory.write_int(addr + Offsets.VehicleBitfield, memory.bits:set(bitfield, VehicleBitfield.Delivered))
        end)

        pv:action(T'Instant Claim', {T'pvm' .. slot .. T'claim'}, '', function()
            if not SCRIPT_CAN_CONTINUE then return end
            memory.write_short(self.pvslot, slot)
            memory.write_int(addr + Offsets.VehicleBitfield, memory.bits:clear(bitfield, VehicleBitfield.Destroyed | VehicleBitfield.Impounded))
        end)

        pv:action(T'Retrieve From Impound', {T'pvm' .. slot .. T'impound'}, '', function()
            if not SCRIPT_CAN_CONTINUE then return end
            memory.write_short(self.pvslot, slot)
            memory.write_int(addr + Offsets.VehicleBitfield, memory.bits:clear(bitfield, VehicleBitfield.Impounded))
        end)

        pv:divider('')
        local plate = pv:list(T'Plate', {T'pvm' .. slot .. 'plate'}, '')
        plate:text_input(T'License Plate', {T'pvm' .. slot .. 'modplate'}, '', function(new_plate)
            if not SCRIPT_CAN_CONTINUE then return end
            local active_handle = memory.read_int(memory.script_global(Globals.ActivePVHandle))
            memory.write_string(addr + Offsets.LicensePlate, new_plate)
            if active_handle ~= 0 then
                local veh = S.NewVehicle(active_handle)
                veh:set_vehicle_number_plate_text(new_plate)
            end
        end, memory.read_string(addr + Offsets.LicensePlate))

        local model_spoofer = pv:list(T'Model Spoofer', {T'pvm' .. slot .. 'model'}, '')
        model_spoofer:text_input(T'Model', {T'pvm' .. slot .. 'modmodel'}, '', function(new_model)
            if not SCRIPT_CAN_CONTINUE then return end
            local hash = new_model:joaat()
            if streaming.is_model_valid(hash) then
                memory.write_int(addr + Offsets.VehicleModel, hash)
                pv.menu_name = util.get_label_text(new_model)
            else
                util.toast(T'Invalid model')
            end
        end, util.reverse_joaat(hash))
        local models = model_spoofer:list(T'Models', {}, '')
        for VehModels as model do
            models:action(model, {T'pvm' .. slot .. 'modmodel' .. model}, '', function()
                if not SCRIPT_CAN_CONTINUE then return end
                local hash = model:lower():joaat()
                if streaming.is_model_valid(hash) then
                    memory.write_int(addr + Offsets.VehicleModel, hash)
                    pv.menu_name = util.get_label_text(util.reverse_joaat(hash))
                else
                    util.toast(T'Invalid model')
                end
            end)
        end

        local lsc
        lsc = pv:list(T'Los Santos Customs', {T'pvm' .. slot .. 'lsc'}, 'WARNING: Still needs updated', function()
            if lsc:isValid() then
                for lsc:getChildren() as child do
                    if child:isValid() then
                        child:delete()
                    end
                end
            end
            local bumpers = shadow_root:list(T'Bumpers', {T'pvm' .. slot .. 'lscbumpers'}, '')
            local imani = shadow_root:list(T'Imani Tech', {T'pvm' .. slot .. 'lscimani'}, '')
            local lights = shadow_root:list(T'Lights', {T'pvm' .. slot .. 'lsclights'}, '')
            local license_plate = shadow_root:list(T'License Plate', {T'pvm' .. slot .. 'lsclp'}, '')
            local respray = shadow_root:list(T'Respray', {T'pvm' .. slot .. 'lscrespray'}, '')
            local wheels = shadow_root:list(T'Wheels', {T'pvm' .. slot .. 'lscwheels'}, '')

            lsc:slider(T'Aerials', {}, '', 0, 4, memory.read_short(addr + Offsets.VehicleAerials), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_short(addr + Offsets.VehicleAerials, value)
            end)

            lsc:slider(T'Armour', {}, '', 0, 5, memory.read_int(addr + Offsets.VehicleArmour), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleArmour, value)
            end)

            lsc:slider(T'Armour Plating / Primary Weapon', {}, '', 0, 1, memory.read_int(addr + Offsets.VehicleArmourPlatingPrimaryWeapon), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleArmourPlatingPrimaryWeapon, value)
            end)

            lsc:slider(T'Brakes', {}, '', 0, 3, memory.read_int(addr + Offsets.VehicleBrakes), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleBrakes, value)
            end)

            bumpers = lsc:attach(bumpers)
            bumpers:slider(T'Front', {}, '', 0, 17, memory.read_int(addr + Offsets.VehicleFrontBumper), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleFrontBumper, value)
            end)

            bumpers:slider(T'Rear', {}, '', 0, 17, memory.read_int(addr + Offsets.VehicleRearBumper), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleRearBumper, value)
            end)

            lsc:slider(T'Engine', {}, '', 0, 3, memory.read_int(addr + Offsets.VehicleEngine), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleEngine, value)
            end)

            lsc:slider(T'Canards', {}, '', 0, 3, memory.read_int(addr + Offsets.VehicleCanards), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleCanards, value)
            end)

            lsc:slider(T'Horn', {}, '', 0, 58, memory.read_int(addr + Offsets.VehicleHorn), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleHorn, value)
            end)

            imani = lsc:attach(imani)
            local imani_current = memory.read_int(addr + Offsets.VehicleImaniTech)
            if imani_current < 0 or imani_current > 2 then
                imani_current = 1
            end

            imani:list_select(T'Imani', {}, '', imani_tech, imani_current + 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleImaniTech, value - 1)
            end)

            lights = lsc:attach(lights)

            lights:slider(T'Headlights', {}, '', 0, 14, memory.read_int(addr + Offsets.VehicleHeadLights), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleHeadLights, value)
            end)

            lights:list_select(T'Neon Layout', {}, '', neon_layouts, self:GetNeonLayout(slot) or 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                local layout = neon_layouts[value]
                local bitfield = memory.read_int(addr + Offsets.VehicleNeonLayout)
                switch layout do
                    case 'None':
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:clear(bitfield, Masks.NeonLayoutAll))
                        break
                    case 'Front':
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:clear(bitfield, Masks.NeonLayoutAll))
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:set(bitfield, Masks.NeonLayoutFront))
                        break
                    case 'Back':
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:clear(bitfield, Masks.NeonLayoutAll))
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:set(bitfield, Masks.NeonLayoutBack))
                        break
                    case 'Sides':
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:clear(bitfield, Masks.NeonLayoutAll))
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:set(bitfield, Masks.NeonLayoutSides))
                        break
                    case 'Front and Back':
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:clear(bitfield, Masks.NeonLayoutAll))
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:set(bitfield, Masks.NeonLayoutFrontAndBack))
                        break
                    case 'Front and Sides':
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:clear(bitfield, Masks.NeonLayoutAll))
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:set(bitfield, Masks.NeonLayoutFrontAndSides))
                        break
                    case 'Back and Sides':
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:clear(bitfield, Masks.NeonLayoutAll))
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:set(bitfield, Masks.NeonLayoutBackAndSides))
                        break
                    case 'All':
                        memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:set(bitfield, Masks.NeonLayoutAll))
                        break
                end
            end)

            local neon_custom = lights:colour(T'Neon Colour', {T'pvm' .. slot .. T'nlcolour'}, '', self:GetNeonColour(slot), false, function(colour)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_byte(addr + Offsets.VehicleNeonColourRed, math.floor(colour.r * 255))
                memory.write_byte(addr + Offsets.VehicleNeonColourGreen, math.floor(colour.g * 255))
                memory.write_byte(addr + Offsets.VehicleNeonColourBlue, math.floor(colour.b * 255))
            end)

            lsc:slider(T'Livery', {}, '', 0, 10, memory.read_int(addr + Offsets.VehicleLivery), 1, function(value)
                if SCRIPT_CAN_CONTINUE then
                    memory.write_int(addr + Offsets.VehicleLivery, value)
                end
            end)

            lsc:slider(T'Mirrors', {}, '', 0, 3, memory.read_int(addr + Offsets.VehicleMirrors), 1, function(value)
                if SCRIPT_CAN_CONTINUE then
                    memory.write_int(addr + Offsets.VehicleMirrors, value)
                end
            end)

            lsc:slider(T'Roof / Secondary Weapon', {}, '', 0, 4, memory.read_int(addr + Offsets.VehicleRoofSecondaryWeapon), 1, function(value)
                if SCRIPT_CAN_CONTINUE then
                    memory.write_int(addr + Offsets.VehicleRoofSecondaryWeapon, value)
                end
            end)

            lsc:slider(T'Skirts', {}, '', 0, 12, memory.read_int(addr + Offsets.VehicleSkirts), 1, function(value)
                if SCRIPT_CAN_CONTINUE then
                    memory.write_int(addr + Offsets.VehicleSkirts, value)
                end
            end)

            lsc:slider(T'Louvers', {}, '', 0, 10, memory.read_int(addr + Offsets.VehicleLouvers), 1, function(value)
                if SCRIPT_CAN_CONTINUE then
                    memory.write_int(addr + Offsets.VehicleLouvers, value)
                end
            end)

            license_plate = lsc:attach(license_plate)

            license_plate:slider(T'Type', {}, '', 0, 4, memory.read_int(addr + Offsets.LicensePlateType), 1, function(value)
                if SCRIPT_CAN_CONTINUE then
                    memory.write_int(addr + Offsets.LicensePlateType, value)
                end
            end)

            respray = lsc:attach(respray)
            local primary_colour = respray:list(T'Primary Colour', {}, '')
            local secondary_colour = respray:list(T'Secondary Colour', {}, '')

            local default_colour = {
                r = memory.read_byte(addr + Offsets.VehiclePrimaryColourRed) / 255,
                g = memory.read_byte(addr + Offsets.VehiclePrimaryColourGreen) / 255,
                b = memory.read_byte(addr + Offsets.VehiclePrimaryColourBlue) / 255,
                a = 1
            }

            primary_colour:colour(T'Custom Primary Colour', {T'pvm' .. slot .. T'custompc'}, '', default_colour, false, function(colour)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:set(bitfield, 1 << 13))
                memory.write_byte(addr + Offsets.VehiclePrimaryColourRed, math.floor(colour.r * 255))
                memory.write_byte(addr + Offsets.VehiclePrimaryColourGreen, math.floor(colour.g * 255))
                memory.write_byte(addr + Offsets.VehiclePrimaryColourBlue, math.floor(colour.b * 255))
            end)

            primary_colour:slider(T'Primary Colour', {}, '', 0, 159, memory.read_int(addr + Offsets.VehiclePrimaryColour), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleNeonLayout, memory.bits:clear(bitfield, 1 << 13))
                memory.write_int(addr + Offsets.VehiclePrimaryColour, value)
            end)

            secondary_colour:slider(T'Secondary Colour', {}, '', 0, 159, memory.read_int(addr + Offsets.VehicleSecondaryColour), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleSecondaryColour, value)
            end)

            local trim_colour = respray:slider(T'Trim Colour', {}, '', 0, 112, memory.read_int(addr + Offsets.VehicleTrimColour), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleTrimColour, value)
            end)

            local crew_emblem = respray:toggle(T'Crew Emblem', {}, '', function(state)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleBitfield, memory.bits:setbool(bitfield, VehicleBitfield.CrewEmblem, state))
            end, bitfield & VehicleBitfield.CrewEmblem == VehicleBitfield.CrewEmblem)

            lsc:slider(T'Sunstrips', {}, '', 0, 2, memory.read_int(addr + Offsets.VehicleSunStrips), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleSunStrips, value)
            end)

            lsc:slider(T'Spoiler', {}, '', 0, 9, memory.read_int(addr + Offsets.VehicleSpoiler), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleSpoiler, value)
            end)

            lsc:slider(T'Suspension', {}, '', 0, 4, memory.read_int(addr + Offsets.VehicleSuspension), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleSuspension, value)
            end)

            lsc:slider(T'Trunks', {}, '', 0, 2, memory.read_int(addr + Offsets.VehicleTrunks), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleTrunks, value)
            end)

            lsc:slider(T'Transmission', {}, '', 0, 3, memory.read_int(addr + Offsets.VehicleTransmission), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleTransmission, value)
            end)

            lsc:toggle(T'Turbo', {}, '', function(state)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleTurbo, state and 1 or 0)
            end, memory.read_int(addr + Offsets.VehicleTurbo) ~= 0)

            wheels = lsc:attach(wheels)

            wheels:slider(T'Wheel Type', {}, '', 0, 30, memory.read_int(addr + Offsets.VehicleWheelType), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleWheelType, value)
            end)

            wheels:slider(T'Rim Type', {}, '', 0, 12, memory.read_int(addr + Offsets.VehicleRimType), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleRimType, value)
            end)

            wheels:slider(T'Wheel Colour', {}, '', 0, 160, memory.read_int(addr + Offsets.VehicleWheelColour), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleWheelColour, value)
            end)

            local tires = wheels:list(T'Tires', {}, '')

            tires:list_select(T'Design', {}, '', wheel_data.wheel_design, memory.read_int(addr + Offsets.VehicleTiresDesign) + 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleTiresDesign, value - 1)
                memory.write_int(addr + Offsets.VehicleTiresDesign1, 1)
            end)

            tires:toggle(T'Bulletproof Tires', {}, '', function(state)
                if not SCRIPT_CAN_CONTINUE then return end
                local bitfield = memory.read_int(addr + Offsets.VehicleNeonLayout)
                local bt_bitfield = memory.bits:new(bitfield)
                bt_bitfield:set(0xA00, state)
                memory.write_int(addr + Offsets.VehicleBulletProofTiresToggle, state ? 1 : 0)
            end, memory.read_int(addr + Offsets.VehicleBulletProofTiresToggle) ~= 0)

            local colour = {
                r = memory.read_byte(addr + Offsets.VehicleTiresSmokeColourRed) / 255,
                g = memory.read_byte(addr + Offsets.VehicleTiresSmokeColourGreen) / 255,
                b = memory.read_byte(addr + Offsets.VehicleTiresSmokeColourBlue) / 255,
                a = 1
            }

            tires:colour(T'Smoke Colour', {}, '', colour, false, function(colour)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_byte(addr + Offsets.VehicleTiresSmokeColourRed, math.floor(colour.r * 255))
                memory.write_byte(addr + Offsets.VehicleTiresSmokeColourGreen, math.floor(colour.g * 255))
                memory.write_byte(addr + Offsets.VehicleTiresSmokeColourBlue, math.floor(colour.b * 255))
            end)

            lsc:slider(T'Windows', {}, '', 0, 3, memory.read_int(addr + Offsets.VehicleWindows), 1, function(value)
                if not SCRIPT_CAN_CONTINUE then return end
                memory.write_int(addr + Offsets.VehicleWindows, value)
            end)
        end)
    end

    function Request(slot)
        if not SCRIPT_CAN_CONTINUE then return end
        memory.write_short(self.pvslot, slot)
        local base = memory.script_global(Globals.RequestBase)
        if memory.read_int(base + RequestOffsets.RequestState) == -1 then
            memory.write_int(base + RequestOffsets.RequestSlot, slot)
            memory.write_int(base + RequestOffsets.RequestTrigger, 1)
        end
    end

    function RequestPegasusVehicle(hash)
        -- credit to acjoker for finding the globals that made this possible
        if not streaming.is_model_valid(hash) then util.toast('Invalid model hash') return end
        local request = memory.script_global(Globals.PegasusRequest)
        local request1 = request + 0x8
        memory.write_int(request1, hash)
        memory.write_byte(request, memory.bits:toggle(memory.read_byte(request), 1 << 7))
        util.yield_once()
        memory.write_byte(request, memory.bits:toggle(memory.read_byte(request), 1 << 7))
    end

    function RequestCEOVehicle(hash)
        if not streaming.is_model_valid(hash) then util.toast('Invalid model hash') return end
        local request = memory.script_global(Globals.OrganisationBase + 10)
        memory.write_int(request + CEOVehicle.VehicleHash, hash)
        memory.write_byte(request + CEOVehicle.Request, 1)
    end

    function GetNeonLayout(slot)
        local addr = memory.script_global(Globals:PersonalVehicleData(slot))
        return ({
            [0] = 1,
            [0x10] = 2,
            [0x20] = 3,
            [0x1C] = 4,
            [0x30] = 5,
            [0xD0] = 6,
            [0xE0] = 7,
            [0xF0] = 8
        })[memory.read_int(addr + Offsets.VehicleNeonLayout + 1) >> 16] or 1
    end

    function GetNeonColour(slot)
        local addr = memory.script_global(Globals:PersonalVehicleData(slot))
        return {
            r = memory.read_byte(addr + Offsets.VehicleNeonColourRed) / 0xFF,
            g = memory.read_byte(addr + Offsets.VehicleNeonColourGreen) / 0xFF,
            b = memory.read_byte(addr + Offsets.VehicleNeonColourBlue) / 0xFF,
            a = 1
        }
    end
end

return PVM