local T, S = require('translations'), require('shared')
local Notifications = require('notifications')
local G = require('script_globals')
local Globals = G.globals
local char_slot = util.get_char_slot()

local Achievements = {
    ["1"] = "Welcome to Los Santos",       
    ["2"] = "A Friendship Resurrected",    
    ["3"] = "A Fair Day's Pay",
    ["4"] = "The Moment of Truth",
    ["5"] = "To Live or Die in Los Santos",
    ["6"] = "Diamond Hard",
    ["7"] = "Subversive",
    ["8"] = "Blitzed",
    ["9"] = "Small Town, Big Job",
    ["10"] = "The Government Gimps",       
    ["11"] = "The Big One!",
    ["12"] = "Solid Gold, Baby!",
    ["13"] = "Career Criminal",
    ["14"] = "San Andreas Sightseer",
    ["15"] = "All's Fare in Love and War",
    ["16"] = "TP Industries Arms Race",
    ["17"] = "Multi-Disciplined",
    ["18"] = "From Beyond the Stars",
    ["19"] = "A Mystery, Solved",
    ["20"] = "Waste Management",
    ["21"] = "Red Mist",
    ["22"] = "Show Off",
    ["23"] = "Kifflom!",
    ["24"] = "Three Man Army",
    ["25"] = "Out of Your Depth",
    ["26"] = "Altruist Acolyte",
    ["27"] = "A Lot of Cheddar",
    ["28"] = "Trading Pure Alpha",
    ["29"] = "Pimp My Sidearm",
    ["30"] = "Wanted: Alive Or Alive",
    ["31"] = "Los Santos Customs",
    ["32"] = "Close Shave",
    ["33"] = "Off the Plane",
    ["34"] = "Three-Bit Gangster",
    ["35"] = "Making Moves",
    ["36"] = "Above the Law",
    ["37"] = "Numero Uno",
    ["38"] = "The Midnight Club",
    ["39"] = "Unnatural Selection",
    ["40"] = "Backseat Driver",
    ["41"] = "Run Like The Wind",
    ["42"] = "Clean Sweep",
    ["43"] = "Decorated",
    ["44"] = "Stick Up Kid",
    ["45"] = "Enjoy Your Stay",
    ["46"] = "Crew Cut",
    ["47"] = "Full Refund",
    ["48"] = "Dialling Digits",
    ["49"] = "American Dream",
    ["50"] = "A New Perspective",
    ["51"] = "Be Prepared",
    ["52"] = "In the Name of Science",
    ["53"] = "Dead Presidents",
    ["54"] = "Parole Day",
    ["55"] = "Shot Caller",
    ["56"] = "Four Way",
    ["57"] = "Live a Little",
    ["58"] = "Can't Touch This",
    ["59"] = "Mastermind",
    ["60"] = "Vinewood Visionary",
    ["61"] = "Majestic",
    ["62"] = "Humans of Los Santos",
    ["63"] = "First Time Director",
    ["64"] = "Animal Lover",
    ["65"] = "Ensemble Piece",
    ["66"] = "Cult Movie",
    ["67"] = "Location Scout",
    ["68"] = "Method Actor",
    ["69"] = "Cryptozoologist",
    ["70"] = "Getting Started",
    ["71"] = "The Data Breaches",
    ["72"] = "The Bogdan Problem",
    ["73"] = "The Doomsday Scenario",
    ["74"] = "A World Worth Saving",
    ["75"] = "Orbital Obliteration",
    ["76"] = "Elitist",
    ["77"] = "Masterminds",
}

local BunkerResearch = {
    ["APC Sam Battery"] = 22016,
    ["Ballistic Equipment"] = 22017,
    ["Half Track 20MM Quad Cannons"] = 22018,
    ["Weaponized Tampa Dual Remote Minigun"] = 22019,        
    ["Weaponized Tampa Rear Firing Mortar"] = 22020,
    ["Weaponized Tampa Front Missile Launchers"] = 22021,    
    ["Weaponized Tampa Heavy Chassis Armor"] = 22022,        
    ["Dune Fav 40MM Grenade Launcher"] = 22023,
    ["Dune Fav 762MM Minigun"] = 22024,
    ["Insurgent Pick Up Custom 50 Cal Minigun"] = 22025,     
    ["Insurgent Pick Up Custom Heavy Armor Plating"] = 22026,
    ["Technical Custom 762MM Minigun"] = 22027,
    ["Technical Custom Ram Bar"] = 22028,
    ["Technical Custom Brute Bar"] = 22029,
    ["Technical Custom Heavy Chassis Armor"] = 22030,
    ["Oppressor Rockets"] = 22031,
    ["Fractal Livery Set"] = 22032,
    ["Digital Livery Set"] = 22033,
    ["Geometric Livery Set"] = 22034,
    ["Nature Reserve Livery"] = 22035,
    ["Naval Battle Livery"] = 22036,
    ["Anti Aircraft Trailer Dual 20MM Flak Cannon"] = 22037,
    ["Anti Aircraft Trailer Homing Missile Battery"] = 22038,
    ["Mobile Operations Center Rear Turrets"] = 22039,
    ["Incendiary Rounds"] = 22040,
    ["Hollow Point Rounds"] = 22041,
    ["Armor Piercing Rounds"] = 22042,
    ["Full Metal Jacket Rounds"] = 22043,
    ["Explosive Rounds"] = 22044,
    ["Pistol MK II Rail Mount"] = 22045,
    ["Pistol MK II Compensator"] = 22046,
    ["Smg MK II Holographic Sight"] = 22047,
    ["Smg MK II Heavy Barrel"] = 22048,
    ["Heavy Sniper MK II Night Vision Scope"] = 22049,
    ["Heavy Sniper MK II Thermal Scope"] = 22050,
    ["Heavy Sniper MK II Heavy Barrel"] = 22051,
    ["Combat Mg MK II Holographic Sight"] = 22052,
    ["Combat Mg MK II Heavy Barrel"] = 22053,
    ["Assault Rifle MK II Holographic Sight"] = 22054,
    ["Assault Rifle MK II Heavy Barrel"] = 22055,
    ["Carbine Rifle MK II Holographic Sight"] = 22056,
    ["Carbine Rifle MK II Heavy Barrel"] = 22057,
    ["Proximity Mines"] = 22058,
    ["Tiger Stripe"] = 22059,
    ["Skull"] = 22060,
    ["Sessanta Nove"] = 22061,
    ["Perseus"] = 22062,
    ["Leopard Print"] = 22063,
    ["Zebra Stripe"] = 22064,
    ["Geometry"] = 22065,
    ["Book"] = 22066
}

local AircraftTradeIn = {
    ["Ultralight"] = 22922,
    ["Rogue"] = 22923,
    ["Alpha-Z1"] = 22924,
    ["Havok"] = 22925,
    ["LF-22 Starling"] = 22926,
    ["V-65 Molotok"] = 22927,
    ["Tula"] = 22928,
    ["RM-10 Bombushka"] = 22929,
    ["Howard NX-25"] = 22930,
    ["Mogul"] = 22931,
    ["Pyro"] = 22932,
    ["Seabreeze"] = 22933,
    ["P-45 Nakota"] = 22934,
    ["FH-1 Hunter"] = 22935
}

pluto_class Unlocks
    function __construct(root)
        self.root = root:list(T'Unlocks', {T'runlocks'}, '')

        self.root:action(T'Unlock All', {}, T'Unlocks loads of useless shit like clothes, hats, masks, guns etc', function()
            for i = 0, 1000000 do
                stats.set_packed_stat_bool_code(i, true, char_slot)
            end

            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_ASPASSEDLESSON_0'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_ASPASSEDLESSON_1'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_ASPASSEDLESSON_2'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_ASPASSEDLESSON_3'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_ASPASSEDLESSON_4'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_ASPASSEDLESSON_5'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_ASPASSEDLESSON_6'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_ASPASSEDLESSON_7'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_ASPASSEDLESSON_8'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_ASPASSEDLESSON_9'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_SCHOOL_MEDAL_0'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_SCHOOL_MEDAL_1'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_SCHOOL_MEDAL_2'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_SCHOOL_MEDAL_3'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_SCHOOL_MEDAL_4'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_SCHOOL_MEDAL_5'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_SCHOOL_MEDAL_6'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_SCHOOL_MEDAL_7'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_SCHOOL_MEDAL_8'):joaat(), 1, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_PILOT_SCHOOL_MEDAL_9'):joaat(), 1, true)
            stats.stat_set_int(('MP' .. char_slot .. '_SR_HIGHSCORE_1'):joaat(), 900, true)
            stats.stat_set_int(('MP' .. char_slot .. '_SR_HIGHSCORE_2'):joaat(), 2400, true)
            stats.stat_set_int(('MP' .. char_slot .. '_SR_HIGHSCORE_3'):joaat(), 3400, true)
            stats.stat_set_int(('MP' .. char_slot .. '_SR_HIGHSCORE_4'):joaat(), 3300, true)
            stats.stat_set_int(('MP' .. char_slot .. '_SR_HIGHSCORE_5'):joaat(), 4100, true)
            stats.stat_set_int(('MP' .. char_slot .. '_SR_HIGHSCORE_6'):joaat(), 550, true)
            stats.stat_set_int(('MP' .. char_slot .. '_SR_WEAPON_BIT_SET'):joaat(), 262143, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_SR_TIER_1_REWARD'):joaat(), true, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_SR_INCREASE_THROW_CAP'):joaat(), true, true)
            stats.stat_set_bool(('MP' .. char_slot .. '_SR_TIER_3_REWARD'):joaat(), true, true)
        end)

        self.achievements = self.root:list(T'Achievements', {}, T'Achievements')
        self.bunker_research = self.root:list(T'Bunker Research', {}, T'Bunker Research')
        self.vehicle_trade_in_prices = self.root:list(T'Vehicle Trade-In Prices', {}, T'Vehicle Trade-In Prices')
        self.kosatka = self.root:list(T'Kosatka', {}, T'Kosatka unlocks, this does not just unlock them, it also sets them as owned')
        self.interaction_menu = self.root:list(T'Interaction Menu', {}, T'Interaction Menu')
        self.penthouse = self.root:list(T'Casino Penthouse', {}, T'Casino Penthouse')
        self.casino = self.root:list(T'Casino', {}, T'Casino')
        self.autoshop = self.root:list(T'Autoshop', {}, T'Autoshop')
        self.arena_workshop = self.root:list(T'Arena Workshop', {}, T'Arena Workshop')
        self.facility = self.root:list(T'Facility', {}, T'Facility')
        self.hangar = self.root:list(T'Hangar', {}, T'Hangar')
        self.other = self.root:list(T'Other', {}, T'Other')

        self.achievements:action(T'All Achievements', {}, T'All Achievements', function()
            self:UnlockAllAchievements()
        end)

        self.achievements:divider('')
        for S:SortTable(Achievements, |a, b| -> a < b) as name do
            self.achievements:action(tostring(name), {}, tostring(name), function()
                if self:UnlockAchievement(name) then
                    Notifications.Show('Achievement unlocked', name, nil, Notifications.HUD_COLOUR_GREEN)
                else
                    Notifications.Show('Achievement already unlocked', name, nil, Notifications.HUD_COLOUR_RED)
                end
            end)
        end

        self.bunker_research:action(T'Unlock All', {}, T'Unlock All', function()
            for BunkerResearch as offset do
                memory.write_byte(memory.script_global(262145 + offset), 1)
            end
        end)

        self.bunker_research:divider('')
        for name, offset in pairs(BunkerResearch) do
            self.bunker_research:action(tostring(name), {}, tostring(name), function()
                memory.write_byte(memory.script_global(262145 + offset), 1)
            end)
        end

        self.vehicle_trade_in_prices:action('Unlock All', {}, 'Unlock All', function()
            for AircraftTradeIn as offset do
                memory.write_byte(memory.script_global(262145 + offset), 0)
            end
        end)
    
        self.vehicle_trade_in_prices:divider('')
    
        for name, offset in pairs(AircraftTradeIn) do
            self.vehicle_trade_in_prices:action(name, {}, 'Unlock ' .. name .. ' trade-in price', function()
                memory.write_byte(memory.script_global(262145 + offset), 0)
            end)
        end

        self.kosatka:toggle(T'Unlock All', {}, T'Unlock everything', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self.unlock_kosatka.value = state
            self.unlock_sonar.value = state
            self.guided_missiles.value = state
            self.kosatka_weapons_workshop.value = state
            self.unlock_sparrow.value = state
            self.unlock_avisa.value = state
        end)

        self.kosatka:divider('')
        self.unlock_kosatka = self.kosatka:toggle(T'Kosatka', {}, T'Unlock kosatka', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockKosatka(state)
        end, self:IsKosatkaUnlocked())

        self.unlock_sonar = self.kosatka:toggle(T'Sonar', {}, T'Unlock sonar', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockSonar(state)
        end, self:IsSonarUnlocked())

        self.guided_missiles = self.kosatka:toggle(T'Guided Missiles', {}, T'Unlock guided missiles', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockGuidedMissiles(state)
        end, self:IsGuidedMissilesUnlocked())

        self.kosatka_weapons_workshop = self.kosatka:toggle(T'Weapon Workshop', {}, T'Unlock weapon workshop', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockWeaponWorkshop(state)
        end, self:IsWeaponWorkshopUnlocked())

        self.unlock_sparrow = self.kosatka:toggle(T'Sparrow', {}, T'Unlock sparrow', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockSparrow(state)
        end, self:IsSparrowUnlocked())

        self.unlock_avisa = self.kosatka:toggle(T'Avisa', {}, T'Unlock avisa', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockAvisa(state)
        end, self:IsAvisaUnlocked())

        self.interaction_menu:toggle(T'Unlock All', {}, T'Unlocks everything', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self.unlock_acidlab.value = state
            self.unlock_ballisticequipment.value = state
            self.unlock_nanodrone.value = state
            self.unlock_rcbandito.value = state
            self.unlock_rctank.value = state
        end)

        self.interaction_menu:divider('')

        self.unlock_acidlab = self.interaction_menu:toggle(T'Unlock Acid Lab', {}, T'Unlock acid lab without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockAcidLab(state)
        end, self:IsAcidLabUnlocked())

        self.unlock_ballisticequipment = self.interaction_menu:toggle(T'Unlock Ballistic Equipment', {}, T'Unlock ballistic equipment', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockBallisticEquipment(state)
        end, self:IsBallisticEquipmentUnlocked())

        self.unlock_nanodrone = self.interaction_menu:toggle(T'Unlock Nano Drone', {}, T'Unlock nano drone', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockNanoDrone(state)
        end, self:IsNanoDroneUnlocked())

        self.unlock_rcbandito = self.interaction_menu:toggle(T'Unlock RC Bandito', {}, T'Unlock rc bandito without having to buy it (using it without buying will result in you being unable to exit the vehicle)', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockRCBandito(state)
        end, self:IsRCBanditoUnlocked())

        self.unlock_rctank = self.interaction_menu:toggle(T'Unlock RC Tank', {}, T'Unlock rc tank without having to buy it (using it without buying will result in you being unable to exit the vehicle)', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockRCTank(state)
        end, self:IsRCTankUnlocked())
        
        self.penthouse:toggle(T'Unlock All', {}, T'Unlock everything', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self.unlock_penthouse.value = state
            self.unlock_penthouse_lounge.value = state
            self.unlock_penthouse_bar.value = state
            self.unlock_penthouse_dealer.value = state
            self.unlock_penthouse_sparebedroom.value = state
            self.unlock_penthouse_media.value = state
            self.unlock_penthouse_spa.value = state
            self.unlock_penthouse_office.value = state
            self.unlock_penthouse_garage.value = state
        end)

        self.penthouse:divider('')
        self.unlock_penthouse = self.penthouse:toggle(T'Unlock Penthouse', {}, T'Unlock penthouse without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockPenthouse(state)
        end, self:IsPenthouseUnlocked())

        self.unlock_penthouse_lounge = self.penthouse:toggle(T'Unlock Lounge', {}, T'Unlock lounge without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockPenthouseLounge(state)
        end, self:IsPenthouseLoungeUnlocked())

        self.unlock_penthouse_bar = self.penthouse:toggle(T'Unlock Bar', {}, T'Unlock bar without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockPenthouseBar(state)
        end, self:IsPenthouseBarUnlocked())

        self.unlock_penthouse_dealer = self.penthouse:toggle(T'Unlock Dealer Room', {}, T'Unlock dealer room without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockPenthouseDealerRoom(state)
        end, self:IsPenthouseDealerRoomUnlocked())

        self.unlock_penthouse_sparebedroom = self.penthouse:toggle(T'Unlock Spare Bedroom', {}, T'Unlock spare bedroom without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockPenthouseSpareBedroom(state)
        end, self:IsPenthouseSpareBedroomUnlocked())

        self.unlock_penthouse_media = self.penthouse:toggle(T'Unlock Media Room', {}, T'Unlock media room without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockPenthouseMediaRoom(state)
        end, self:IsPenthouseMediaRoomUnlocked())

        self.unlock_penthouse_spa = self.penthouse:toggle(T'Unlock Spa', {}, T'Unlock spa without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockPenthouseSpa(state)
        end, self:IsPenthouseSpaUnlocked())

        self.unlock_penthouse_office = self.penthouse:toggle(T'Unlock Office', {}, T'Unlock office without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockPenthouseOffice(state)
        end, self:IsPenthouseOfficeUnlocked())

        self.unlock_penthouse_garage = self.penthouse:toggle(T'Unlock Garage', {}, T'Unlock garage without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockPenthouseGarage(state)
        end, self:IsPenthouseGarageUnlocked())

        self.unlock_casino_membership = self.casino:toggle(T'Unlock Casino Membership', {}, T'Unlock casino membership without having to buy it', function(state)
            if not SCRIPT_CAN_CONTINUE then return end
            self:UnlockCasinoMembership(state)
        end, self:IsCasinoMembershipUnlocked())

        self.autoshop:toggle(T'La Mesa', {}, T'Unlock La Mesa auto shop without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockAutoShop(0, state)
            end
        end, self:IsLaMesaAutoShopUnlocked())

        self.autoshop:toggle(T'Strawberry', {}, T'Unlock Strawberry auto shop without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockAutoShop(1, state)
            end
        end, self:IsStrawberryAutoShopUnlocked())

        self.autoshop:toggle(T'Rancho', {}, T'Unlock Rancho auto shop without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockAutoShop(2, state)
            end
        end, self:IsRanchoAutoShopUnlocked())

        self.arena_workshop:toggle(T'Workshop', {}, T'Unlock arena workshop without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockArenaWorkshop(state)
            end
        end, self:IsArenaWorkshopUnlocked())

        self.arena_workshop:toggle(T'Benny Mechanic', {}, T'Unlock benny mechanic without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockAWBennyMechanic(state)
            end
        end, self:IsAWBennyMechanicUnlocked())

        self.arena_workshop:toggle(T'Weapon Workshop', {}, T'Unlock weapon workshop without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockAWWeaponWorkshop(state)
            end
        end, self:IsAWWeaponWorkshopUnlocked())

        self.facility:toggle(T'Facility', {}, T'Unlock facility without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockFacility(state)
            end
        end, self:IsFacilityUnlocked())

        self.facility:toggle(T'Orbital Cannon', {}, T'Unlock orbital cannon without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockFacilityOrbitalCannon(state)
            end
        end, self:IsFacilityOrbitalCannonUnlocked())

        self.facility:toggle(T'Security Room', {}, T'Unlock security room without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockFacilitySecurityRoom(state)
            end
        end, self:IsFacilitySecurityRoomUnlocked())

        self.facility:toggle(T'Sleeping Quarters (Utility)', {}, T'Unlock sleeping quarters without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockFacilitySleepingQuarters(0, state)
            end
        end, self:IsFacilitySleepingQuartersUtilityUnlocked())

        self.facility:toggle(T'Sleeping Quarters (Prestige)', {}, T'Unlock sleeping quarters without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockFacilitySleepingQuarters(1, state)
            end
        end, self:IsFacilitySleepingQuartersPrestigeUnlocked())

        self.facility:toggle(T'Sleeping Quarters (Premier)', {}, T'Unlock sleeping quarters without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockFacilitySleepingQuarters(2, state)
            end
        end, self:IsFacilitySleepingQuartersPremierUnlocked())

        self.hangar:toggle(T'Hangar', {}, T'Unlock hangar without having to buy it', function(state)
            if SCRIPT_CAN_CONTINUE then
                self:UnlockHangar(state)
            end
        end, self:IsHangarUnlocked())

        self.other:action(T'Unlock Double Action Revolver', {}, T'Unlock Double Action Revolver', function()
            if SCRIPT_CAN_CONTINUE then
                self:UnlockDoubleActionRevolver()
            end
        end)

        self.other:action(T'Unlock Stone Hatchet', {}, T'Unlock Stone Hatchet', function()
            if SCRIPT_CAN_CONTINUE then
                self:UnlockStoneHatchet()
            end
        end)

        self.other:action(T'Unlock Navy Revolver', {}, T'Unlock Navy Revolver', function()
            if SCRIPT_CAN_CONTINUE then
                self:UnlockNavyRevolver()
            end
        end)

        self.other:action(T'Unlock Gooch Outfit', {}, T'Unlock Gooch Outfit', function()
            if SCRIPT_CAN_CONTINUE then
                self:UnlockGoochOutfit()
            end
        end)

        self.other:action(T'Unlock Yeti Outfit', {}, T'Unlock Yeti Outfit', function()
            if SCRIPT_CAN_CONTINUE then
                self:UnlockYetiOutfit()
            end
        end)

        self.other:action(T'Unlock Snowman Outfit', {}, T'Unlock Snowman Outfit', function()
            if SCRIPT_CAN_CONTINUE then
                self:UnlockSnowmanOutfit()
            end
        end)
    end

    function UnlockAchievement(name)
        if not player.has_achievement_been_passed(name) then
            if player.give_achievement_to_player(name) then
                return true
            else
                return false
            end
        else
            return false
        end
    end
    
    function UnlockAllAchievements()
        for Achievements as name do
            self:UnlockAchievement(name)
        end
    end

    function UnlockKosatka(state)
        stats.set_packed_stat_bool_code(30309, true, char_slot)
        local unlock = Globals.KosatkaUnlock:g()
        memory.write_int(unlock, memory.bits:setbool(memory.read_int(unlock), 1 << 0, state))
    end

    function IsKosatkaUnlocked()
        local unlock = Globals.KosatkaUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 0)
    end

    function UnlockSonar(state)
        local unlock = Globals.KosatkaUnlock:g()
        memory.write_int(unlock, memory.bits:setbool(memory.read_int(unlock), 1 << 1, state))
    end
    
    function UnlockGuidedMissiles(state)
        local unlock = Globals.KosatkaUnlock:g()
        memory.write_int(unlock, memory.bits:setbool(memory.read_int(unlock), 1 << 2, state))
    end
    
    function UnlockWeaponWorkshop(state)
        local unlock = Globals.KosatkaUnlock:g()
        memory.write_int(unlock, memory.bits:setbool(memory.read_int(unlock), 1 << 3, state))
    end
    
    function UnlockSparrow(state)
        local unlock = Globals.KosatkaUnlock:g()
        memory.write_int(unlock, memory.bits:setbool(memory.read_int(unlock), 1 << 4, state))
    end
    
    function UnlockAvisa(state)
        local unlock = Globals.KosatkaUnlock:g()
        memory.write_int(unlock, memory.bits:setbool(memory.read_int(unlock), 1 << 5, state))
    end
    
    function UnlockAcidLab(state)
        local unlock = Globals.KosatkaUnlock:g()
        memory.write_int(unlock, memory.bits:setbool(memory.read_int(unlock), 1 << 14, state))
    end
    
    function IsSonarUnlocked()
        local unlock = Globals.KosatkaUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 1)
    end
    
    function IsGuidedMissilesUnlocked()
        local unlock = Globals.KosatkaUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 2)
    end
    
    function IsWeaponWorkshopUnlocked()
        local unlock = Globals.KosatkaUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 3)
    end
    
    function IsSparrowUnlocked()
        local unlock = Globals.KosatkaUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 4)
    end
    
    function IsAvisaUnlocked()
        local unlock = Globals.KosatkaUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 5)
    end
    
    function IsSparrowBeingUsed()
        local unlock = Globals.KosatkaUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 6)
    end
    
    function IsAvisaBeingUsed()
        local unlock = Globals.KosatkaUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 7)
    end
    
    function IsAcidLabUnlocked()
        local unlock = Globals.KosatkaUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 14)
    end

    function UnlockBallisticEquipment(state)
        stats.set_packed_stat_bool_code(9461, state, char_slot)
        stats.set_packed_stat_bool_code(25, state, char_slot)
        memory.write_byte(Globals.BallisticEquipmentUnlock:g(), state ? 1 : 0)
    end
    
    function IsBallisticEquipmentUnlocked()
        return stats.get_packed_stat_bool_code(9461, char_slot) and stats.get_packed_stat_bool_code(25, char_slot)
    end
    
    function UnlockNanoDrone(state)
        local unlock = Globals.NanoDroneUnlock:g()
        local unlock1 = Globals.RequestNanoDrone:g()
    
        memory.write_int(unlock, state ? (memory.bits:set(memory.read_int(unlock), 1 << 27)) : (memory.bits:clear(memory.read_int(unlock), 1 << 27)))
        memory.write_int(unlock1, state ? (memory.bits:set(memory.read_int(unlock1), 1 << 25)) : (memory.bits:clear(memory.read_int(unlock1), 1 << 25)))
    end
    
    function IsNanoDroneUnlocked()
        local unlock = Globals.NanoDroneUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 27)
    end
    
    function UnlockRCBandito(state)
        stats.set_packed_stat_bool_code(25237, state, char_slot)
        stats.set_packed_stat_bool_code(28085, state, char_slot)
    
        local l = memory.script_local('freemode', 15648)
        if l ~= 0 then
            memory.write_short(l, state ? (memory.bits:set(memory.read_short(l), 1 << 9)) : (memory.bits:clear(memory.read_short(l), 1 << 9)))
        end
    end
    
    function IsRCBanditoUnlocked()
        return stats.get_packed_stat_bool_code(25237, char_slot) or stats.get_packed_stat_bool_code(28085, char_slot)
    end
    
    function UnlockRCTank(state)
        stats.set_packed_stat_bool_code(25516, state, char_slot)
        stats.set_packed_stat_bool_code(28086, state, char_slot)
    
        local l = memory.script_local('freemode', 15648)
        if l ~= 0 then
            memory.write_short(l, state ? (memory.bits:set(memory.read_short(l), 1 << 10)) : (memory.bits:clear(memory.read_short(l), 1 << 10)))
        end
    end
    
    function IsRCTankUnlocked()
        return stats.get_packed_stat_bool_code(25516, char_slot) or stats.get_packed_stat_bool_code(28086, char_slot)
    end

    function UnlockPenthouse(state)
        local penthouse = Globals.CasinoPenthouseUnlock:g()
        memory.write_byte(penthouse, state ? 1 : 0)
    end
    
    function IsPenthouseUnlocked()
        local penthouse = Globals.CasinoPenthouseUnlock:g()
        return memory.read_byte(penthouse) == 1
    end
    
    function UnlockPenthouseLounge(state)
        local lounge = Globals.CasinoPenthouseUnlock:g() + 0x10
        memory.write_int(lounge, state ? (memory.bits:set(memory.read_int(lounge), 1 << 0)) : (memory.bits:clear(memory.read_int(lounge), 1 << 0)))
    end
    
    function IsPenthouseLoungeUnlocked()
        local lounge = Globals.CasinoPenthouseUnlock:g() + 0x10
        return memory.bits:check(memory.read_int(lounge), 1 << 0)
    end
    
    function UnlockPenthouseBar(state)
        local bar = Globals.CasinoPenthouseUnlock:g() + 0x10
        memory.write_int(bar, state ? (memory.bits:set(memory.read_int(bar), 1 << 1)) : (memory.bits:clear(memory.read_int(bar), 1 << 1)))
    end
    
    function IsPenthouseBarUnlocked()
        local bar = Globals.CasinoPenthouseUnlock:g() + 0x10
        return memory.bits:check(memory.read_int(bar), 1 << 1)
    end
    
    function UnlockPenthouseDealerRoom(state)
        local dealer = Globals.CasinoPenthouseUnlock:g() + 0x10
        memory.write_int(dealer, state ? (memory.bits:set(memory.read_int(dealer), 1 << 2)) : (memory.bits:clear(memory.read_int(dealer), 1 << 2)))
    end
    
    function IsPenthouseDealerRoomUnlocked()
        local dealer = Globals.CasinoPenthouseUnlock:g() + 0x10
        return memory.bits:check(memory.read_int(dealer), 1 << 2)
    end
    
    function UnlockPenthouseSpareBedroom(state)
        local spare = Globals.CasinoPenthouseUnlock:g() + 0x10
        memory.write_int(spare, state ? (memory.bits:set(memory.read_int(spare), 1 << 3)) : (memory.bits:clear(memory.read_int(spare), 1 << 3)))
    end
    
    function IsPenthouseSpareBedroomUnlocked()
        local spare = Globals.CasinoPenthouseUnlock:g() + 0x10
        return memory.bits:check(memory.read_int(spare), 1 << 3)
    end
    
    function UnlockPenthouseMediaRoom(state)
        local media = Globals.CasinoPenthouseUnlock:g() + 0x10
        memory.write_int(media, state ? (memory.bits:set(memory.read_int(media), 1 << 4)) : (memory.bits:clear(memory.read_int(media), 1 << 4)))
    end
    
    function IsPenthouseMediaRoomUnlocked()
        local media = Globals.CasinoPenthouseUnlock:g() + 0x10
        return memory.bits:check(memory.read_int(media), 1 << 4)
    end
    
    function UnlockPenthouseSpa(state)
        local spa = Globals.CasinoPenthouseUnlock:g() + 0x10
        memory.write_int(spa, state ? (memory.bits:set(memory.read_int(spa), 1 << 5)) : (memory.bits:clear(memory.read_int(spa), 1 << 5)))
    end
    
    function IsPenthouseSpaUnlocked()
        local spa = Globals.CasinoPenthouseUnlock:g() + 0x10
        return memory.bits:check(memory.read_int(spa), 1 << 5)
    end
    
    function UnlockPenthouseOffice(state)
        local office = Globals.CasinoPenthouseUnlock:g() + 0x10
        memory.write_int(office, state ? (memory.bits:set(memory.read_int(office), 1 << 6)) : (memory.bits:clear(memory.read_int(office), 1 << 6)))
    end
    
    function IsPenthouseOfficeUnlocked()
        local office = Globals.CasinoPenthouseUnlock:g() + 0x10
        return memory.bits:check(memory.read_int(office), 1 << 6)
    end
    
    function UnlockPenthouseGarage(state)
        local garage = Globals.CasinoPenthouseUnlock:g() + 0x10
        memory.write_int(garage, state ? (memory.bits:set(memory.read_int(garage), 1 << 7)) : (memory.bits:clear(memory.read_int(garage), 1 << 7)))
    end
    
    function IsPenthouseGarageUnlocked()
        local garage = Globals.CasinoPenthouseUnlock:g() + 0x10
        return memory.bits:check(memory.read_int(garage), 1 << 7)
    end

    function UnlockAutoShop(index, state)
        -- 0 = la mesa
        -- 1 = strawberry
        -- 2 = rancho
        local unlock = Globals.AutoshopUnlock:g()
        memory.write_int(unlock, memory.bits:clear(memory.read_int(unlock), 0x7))
        memory.write_int(unlock, state ? (memory.bits:set(memory.read_int(unlock), 1 << index)) : (memory.bits:clear(memory.read_int(unlock), 1 << index)))
    end
    
    function IsLaMesaAutoShopUnlocked()
        local unlock = Globals.AutoshopUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 1)
    end
    
    function IsStrawberryAutoShopUnlocked()
        local unlock = Globals.AutoshopUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 2)
    end
    
    function IsRanchoAutoShopUnlocked()
        local unlock = Globals.AutoshopUnlock:g()
        return memory.bits:check(memory.read_int(unlock), 1 << 3)
    end
    
    function UnlockArenaWorkshop(state)
        local unlock = Globals.ArenaWorkshopUnlock:g()
        memory.write_int(unlock, 1)
    end
    
    function IsArenaWorkshopUnlocked()
        local unlock = Globals.ArenaWorkshopUnlock:g()
        return memory.read_int(unlock) == 1
    end
    
    function UnlockAWBennyMechanic(state)
        local unlock = Globals.ArenaWorkshopUnlock:g() + 0x10
        memory.write_int(unlock, state ? (memory.bits:set(memory.read_int(unlock), 1 << 12)) : (memory.bits:clear(memory.read_int(unlock), 1 << 12)))
    end
    
    function IsAWBennyMechanicUnlocked()
        local unlock = Globals.ArenaWorkshopUnlock:g() + 0x10
        return memory.bits:check(memory.read_int(unlock), 1 << 12)
    end
    
    function UnlockAWWeaponWorkshop(state)
        local unlock = Globals.ArenaWorkshopUnlock:g() + 0x10
        memory.write_int(unlock, state ? (memory.bits:set(memory.read_int(unlock), 1 << 13)) : (memory.bits:clear(memory.read_int(unlock), 1 << 13)))
    end
    
    function IsAWWeaponWorkshopUnlocked()
        local unlock = Globals.ArenaWorkshopUnlock:g() + 0x10
        return memory.bits:check(memory.read_int(unlock), 1 << 13)
    end
    
    -- bit 0 = sleeping quarters (utility)
    -- bit 1 = sleeping quarters (prestige)
    -- bit 2 = sleeping quarters (premier)
    -- bit 3 = security room
    -- bit 5 = orbital cannon
    -- bit 6 = utility (style)
    -- bit 7 = expertise (style)
    -- bit 8 = altitude (style)
    -- bit 9 = power (style)
    -- bit 10 = authority (style)
    -- bit 11 = influence (style)
    -- bit 12 = order (style)
    -- bit 13 = empire (style)
    -- bit 14 = supremacy (style)
    
    function UnlockFacility(state)
        local unlock = Globals.FacilityUnlock:g()
        memory.write_byte(unlock, state ? 1 : 0)
    end
    
    function IsFacilityUnlocked()
        local unlock = Globals.FacilityUnlock:g()
        return memory.read_byte(unlock) == 1
    end
    
    function UnlockFacilitySleepingQuarters(index, state)
        -- 0 = utility
        -- 1 = prestige
        -- 2 = premier
        local unlock = Globals.FacilityUnlock:g() + 0x8
        memory.write_byte(unlock, memory.bits:clear(memory.read_byte(unlock), 0x7))
        memory.write_byte(unlock, state ? (memory.bits:set(memory.read_byte(unlock), 1 << index)) : (memory.bits:clear(memory.read_byte(unlock), 1 << index)))
    end
    
    function IsFacilitySleepingQuartersUtilityUnlocked()
        local unlock = Globals.FacilityUnlock:g() + 0x8
        return memory.bits:check(memory.read_byte(unlock), 1 << 0)
    end
    
    function IsFacilitySleepingQuartersPrestigeUnlocked()
        local unlock = Globals.FacilityUnlock:g() + 0x8
        return memory.bits:check(memory.read_byte(unlock), 1 << 1)
    end
    
    function IsFacilitySleepingQuartersPremierUnlocked()
        local unlock = Globals.FacilityUnlock:g() + 0x8
        return memory.bits:check(memory.read_byte(unlock), 1 << 2)
    end
    
    function UnlockFacilitySecurityRoom(state)
        local unlock = Globals.FacilityUnlock:g() + 0x8
        memory.write_byte(unlock, state ? (memory.bits:set(memory.read_byte(unlock), 1 << 3)) : (memory.bits:clear(memory.read_byte(unlock), 1 << 3)))
    end
    
    function IsFacilitySecurityRoomUnlocked()
        local unlock = Globals.FacilityUnlock:g() + 0x8
        return memory.bits:check(memory.read_byte(unlock), 1 << 3)
    end
    
    function UnlockFacilityOrbitalCannon(state)
        local unlock = Globals.FacilityUnlock:g() + 0x8
        memory.write_byte(unlock, state ? (memory.bits:set(memory.read_byte(unlock), 1 << 5)) : (memory.bits:clear(memory.read_byte(unlock), 1 << 5)))
    end
    
    function IsFacilityOrbitalCannonUnlocked()
        local unlock = Globals.FacilityUnlock:g() + 0x8
        return memory.bits:check(memory.read_byte(unlock), 1 << 5)
    end

    function UnlockDoubleActionRevolver()
        stats.set_packed_stat_bool_code(18981, true, char_slot)
    end
    
    function UnlockStoneHatchet()
        stats.set_packed_stat_bool_code(7315, true, char_slot)
    end
    
    function UnlockNavyRevolver()
        stats.set_packed_stat_bool_code(28158, true, char_slot)
    end

    function UnlockHangar()
        local unlock = Globals.HangarUnlock:g()
        memory.write_byte(unlock, 1)
    end

    function IsHangarUnlocked()
        local unlock = Globals.HangarUnlock:g()
        return memory.read_byte(unlock) == 1
    end

    function UnlockCasinoMembership(state)
        local unlock = Globals.CasinoPenthouseUnlock:g() + 0x8
        memory.write_int(unlock, state ? (memory.bits:set(memory.read_int(unlock), 1 << 18)) : (memory.bits:clear(memory.read_int(unlock), 1 << 18)))
    end

    function IsCasinoMembershipUnlocked()
        local unlock = Globals.CasinoPenthouseUnlock:g() + 0x8
        return memory.bits:check(memory.read_int(unlock), 1 << 18)
    end

    function UnlockGoochOutfit()
        stats.set_packed_stat_bool_code(36775, true, char_slot)
        stats.set_packed_stat_bool_code(34761, true, char_slot)
    end

    function UnlockYetiOutfit()
        stats.set_packed_stat_bool_code(42119, true, char_slot)
    end

    function UnlockSnowmanOutfit()
        stats.set_packed_stat_bool_code(36776, true, char_slot)
    end
end

return Unlocks