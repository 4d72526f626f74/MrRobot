local Entity = require('entity')
local Bitfield = require('bitfield')
local Bit = require('bit')
local Vehicle = require('vehicle')
local T = require('translations')
local Globals = require('script_globals')
local ScriptOffsets = require('offsets')

local VehicleOffsets = ScriptOffsets.Vehicles.LSCustoms
local VehicleBitfield = ScriptOffsets.Vehicles.VehicleBitfield

local Shared = {}

if package.loaded['math'] == nil then
    require('math')
end

Shared.Memory = {}
Shared.PlayerList = 0

Shared.Models = {
    BST = 'prop_drug_package_02', -- Bull Shark Testosterone
    PRBUBBLE_FIGURE = 'vm_prop_vm_colle_prbubble', -- PR Bubble Figure (casino)
}

Shared.PropertyIds = {
    ["Invalid"] = 0,
    ["Eclipse Towers 31"] = 1,
    ["Eclipse Towers 9"] = 2,
    ["Eclipse Towers 40"] = 3,
    ["Eclipse Towers 5"] = 4,
    ["3 Alta St, Apt 10"] = 5,
    ["3 Alta St, Apt 57"] = 6,
    ["Del Perro Heights, Apt 20"] = 7,
    ["Power St, Apt 3"] = 8,
    ["Spanish Ave, Apt 1"] = 9,
    ["Las Lagunas Blv, 4"] = 10,
    ["Milton Rd, Apt 13"] = 11,
    ["The Royale, Apt 19"] = 12,
    ["S Mo Milton Drive"] = 13,
    ["Bay City Ave, Apt 45"] = 14,
    ["0325 S Rockford Dr"] = 15,
    ["Dream Tower, Apt 15"] = 16,
    ["Las Lagunas Blv, 9"] = 17,
    ["San Vitas St, Apt 2"] = 18,
    ["0112 S Rockford Dr, 13"] = 19,
    ["Vespucci Blvd, Apt 1"] = 20,
    ["Cougar Ave, Apt 19"] = 21,
    ["Prosperity St, 21"] = 22,
    ["Blvd Del Perro, 18"] = 23,
    ["Murrieta Heights"] = 24,
    ["Unit 14 Popular St"] = 25,
    ["Unit 2 Popular St"] = 26,
    ["331 Supply St"] = 27,
    ["Unit 1 Olympic Fwy"] = 28,
    ["Roy Lowenstein Blvd"] = 29,
    ["Little Bighorn Ave"] = 30,
    ["Unit 124 Popular St"] = 31,
    ["Roy Lowenstein Blvd"] = 32,
    ["0432 Davis Ave"] = 33,
    ["Del Perro Heights, 7"] = 34,
    ["Weazel Plaza, 101"] = 35,
    ["Weazel Plaza, 70"] = 36,
    ["Weazel Plaza, 26"] = 37,
    ["Integrity Way, 30"] = 38,
    ["Integrity Way, 35"] = 39,
    ["Richards Majestic, 4"] = 40,
    ["Richards Majestic, 51"] = 41,
    ["Tinsel Towers, Apt 45"] = 42,
    ["Tinsel Towers, Apt 29"] = 43,
    ["Paleto Blvd"] = 44,
    ["Strawberry Ave"] = 45,
    ["Grapeseed Ave"] = 46,
    ["Senora Way"] = 47,
    ["Great Ocean Highway"] = 48,
    ["197 Route 68"] = 49,
    ["870 Route 68"] = 50,
    ["1200 Route 68"] = 51,
    ["8754 Route 68"] = 52,
    ["1905 Davis Ave"] = 53,
    ["South Shambles St"] = 54,
    ["4531 Dry Dock St"] = 55,
    ["Exceptionalists Way"] = 56,
    ["Greenwich Parkway"] = 57,
    ["Innocence Blvd"] = 58,
    ["Blvd Del Perro"] = 59,
    ["Mirror Park Blvd"] = 60,
    ["Eclipse Towers 3"] = 61,
    ["Del Perro Heights 4"] = 62,
    ["Richards Majestics, 2"] = 63,
    ["Tinsel Towers, Apt 42"] = 64,
    ["Integrity Way, 28"] = 65,
    ["4 Hangman Ave"] = 66,
    ["12 Sustancia Rd"] = 67,
    ["4584 Procopio Dr"] = 68,
    ["4401 Procopio Dr"] = 69,
    ["0232 Paleto Blvd"] = 70,
    ["140 Zancudo Ave"] = 71,
    ["1893 Grapeseed Ave"] = 72,
    ["3655 Wild Oats Dr"] = 73,
    ["2044 North Conker Ave"] = 74,
    ["2868 Hillcrest Ave"] = 75,
    ["2862 Hillcrest Ave"] = 76,
    ["3677 Whispymound Dr"] = 77,
    ["2117 Milton Rd"] = 78,
    ["2866 Hillcrest Ave"] = 79,
    ["2874 Hillcrest Ave"] = 80,
    ["2113 Mad Wayne T Dr"] = 81,
    ["2045 North Conker Ave"] = 82,
    ["Eclipse Penthouse, Suite 1"] = 83,
    ["Eclipse Penthouse, Suite 2"] = 84,
    ["Eclipse Penthouse, Suite 3"] = 85,
    ["Invalid (1)"] = 86,
    ["Lombank West"] = 87,
    ["Maze Bank West"] = 88,
    ["Arcadius"] = 89,
    ["Maze Bank Tower"] = 90,
    ["Rancho Clubhouse"] = 91,
    ["Del Perro Beach Clubhouse"] = 92,
    ["Philbox Hill Clubhouse"] = 93,
    ["Great Chaparral Clubhouse"] = 94,
    ["Paleto Bay Clubhouse"] = 95,
    ["Sandy Shores Clubhouse"] = 96,
    ["La Mesa Clubhouse"] = 97,
    ["Vinewood Clubhouse"] = 98,
    ["Hawick Clubhouse"] = 99,
    ["Grapeseed Clubhouse"] = 100,
    ["Paleto Bay Clubhouse (0)"] = 101,
    ["Vespucci Beach Clubhouse"] = 102,
    ["Office Garage 1 (Lombank)"] = 103,
    ["Office Garage 2 (Lombank)"] = 104,
    ["Office Garage 3 (Lombank)"] = 105,
    ["Office Garage 1 (Maze Bank West)"] = 106,
    ["Office Garage 2 (Maze Bank West)"] = 107,
    ["Office Garage 3 (Maze Bank West)"] = 108,
    ["Office Garage 1 (Arcadius)"] = 109,
    ["Office Garage 2 (Arcadius)"] = 110,
    ["Office Garage 3 (Arcadius)"] = 111,
    ["Office Garage 1 (Maze Bank Tower)"] = 112,
    ["Office Garage 2 (Maze Bank Tower)"] = 113,
    ["Office Garage 3 (Maze Bank Tower)"] = 114,
    ["Vehicle Warehouse"] = 115,
    ["Definitely Invalid"] = (1 << 31) - 1
}

Shared.AimbotBones = {
    31086, -- head (SKEL_Head)
    39317, -- neck (SKEL_Neck_1)
    24816, -- spine (SKEL_Spine_Root)
    14201, -- left foot (SKEL_L_Foot)
    51826, -- right leg (SKEL_R_Calf)
    60309, -- left hand (SKEL_L_Hand)
    57005, -- right hand (SKEL_R_Hand)
    11816, -- pelvis (SKEL_Pelvis)
    58271, -- left leg (SKEL_L_Calf)
    63931, -- left knee (SKEL_L_Thigh)
    61163, -- left arm (SKEL_L_UpperArm)
}

Shared.SettingsBits = {
    ShowAlerts = 1 << 0,
    RemoveTransactionError = 1 << 1,
    MemoryHook = 1 << 2,
    Debug = 1 << 3,
    SuppressRequestControlFailures = 1 << 4
}

Shared.Settings = pluto_new Bitfield(
    Shared.SettingsBits.ShowAlerts 
    | Shared.SettingsBits.RemoveTransactionError
)

if Shared.Settings:IsSet(Shared.SettingsBits.Debug) then
    util.create_tick_handler(function()
        directx.draw_text(0.01, 0.01, $'v{SCRIPT_VERSION}-dbg', ALIGN_TOP_LEFT, 0.8, {r=1, g=0, b=0, a=1})
    end)
end

function Shared:AddPlayer(pid)
    self.PlayerList = self.PlayerList | (1 << pid)
end

function Shared:RemovePlayer(pid)
    self.PlayerList = self.PlayerList & ~(1 << pid)
end

function Shared:PlayerExists(pid)
    return self.PlayerList & (1 << pid) == (1 << pid)
end

function Shared:AddFriend(pid)
    pid = pid + 0x20
    self.PlayerList = self.PlayerList | (1 << pid)
end

function Shared:RemoveFriend(pid)
    pid = pid + 0x20
    self.PlayerList = self.PlayerList & ~(1 << pid)
end

function Shared:IsFriend(pid)
    pid = pid + 0x20
    return self.PlayerList & (1 << pid) == (1 << pid)
end

_G.memory.write = function(addr, value)
    local value_type = type(value)

    if value_type == 'number' then
        local bits = math.floor(math.log(value, 2)) + 1
        if bits <= 8 then
            memory.write_byte(addr, value)
        elseif bits <= 16 then
            memory.write_short(addr, value)
        elseif bits <= 32 then
            memory.write_int(addr, value)
        elseif bits <= 64 then
            memory.write_long(addr, value)
        end
    elseif value_type == 'string' then
        memory.write_string(addr, value)
    end
end

_G.memory.alloc = (function(func)
    return function(size)
        size = size or 24
        if not Shared.Memory[size] then Shared.Memory[size] = {} end
        if size <= 8 then
            if #Shared.Memory[size] <= 10 then
                local addr = func(size)
                table.insert(Shared.Memory[size], addr)
                return addr
            else
                local rand = math.random(1, #Shared.Memory[size])
                return Shared.Memory[size][rand]
            end
        else
            if #Shared.Memory[size] <= 0 then
                local addr = func(size)
                table.insert(Shared.Memory[size], addr)
                return addr
            else
                return Shared.Memory[size][1]
            end
        end
    end
end)(memory.alloc)

_G.entities.entity = Entity

_G.players.localplayer = (function(func)
    local cached = nil
    return function()
        if cached ~= nil then
            cached.entity = players.user_ped()
            cached.ptr = entities.handle_to_pointer(cached.entity)
            return cached
        else
            cached = func()
            if cached.entity ~= players.user_ped() then
                cached.entity = players.user_ped()
                cached.ptr = entities.handle_to_pointer(cached.entity)
            end
            return cached
        end
    end
end)(function()
    return pluto_new Entity(players.user_ped())
end)

_G.players.localplayer_vehicle = (function(func)
    local cached = nil
    return function()
        local vehicle = ped.get_vehicle_ped_is_in(players.user_ped())
        if cached ~= nil then
            cached.entity = vehicle
            cached.ptr = entities.handle_to_pointer(cached.entity)
            return cached
        else
            cached = func(vehicle)
            if cached.entity ~= vehicle then
                cached.entity = vehicle
                cached.ptr = entities.handle_to_pointer(cached.entity)
            end
            return cached
        end
    end
end)(function(entity)
    return pluto_new Vehicle(entity)
end)

Shared.NewVehicle = (function(func)
    local vehs = { pluto_new Vehicle(0), pluto_new Vehicle(0), pluto_new Vehicle(0), pluto_new Vehicle(0) }
    return function(entity)
        if #vehs < 4 then
            local veh = func(entity)
            table.insert(vehs, veh)
            return veh
        else
            local choice = nil
            for vehs as veh do
                if veh.entity == entity then
                    choice = veh
                end
            end
            if choice ~= nil then
                return choice
            else
                local rand = math.random(1, #vehs)
                local veh = vehs[rand]
                veh.entity = entity
                veh.ptr = entities.handle_to_pointer(veh.entity)
                return veh
            end
        end
    end
end)(function(entity)
    return pluto_new Vehicle(entity)
end)

Shared.NewEntity = (function(func)
    local ents = { pluto_new Entity(0), pluto_new Entity(0), pluto_new Entity(0), pluto_new Entity(0) }
    return function(entity)
        if #ents < 4 then
            local ent = func(entity)
            table.insert(ents, ent)
            return ent
        else
            local choice = nil
            for ents as ent do
                if ent.entity == entity then
                    choice = ent
                end
            end
            if choice ~= nil then
                return choice
            else
                local rand = math.random(1, #ents)
                local ent = ents[rand]
                ent.entity = entity
                ent.ptr = entities.handle_to_pointer(ent.entity)
                return ent
            end
            return ent
        end
    end
end)(function(entity)
    return pluto_new Entity(entity)
end)

_G.math.max_int = (1 << 31) - 1
_G.math.min_int = -(1 << 31)
_G.math.max_float = ((1 << 31) - 1) + 0.0
_G.math.min_float = -((1 << 31) - 1) + 0.0
_G.memory.bits = Bit.BitMask
_G.players.max_players = 31

_G.util.toast = (function(func)
    return function(...)
        if not Shared.Settings:IsSet(Shared.SettingsBits.ShowAlerts) then return util.log(...) end
        return func(...)
    end
end)(_G.util.toast)

_G.memory.script_global = (function(func)
    local cache = {}
    return function(sg)
        if not cache[sg] then
            local result = func(sg)
            cache[sg] = result
            return result
        end
        return cache[sg]
    end
end)(_G.memory.script_global)

_G.directx.create_texture = (function(func)
    local cache = {}
    return function(path)
        if not cache[path] then
            local result = func(path)
            cache[path] = result
            return result
        end
        return cache[path]
    end
end)(_G.directx.create_texture)

_G.util.joaat = (function(func)
    local cache = {}
    return function(str)
        if not cache[str] then
            local result = func(str)
            cache[str] = result
            return result
        end
        return cache[str]
    end
end)(_G.util.joaat)

_G.players.add_detection = (function(func)
    return function(pid, detection, toast_flags, severity)
        toast_flags = toast_flags or TOAST_DEFAULT
        severity = severity or 100

        if Shared:PlayerExists(pid) then
            for menu.player_root(pid):getChildren() as child do
                if child:getType() == COMMAND_LIST_CUSTOM_SPECIAL_MEANING and not child:refByRelPath(detection):isValid() then
                    func(pid, detection, toast_flags, severity)
                end
            end
        end
    end
end)(players.add_detection)

local function MemoryWriteHook(func)
    return function(addr, value)
        local bits = math.floor(math.log(addr, 2)) + 1
        if bits < 38 then
            return func(memory.script_global(addr), value)
        end
        return func(addr, value)
    end
end

if Shared.Settings:IsSet(Shared.SettingsBits.MemoryHook) then
    for ({'write_byte', 'write_short', 'write_int', 'write_long', 'write_string', 'write_float'}) as name do
        _G.memory[name] = MemoryWriteHook(_G.memory[name])
    end
end

function Shared:Partial(func, ...)
    local args = {...}
    return function(...)
        return func(table.unpack(args), table.unpack{...})
    end
end

function Shared:SortTable(t, sortFunction)
    local sortedTable = {}
    for k, v in pairs(t) do
        table.insert(sortedTable, v)
    end
    table.sort(sortedTable, sortFunction)
    return sortedTable
end

function Shared:PlayAnimation(logo_path, threshold=1.7, scale=0.04)
    local logo = directx.create_texture(logo_path)
    local alpha, reverse = 0.0, false
    util.create_tick_handler(function()
        directx.draw_texture(logo, scale, scale, 0.5, 0.5, 0.5, 0.5, 0, { r=1, g=1, b=1, a=alpha })
        if alpha < threshold and not reverse then alpha += 0.007 else alpha -= 0.007; reverse = true end
        if alpha <= 0 then return false end
    end)
end

function Shared:RegisterCEO(pid) util.trigger_script_event(1 << pid, {-642704387, 0, 514341487, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) end
function Shared:RegisterVIP(pid) util.trigger_script_event(1 << pid, {-642704387, 0, 514341487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) end
function Shared:RegisterMC(pid) util.trigger_script_event(1 << pid, {-642704387, 0, 514341487, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) end
function Shared:OffRadar(pid, amount) util.trigger_script_event(1 << pid, {-642704387, 1, -1496350145, amount or 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) end
function Shared:GhostOrg(pid) util.trigger_script_event(1 << pid, {-642704387, 1, 688031806, 0, 0, 0, 7953752157564464705, 31084746152966761, 0, 0, 0, 0, 0, 0}) end
function Shared:SuccessfullyMugged(pid, amount) util.trigger_script_event(1 << pid, {-642704387, 0, -1079941038, amount or 10000, 0, 0, 0, 0, 0, 0, 2954937499648, 0, 0, 0}) end
function Shared:MuggerKilled(pid) util.trigger_script_event(1 << pid, {-642704387, 0, -578453253, 0, 0, 0, 0, 0, 0, 0, 2954937499648, 0, 0, 0}) end
function Shared:AttackedArmouredTruck(pid, attacker) util.trigger_script_event(1 << pid, {-642704387, 0, 1964206081, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) end
function Shared:EmptyNotification(pid) util.trigger_script_event(1 << pid, {-642704387, 0, -1896366254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) end
function Shared:CashBanked(pid, amount) util.trigger_script_event(1 << pid, {-642704387, 0, 94410750, amount or self.MAX_INT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) end
function Shared:CashStolen(pid, amount) util.trigger_script_event(1 << pid, {-642704387, 0, -295926414, amount or self.MAX_INT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) end
function Shared:CashRemoved(pid, amount) util.trigger_script_event(1 << pid, {-642704387, 0, -242911964, amount or self.MAX_INT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) end
function Shared:JammerActivated(pid) util.trigger_script_event(1 << pid, {-642704387, 0, -1957780196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) end
function Shared:CollectPinkSlip(pid, collector) util.trigger_script_event(1 << pid, {-642704387, 0, 1919354072, 0, 0, 0, 0, 0, 0, 0, collector, 0, 0, 0}) end
function Shared:PlayerEwo(pid, ewo) util.trigger_script_event(1 << pid, {-642704387, 0, 1269083963, 0, 0, 0, 0, 0, 0, 0, ewo, 0, 0, 0}) end
function Shared:DestroyedVehicleCargo(pid, target) util.trigger_script_event(1 << pid, {-642704387, 0, 1537935777, 0, 0, 0, 0, 0, 0, 0, target, 0, 0, 0}) end
function Shared:DeliveredMotorcycle(pid, target) util.trigger_script_event(1 << pid, {-642704387, 0, -1532850163, 0, 0, 0, 0, 0, 0, 0, target, 0, 0, 0}) end
function Shared:JoinedOrg(pid, target) util.trigger_script_event(1 << pid, {-642704387, 0, 1601625667, 0, 0, 0, 0, 0, 0, 0, target, 0, 0, 0}) end
function Shared:QuitOrg(pid, target) util.trigger_script_event(1 << pid, {-642704387, 0, -1995714668, 0, 0, 0, 0, 0, 0, 0, target, 0, 0, 0}) end
function Shared:MarkedForDeath(pid, marked_by) util.trigger_script_event(1 << pid, {-642704387, 0, 110435988, 0, 0, 0, 0, 0, 0, 0, marked_by, 0, 0, 0}) end
function Shared:BecomeGhosted(pid, ghosted_to) util.trigger_script_event(1 << pid, {-642704387, 0, -1233120647, 0, 0, 0, 0, 0, 0, 0, ghosted_to, 0, 0, 0}) end
function Shared:InteriorInvite(pid) util.trigger_script_event(1 << pid, {996099702, 0, 0}) end

function Shared:RandomString(length=16)
    local str = ''
    for i = 1, length do
        str = str .. string.char((i % math.random(1, length / 2) == 0) ? math.random(97, 122) : math.random(97, 122) ~ 0x20)
    end
    return str
end

function Shared:RequestNamedPtfxAsset(asset)
    local timeout = os.time() + 3
    streaming.request_named_ptfx_asset(asset)
    repeat
        util.yield_once()
        if os.time() > timeout then
            error(T'Failed to load PTFX asset')
            return false
        end
    until streaming.has_named_ptfx_asset_loaded(asset)
    graphics.use_particle_fx_asset(asset)
    return true
end

function Shared:GetRandomPlayer()
    local p = players.list(false)
    if #p > 1 then
        return p[math.random(1, #p)]
    else
        return -1
    end
    return -1
end

function Shared:NewSessionMsg()
    util.toast(T'Join a session to apply the changes!')
end

function Shared:ReturnPVInSlot(slot)
    local data = memory.script_global(Globals:PersonalVehicleData(slot))
    local addr = data + VehicleOffsets.VehicleBitfield
    local bitfield = memory.read_int(addr)
    memory.write_short(memory.script_global(Globals.ActivePVSlot), slot)
    memory.write_int(addr, memory.bits:clear(bitfield, VehicleBitfield.Active))
end

function Shared:RequestPVInSlot(slot)
    local data = memory.script_global(Globals:PersonalVehicleData(slot))
    local addr = data + VehicleOffsets.VehicleBitfield
    local bitfield = memory.read_int(addr)
    memory.write_short(memory.script_global(Globals.ActivePVSlot), slot)
    memory.write_int(addr, memory.bits:set(bitfield, VehicleBitfield.Request))
end

function Shared:ReturnActivePV()
    local slot = memory.read_short(memory.script_global(Globals.ActivePVSlot))
    if slot ~= -1 then
        self:ReturnPVInSlot(slot)
    end
end

function Shared:RequestNamedPtfxAsset(asset)
    local timeout = os.time() + 3
    streaming.request_named_ptfx_asset(asset)
    repeat
        util.yield_once()
        if os.time() > timeout then
            error(T'Failed to load PTFX asset')
            return false
        end
    until streaming.has_named_ptfx_asset_loaded(asset)
    graphics.use_particle_fx_asset(asset)
end

return Shared