local T, S = require('translations'), require('shared')
local Globals = require('script_globals')

pluto_class Protections 
    function __construct(root)
        self.root = root:list(T'Protections', {T'rprotections'}, '')
        self.net_hash = network.network_hash_from_player_handle(players.user())
        self.vehicle = self.root:list(T'Vehicle', {T'rvehicle'}, T'Vehicle Protections')
        self.player = self.root:list(T'Player', {T'rplayer'}, T'Player Protections')
        self.events = self.root:list(T'Events', {T'revents'}, T'Script Event Protections')
        self.notifs = self.root:list(T'Notifications', {T'rnotifs'}, T'Notification Protections')
        self.veh_spoofing = self.vehicle:list(T'Vehicle Spoofing', {T'rvehiclespoofing'}, T'Vehicle spoofing protection')
        self.detections = root:list(T'Detections', {T'rdetections'}, '')

        self.stand_pos_spoof = menu.ref_by_command_name('spoofpos')
        self.stand_spoofed_pos = menu.ref_by_command_name('spoofedposition')

        self:CreateVehicleProtections()
        self:CreatePlayerProtections()
        self:CreateNotifProtections()
        self:CreateDetections()
        self:CreateEvents()
    end

    function CreateVehicleProtections()
        self.veh_kick = self.vehicle:toggle(T'Vehicle Kick', {}, T'Prevents you from being kicked from your vehicle', function(state)
            memory.write_byte(memory.script_global(Globals.VehicleKickProtection), state ? 1 : 0)
        end)

        self.smart_veh_kick = self.vehicle:toggle_loop(T'Smart Vehicle Kick', {}, T'Vehicle kick protection will only be enabled when you enter a personal vehicle (this prevents missions from breaking)', function()
            local veh = memory.read_int(memory.script_global(Globals.ActivePVHandle))
            local localplayer = players.localplayer()

            if veh ~= -1 and localplayer:is_ped_in_any_vehicle() then
                if self.veh_kick:isValid() then
                    self.veh_kick.value = true
                end
            else
                if self.veh_kick:isValid() then
                    self.veh_kick.value = false
                end
            end
        end)

        self.ignore_entities = {}
        self.anti_harry = self.vehicle:toggle_loop(T'Anti-Oppressor MKII', {}, T'Delete broomsticks before shitbags get the chance to use them', function()
            for entities.get_all_vehicles_as_pointers() as ent do
                local model = entities.get_model_hash(ent)
                if model == ('oppressor2'):joaat() and not self.ignore_entities[ent] then
                    local passengers = memory.read_byte(ent + 0x0C42)
                    if passengers < 0 then
                        entities.delete_by_pointer(ent)
                    else
                        entities.delete_by_pointer(ent)
                        self.ignore_entities[ent] = true
                    end
                end
            end
        end)

        self.veh_spoofing:toggle_loop(T'Vehicle Spoofing', {}, T'Revert other player attempts at spoofing your personal vehicle (works best if you are the host)', function()
            local player_id = players.user()
            local network_id = Network.GetPVNetworkID(player_id)
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) and pid ~= player_id then
                    if Network.GetPVNetworkID(pid) == network_id then
                        local veh = Network.GetPVFromNetworkID(player_id)
                        if veh ~= 0 then
                            local veh = S.NewVehicle(veh)
                            veh:decor_set_int('Player_Vehicle', self.net_hash)
                            veh:decor_set_int('Previous_Owner', 0)
                            util.yield(100)
                            Network.SetPVNetworkID(pid, -1)
                        end
                    end
                end
            end
        end)
    end

    function CreatePlayerProtections()
        self.player:divider('Settings')
        self.bounty_notify = self.player:toggle(T'Bounty Notify', {}, T'Notify you when your bounty is removed', function(state) end)
        self.player:divider('')
        
        self.anti_orbital = self.player:toggle_loop(T'Anti-Orbital Cannon', {}, T'Prevents you from being targetted by the orbital cannon (they can still get you with manual targetting but it is unlikely anyone will try that)', function()
            local player_id = players.user()
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) and pid ~= player_id then
                    network.set_remote_player_as_ghost(pid, Network.IsUsingOrbitalCannon(pid))
                end
            end
        end)

        self.ghost_godmode_trash = self.player:toggle_loop(T'Ghost Godmode Trash', {}, T'Prevents you from being killed by trash players in godmode by ghosting them', function()
            local player_id = players.user()
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) and pid ~= player_id then
                    if not players.is_in_interior(pid) and players.is_godmode(pid) then
                        network.set_remote_player_as_ghost(pid, true)
                    else
                        network.set_remote_player_as_ghost(pid, false)
                    end
                end
            end
        end)

        self.anti_attacker = self.player:toggle_loop(T'Anti-Attacker', {}, T'Prevent other players from sending mercenaries, muggers or strike teams to kill you', function()
            util.spoof_script(Globals.GangCall, function()
                local sender = memory.script_local(Globals.GangCall, Globals.AttackerSender)
                local target = sender + 0x8
                memory.write_byte(sender, players.user())
                memory.write_byte(target, -1)
            end)
        end)

        self.anti_beast = self.player:toggle_loop(T'Anti-Beast', {}, T'Prevents you from becoming the beast', function()
            util.spoof_script(Globals.HuntTheBeast, script.terminate_this_thread)
        end)

        self.bounty = self.player:toggle_loop(T'Anti-Bounty', {}, T'Automatically remove any bounties that are set on you', function()
            local player_id = players.user()
            if players.get_bounty(player_id) ~= nil then
                Network.SetBounty(player_id, 0, false)
                Network.SetBountyReward(player_id, -1)
            end
        end)

        self.modded_bounty = self.player:toggle_loop(T'Anti-Modded Bounty', {}, T'Automatically remove modded bounties that are set on you', function()
            local player_id = players.user()
            local bounty = players.get_bounty(player_id)
            if bounty ~= nil then
                if Network.IsBountyModded(bounty) then
                    Network.SetBounty(player_id, 0, false)
                    Network.SetBountyReward(player_id, -1)
                end
            end
        end)

        self.session_bounty = self.player:toggle_loop(T'Anti-Bounty (Session-Wide)', {}, T'Automatically remove bounties from everyone in the session', function()
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) then
                    if players.get_bounty(pid) ~= nil then
                        Network.SetBounty(pid, 0, false)
                        Network.SetBountyReward(pid, -1)
                    end
                end
            end
        end)

        self.session_modded_bounty = self.player:toggle_loop(T'Anti-Modded Bounty (Session-Wide)', {}, T'Automatically remove modded bounties from everyone in the session', function()
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) then
                    local bounty = players.get_bounty(pid)
                    if bounty ~= nil then
                        if Network.IsBountyModded(bounty) then
                            Network.SetBounty(pid, 0, false)
                            Network.SetBountyReward(pid, -1)
                        end
                    end
                end
            end
        end)

        self.anti_bst = self.player:toggle_loop(T'Anti-BST', {}, T'Disable the effects of BST when someone is using BST (they will still deal 2x damage to you but the damage you deal to them will be the same as if they didn\'t have BST active)', function()
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) and pid ~= players.user() then
                    local ped = player.get_player_ped(pid)
                    local ptr = entities.handle_to_pointer(ped)
                    if ptr ~= 0 then
                        local player_info = entities.get_player_info(ptr)
                        if player_info then
                            local weapon_defense = memory.read_float(player_info + 0x0D60)
                            if weapon_defense < 0.99607843160629 then
                                memory.write_float(player_info + 0x0D60, 0.99607843160629)
                            end
                        end
                    end
                end
            end
        end)
    end

    function CreateNotifProtections()
        self.notifs:toggle(T'Block Mugger Notification', {}, T'Block mugger notification spam', function(state)
            memory.write_byte(memory.script_global(Globals.MuggerEventProtection), state ? 1 : 0)
        end)

        self.notifs:toggle(T'Block Stand Notification Spam', {}, T'Block Stand cash removed/banked notification spam', function(state)
            local block = memory.script_global(Globals.StandNotificationSpamProtection)
            for i = 0, 3 do memory.write_byte(block + (i << 3), state ? 1 : 0) end
        end)

        self.notifs:toggle(T'Block All Notifications', {}, T'Block all notifications', function(state)
            memory.write_byte(memory.script_global(Globals.BlockAllNotifications), state ? 1 : 0)
        end)
    end

    function CreateDetections()
        self.entropy_threshold = 2.4

        self.detections:toggle_loop(T'Vehicle Spoofing', {}, T'Detects when a player is spoofing your personal vehicle', function()
            local player_id = players.user()
            local network_id = Network.GetPVNetworkID(player_id)
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) and pid ~= player_id then
                    if Network.GetPVNetworkID(pid) == network_id then
                        players.add_detection(pid, T'Vehicle Spoofing')
                    end
                end
            end
        end)

        self.detections:toggle_loop(T'Position Spoofing', {}, T'Detects when a player is spoofing their position (detection is not 100% accurate)', function()
            local player_id = players.user()
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) and pid ~= player_id then
                    local base = memory.script_global(Globals:PlayerBase(pid))
                    local pos = v3()
                    local i = 0

                    for ({'x', 'y', 'z'}) as k do
                        pos[k] = memory.read_float(base + (i << 3))
                        i = i + 1
                    end
                end
            end
        end)

        self.plate_detection = self.detections:list(T'Modded License Plate', {}, '')
        self.plate_detection:toggle_loop(T'Modded License Plate', {}, T'Detects players that have a modded license plate', function()
            for pid = 0, players.max_players do
                if S:PlayerExists(pid) then
                    local player_ped = player.get_player_ped(pid)
                    local veh = S.NewVehicle(ped.get_vehicle_ped_is_using(player_ped, false))
                    local plate = veh:get_vehicle_number_plate_text()
                    local bitset = veh:decor_get_int('MPBitset')
                    for ({0x8, 0xC00, 0x2800, 0x2C00, 0x100000, 0x1000000}) as mask do if memory.bits:check(bitset, mask) then return end end

                    if veh ~= 0 then
                        if plate ~= nil and not veh:decor_get_bool('CreatedByPegasus') then
                            local entropy = self:CalculateEntropy(plate)
                            if not self:IsValidPlate(plate) then
                                players.add_detection(pid, T'Modded Plate')
                            else
                                local diff = (entropy - self.entropy_threshold) * 100
                                if diff >= 100 then
                                    players.add_detection(pid, T'Modded Plate (Very High Entropy)', TOAST_DEFAULT, 80)
                                elseif diff >= 75 then
                                    players.add_detection(pid, T'Modded Plate (High Entropy)', TOAST_DEFAULT, 50)
                                elseif diff >= 50 then
                                    players.add_detection(pid, T'Modded Plate (Medium Entropy)', TOAST_DEFAULT, 30)
                                elseif diff >= 25 then
                                    players.add_detection(pid, T'Modded Plate (Low Entropy)', TOAST_DEFAULT, 10)
                                end
                            end
                        end
                    end
                end
            end
        end)

        self.plate_detection:slider_float(T'Entropy Threshold', {}, T'The entropy threshold for a license plate to be considered modded', 0.0, 1000, self.entropy_threshold * 100, 10, function(value)
            self.entropy_threshold = value / 100
        end)
    end

    function CreateEvents()
        local commands = {}
        for ({
            { args = { T'Block CEO/MC Invites', commands, T'Block CEO/MC invites from other players in the session' }, sg = Globals.BlockCEOMCInviteProtection },
            { args = { T'Block Island Heist Invite', commands, T'Block island heist invites from other players in the session' }, sg = Globals.BlockIslandHeistInviteProtection },
            { args = { T'Block Remove Wanted Level', {}, T'Block remove wanted level from other players in the session' }, sg = Globals.BlockRemoveWantedLevelProtection },
            { args = { T'Block Property Invite', {}, T'Block property invites from other players in the session' }, sg = Globals.BlockPropertyInviteProtection },
            { args = { T'Block Bounty', {}, T'Block bounty event' }, sg = Globals.Bounty },
            { args = { T'Block Remote Off The Radar', {}, T'Block remote off the radar event' }, sg = Globals.BlockRemoteOffTheRadarProtection },
            { args = { T'Block CEO Money Loop', {}, T'Block CEO money loop event' }, sg = Globals.BlockCEOMoneyLoopProtection }
        }) as data do
            local args = data.args
            args[4] = function(state)
                memory.write_byte(memory.script_global(data.sg), state ? 1 : 0)
            end
            self.events:toggle(table.unpack(args))
        end

        self.ceo_kick_event = self.events:toggle_loop(T'Block CEO/MC Kick', {}, T'Block CEO/MC kick event', function()
            local ceo_kick = memory.script_global(Globals.CeoKickProtection1)
            memory.write_byte(memory.script_global(Globals.CeoKickProtection), 1)
            memory.write_byte(ceo_kick, memory.read_byte(ceo_kick) & ~(1 << 5))
        end, function()
            memory.write_byte(memory.script_global(Globals.CeoKickProtection), 0)
        end)
    end

    function IsValidPlate(plate)
        return plate:match('%d%d%a%a%a%d%d%d') ~= nil
    end

    function IsModdedPlate(plate)
        local function HasDuplicates(str)
            local chars = {}
            for i = 1, #str do
                local char = str:sub(i, i)
                if chars[char] then
                    return true
                end
                chars[char] = true
            end
            return false
        end
        
        local function CountDuplicates(str)
            local chars = {}
            for i = 1, #str do
                local char = str:sub(i, i)
                if chars[char] then
                    chars[char] += 1
                else
                    chars[char] = 1
                end
            end
            return chars
        end

        local function HasConsecutive(str)
            local last = nil
            for i = 1, #str do
                local char = str:sub(i, i)
                if last then
                    if last == char then
                        return true
                    end
                end
                last = char
            end
            return false
        end

        if HasDuplicates(plate) and HasConsecutive(plate) then
            return true
        elseif not HasConsecutive(plate) and HasDuplicates(plate) then
            local counts = CountDuplicates(plate)
            if #counts > 1 then
                return true
            else
                return false
            end
        else
            return false
        end
    end

    function CalculateEntropy(str)
        local entropy = 0
        local len = #str
        local chars = {}
    
        for i = 1, len do
            local char = str:sub(i, i)
            if not chars[char] then
                chars[char] = 1
            else
                chars[char] += 1
            end
        end
    
        for _, count in pairs(chars) do
            local p = count / len
            entropy -= p * math.log(p, 2)
        end
    
        return entropy
    end
end

return Protections