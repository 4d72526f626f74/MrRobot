local Entity, Vehicle = require('entity'), require('vehicle')
local GTAClasses = require('gta_classes')
local Memory = {}

util.joaat = (function(func)
    local cache = {}
    return function(str)
        if not cache[str] then
            local result = func(str)
            cache[str] = result
            return result
        end
        return cache[str]
    end
end)(util.joaat)

string.joaat = util.joaat

players.localplayer = (function(func)
    local cached = nil
    return function()
        if cached ~= nil then
            cached.entity = players.user_ped()
            cached.ptr = entities.handle_to_pointer(cached.entity)
            return cached
        else
            cached = func()
            if cached.entity ~= players.user_ped() then
                cached.entity = players.user_ped()
                cached.ptr = entities.handle_to_pointer(cached.entity)
            end
            return cached
        end
    end
end)(function()
    return pluto_new Entity(players.user_ped())
end)

players.localplayer_vehicle = (function(func)
    local cached = nil
    return function()
        local vehicle = ped.get_vehicle_ped_is_in(players.user_ped())
        if cached ~= nil then
            cached.entity = vehicle
            cached.ptr = entities.handle_to_pointer(cached.entity)
            return cached
        else
            cached = func(vehicle)
            if cached.entity ~= vehicle then
                cached.entity = vehicle
                cached.ptr = entities.handle_to_pointer(cached.entity)
            end
            return cached
        end
    end
end)(function(entity)
    return pluto_new Vehicle(entity)
end)

directx.create_texture = (function(func)
    local cache = {}
    return function(path)
        if not cache[path] then
            local result = func(path)
            cache[path] = result
            return result
        end
        return cache[path]
    end
end)(directx.create_texture)

util.reverse_joaat = (function(func)
    return function(hash)
        local str = func(hash)
        if str == '' then
            if hash == ('GROUP_SNIPER'):joaat() or hash == -1212426201 then
                return 'GROUP_SNIPER'
            elseif hash == ('GROUP_RIFLE'):joaat() then
                return 'GROUP_RIFLE'
            elseif hash == ('GROUP_MG'):joaat() then
                return 'GROUP_MG'
            elseif hash == ('GROUP_SHOTGUN'):joaat() then
                return 'GROUP_SHOTGUN'
            elseif hash == ('GROUP_HEAVY'):joaat() then
                return 'GROUP_HEAVY'
            elseif hash == ('GROUP_RUBBERGUN'):joaat() then
                return 'GROUP_RUBBERGUN'
            elseif hash == 416676503 then
                return 'GROUP_PISTOL'
            elseif hash == 1548507267 then
                return 'GROUP_THROWABLE'
            elseif hash == -1609580060 then
                return 'GROUP_MELEE'
            elseif hash == -957766203 then
                return 'GROUP_SMG'
            else
                return ''
            end
        else
            return str
        end
    end
end)(util.reverse_joaat)

entities.set_owner = function(ptr, pid)
    if ptr ~= 0 then
        local net_obj = memory.read_long(ptr + 0xD0)
        if net_obj ~= 0 and players.exists(pid) then
            memory.write_byte(net_obj + 0x49, pid)
            memory.write_byte(net_obj + 0x4B, pid)
        end
    end
end

players.get_pid_from_name = function(name)
    for players.list() as pid do
        if players.get_name(pid) == name then
            return pid
        end
    end
    return -1
end

function memory.rva(sg_offset)
    return sg_offset << 3
end

function memory.sg_offset(rva)
    return rva >> 3
end

players.cped = function() return GTAClasses.CPed:new(entities.handle_to_pointer(players.user_ped())) end

players.cvehicle = function()
    local veh = entities.get_user_vehicle_as_pointer()
    if veh ~= 0 then
        return GTAClasses.CVehicle:new(veh)
    else
        return 0
    end
end

entities.cped_from_ped = function(ped) return GTAClasses.CPed:new(entities.handle_to_pointer(ped)) end

function v3.length(self) 
    return math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z) 
end

function util.log(msg) 
    print($'[MrRobot] {msg}') 
end

function util.error(err) 
    util.toast($'Error occured: {msg}') 
end

function util.copy_addr(addr) 
    return util.copy_to_clipboard(string.format('%X', addr)) 
end

function string.g(raw, index=-1)
    if index == -1 then index = players.user() end
    if not raw:find('Global') then return end
    if not raw:find('%[.*%]') and not raw:find('/%*%d+%*/') then
        local base = raw:match('%d+')
        for offset in raw:gmatch('%.f_%d+') do base = base + tonumber(offset:sub(4)) end
        return memory.script_global(base)
    elseif raw:find('%[.*%]') and raw:find('/%*%d+%*/') and not raw:find('func_%d+') then
        local base = raw:match('%d+')
        local size = raw:match('/%*(%d+)%*/')
        for offset in raw:gmatch('%.f_%d+') do base = base + tonumber(offset:sub(4)) end
        local id = raw:match('%[(%d+)')
        return memory.script_global(base + (id == nil ? (index * size) + 1 : id * size))
    elseif raw:find('func_%d+') and raw:find('/*%d+*/') then
        local base = raw:match('%d+')
        local size = raw:match('/%*(%d+)%*/')
        for offset in raw:gmatch('%.f_%d+') do base = base + tonumber(offset:sub(4)) end
        return memory.script_global(base + 1 + (index * size))
    else
        local base = raw:match('%d+')
        local id = raw:match('%[(%d+)%]')
        for offset in raw:gmatch('%.f_%d+') do base = base + tonumber(offset:sub(4)) end
        return memory.script_global(base + tonumber(id) + 1)
    end
end

function string.hex(data, include_id=true)
    return string.format(include_id ? '0x%X' : '%X', data) 
end

function string.hash(data, mask)
    mask = mask or 0xFFFFFFFFFFFFFFFF
    local final = 0
    for i = 1, #data do
        local char = data:byte(i)
        final = final ~ ((final >> 13) | (final << (32 - 13))) + char
    end
    return final & mask
end

function memory.write(addr, value)
    local value_type = type(value)

    if value_type == 'number' then
        local bits = math.floor(math.log(value, 2)) + 1
        if bits <= 8 then
            memory.write_byte(addr, value)
        elseif bits <= 16 then
            memory.write_short(addr, value)
        elseif bits <= 32 then
            memory.write_int(addr, value)
        elseif bits <= 64 then
            memory.write_long(addr, value)
        end
    elseif value_type == 'string' then
        memory.write_string(addr, value)
    end
end

players.max_players = 31
entities.entity = Entity
memory.write_byte = memory.write_ubyte
memory.write_short = memory.write_ushort
memory.write_int = memory.write_uint

memory.alloc = (function(func)
    return function(size)
        size = size or 24
        if not Memory[size] then Memory[size] = {} end
        if size <= 8 then
            if #Memory[size] <= 10 then
                local addr = func(size)
                table.insert(Memory[size], addr)
                return addr
            else
                local rand = math.random(1, #Memory[size])
                return Memory[size][rand]
            end
        else
            if #Memory[size] <= 0 then
                local addr = func(size)
                table.insert(Memory[size], addr)
                return addr
            else
                return Memory[size][1]
            end
        end
    end
end)(memory.alloc)

if VERSION_MISMATCH then
    for k, v in pairs(memory) do
        if k:find('read') then
            memory[k] = function(addr)
                return 0
            end
            util.log($'Disabled function memory.{k}')
        elseif k:find('write') then
            memory[k] = function(addr, value)
                return
            end
            util.log($'Disabled function memory.{k}')
        end
    end
end
