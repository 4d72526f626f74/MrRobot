local Shared = require('shared')
local T = require('translations')
local Bit, BitMask = Shared.Bit, Shared.BitMask
local PLAYER_ID = Shared.PLAYER_ID

local GetPlayerPed = Shared.GetPlayerPed
local IsEntityDead = Shared.IsEntityDead
local GetOffsetFromEntityInWorldCoords = Shared.GetOffsetFromEntityInWorldCoords
local GetDistanceBetweenCoords = Shared.GetDistanceBetweenCoords
local IsPedInAnyVehicle = Shared.IsPedInAnyVehicle

--[[BOOL (bool)]] local function IsPedFacingPed(--[[Ped (int)]] ped,--[[Ped (int)]] otherPed,--[[float]] angle)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(otherPed)native_invoker.push_arg_float(angle)native_invoker.end_call_2(0xD71649DB0A545AA3)return native_invoker.get_return_value_bool()end
--[[Vector3 (vector3)]] local function GetPedBoneCoords(--[[Ped (int)]] ped,--[[int]] boneId,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_int(boneId)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.end_call_2(0x17C07FC640E86B4E)return native_invoker.get_return_value_vector3()end
--[[BOOL (bool)]] local function HasEntityClearLosToEntity(--[[Entity (int)]] entity1,--[[Entity (int)]] entity2,--[[int]] traceType)native_invoker.begin_call()native_invoker.push_arg_int(entity1)native_invoker.push_arg_int(entity2)native_invoker.push_arg_int(traceType)native_invoker.end_call_2(0xFCDFF7B72D23A1AC)return native_invoker.get_return_value_bool()end
--[[void]] local function ShootSingleBulletBetweenCoordsIgnoreEntity(--[[float]] x1,--[[float]] y1,--[[float]] z1,--[[float]] x2,--[[float]] y2,--[[float]] z2,--[[int]] damage,--[[BOOL (bool)]] p7,--[[Hash (int)]] weaponHash,--[[Ped (int)]] ownerPed,--[[BOOL (bool)]] isAudible,--[[BOOL (bool)]] isInvisible,--[[float]] speed,--[[Entity (int)]] entity,--[[Any (int)]] p14)native_invoker.begin_call()native_invoker.push_arg_float(x1)native_invoker.push_arg_float(y1)native_invoker.push_arg_float(z1)native_invoker.push_arg_float(x2)native_invoker.push_arg_float(y2)native_invoker.push_arg_float(z2)native_invoker.push_arg_int(damage)native_invoker.push_arg_bool(p7)native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(ownerPed)native_invoker.push_arg_bool(isAudible)native_invoker.push_arg_bool(isInvisible)native_invoker.push_arg_float(speed)native_invoker.push_arg_int(entity)native_invoker.push_arg_int(p14)native_invoker.end_call_2(0xE3A7742E0B7A2F8B)end
--[[BOOL (bool)]] local function IsPedShooting(--[[Ped (int)]] ped)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.end_call_2(0x34616828CD07F1A1)return native_invoker.get_return_value_bool()end
--[[Hash (int)]] local function GetSelectedPedWeapon(--[[Ped (int)]] ped)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.end_call_2(0x0A6DB4965674D243)return native_invoker.get_return_value_int()end
--[[float]] local function GetWeaponDamage(--[[Hash (int)]] weaponHash,--[[Hash (int)]] componentHash)native_invoker.begin_call()native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(componentHash)native_invoker.end_call_2(0x3133B907D8B32053)return native_invoker.get_return_value_float()end

local RefByRelPath = Shared.RefByRelPath

pluto_class PlayerAimbot
    function __construct(root)
        self.root = root:list(T'Player', {}, T'Player aimbot')
        self.bounds = { x = 0.5 - (0.02 / 2), y = 0.5 - (0.03 / 2) }
        self.target_bitfield = 0

        self.bone = 31086
        self.use_fov = true
        self.custom_fov = true
        self.ignore_vehicles = false
        self.target_friends = false
        self.show_target = true
        self.damage_override = false
        self.chance_based = false
        self.spectate = true
        self.max_distance = 100000.0

        self.fov = 1
        self.damage = 100
        self.chance = 100
        self.in_fov = false

        self.sx_ptr = memory.alloc(4)
        self.sy_ptr = memory.alloc(4)

        self:Init()
        self:HooksInit()
    end

    -- TODO: implement __index and __newindex metamethods to make the settings act more like a bitfield

    function Init()
        self.root:toggle_loop(T'Aimbot', {}, T'Enable Aimbot', Shared:Partial(self.Aimbot, self))
        self.root:toggle_loop(T'Unfair Aimbot', {}, T'Enable Unfair Aimbot', Shared:Partial(self.UnfairAimbot, self))
        self.root:divider('')

        self.root:toggle(T'Use FOV', {}, T'Use FOV', function(state)
            self.use_fov = state
        end, self.use_fov)

        self.root:toggle(T'Custom FOV', {}, T'Custom FOV', function(state)
            self.custom_fov = state
        end, self.custom_fov)

        self.root:toggle(T'Ignore Vehicles', {}, T'Ignore Vehicles', function(state)
            self.ignore_vehicles = state
        end, self.ignore_vehicles)

        self.root:toggle(T'Target Friends', {}, T'Target Friends', function(state)
            self.target_friends = state
        end, self.target_friends)

        self.root:toggle(T'Show Target', {}, T'Show Target', function(state)
            self.show_target = state
        end, self.show_target)

        self.root:toggle(T'Damage Override', {}, T'Damage Override', function(state)
            self.damage_override = state
        end, self.damage_override)

        self.root:toggle(T'Chance Based', {}, T'Chance Based', function(state)
            self.chance_based = state
        end, self.chance_based)

        self.root:toggle(T'Spectate', {}, T'Spectate the player before shooting to ensure they die', function(state)
            self.spectate = state
        end, self.spectate)

        self.root:textslider(T'Bone', {}, T'Bone to target', {'Head', 'Chest', 'Stomach', 'Left Foot', 'Right Leg', 'Left Hand', 'Right Hand', 'Pelvis', 'Left Leg', 'Left Knee', 'Left Arm'}, function(index)
            self.bone = Shared.AimbotBones[index] or 31086
        end, self.bone)

        self.root:slider(T'FOV', {}, T'The FOV the player must be in for the aimbot to aimbot', 1, 180, self.fov, 1, function(fov)
            self.fov = fov
        end)

        self.root:slider(T'Damage', {}, T'The damage the aimbot will do', 1, Shared.MAX_INT, self.damage, 1, function(damage)
            self.damage = damage
        end)

        self.root:slider(T'Chance', {}, T'How often will the aimbot miss intentionally', 0, 100, self.chance, 1, function(chance)
            self.chance = chance
        end)

        self.target_list = self.root:list(T'Targets', {}, T'Who will the aimbot target?')
    end

    function HooksInit()
        players.add_command_hook(function(pid, root)
            xpcall(function()
                self.target_bitfield = Bit:Set(self.target_bitfield, pid)
                local name = players.get_name(pid)
                if pid == PLAYER_ID and name ~= 'UndiscoveredPlayer' then return end
                if RefByRelPath(self.target_list, name):isValid() then return end
                self.target_list:toggle(players.get_name(pid), {}, '', function(state)
                    self.target_bitfield = state and Bit:Set(self.target_bitfield, pid) or Bit:Clear(self.target_bitfield, pid)
                end, Bit:Check(self.target_bitfield, pid))
            end, |err| -> nil)
        end)

        players.on_leave(function(pid, name)
            xpcall(function()
                self.target_bitfield = Bit:Clear(self.target_bitfield, pid)
                local ref = RefByRelPath(self.target_list, name)
                if ref:isValid() then
                    ref:delete()
                end
            end, |err| -> nil)
        end)
    end

    function Aimbot()
        local player = nil
        local player_ped = GetPlayerPed(PLAYER_ID)

        if self.custom_fov then
            player = self:GetClosestPlayer()
        else
            local pid = 0
            for pid = 0, 32 do
                if Shared:PlayerInList(pid) then
                    local ped = GetPlayerPed(pid)
                    if ped ~= player_ped then
                        if IsPedFacingPed(player_ped, ped, self.fov) then
                            player = pid
                            break
                        end
                    end
                end
            end
        end

        if player ~= nil then
            local ped = GetPlayerPed(player)
            local visible = HasEntityClearLosToEntity(player_ped, ped, 17)
    
            if self.show_target and ped ~= player_ped then
                local ped_bone = GetPedBoneCoords(ped, self.bone, 0.0, 0.0, 0.0)
                util.draw_ar_beacon(ped_bone)
                Shared.Debug('Target: ' .. players.get_name(player))
            end
    
            if visible then
                if self.use_fov then
                    for Shared.AimbotBones as bone do
                        if self:BoneWithinBounds(ped, bone) then
                            self.in_fov = true
                            break
                        else
                            self.in_fov = false
                        end
                    end
                else
                    self.in_fov = true
                end
    
                if IsPedShooting(player_ped) and self.in_fov then
                    local weapon = GetSelectedPedWeapon(player_ped)
                    local weapon_damage = GetWeaponDamage(weapon, 0)
    
                    if self.damage_override then
                        weapon_damage = self.damage
                    end
    
                    if IsPedInAnyVehicle(ped) and self.ignore_vehicles then
                        return
                    end
    
                    if IsEntityDead(ped) then
                        return
                    end
    
                    if self.chance_based then
                        local chance = math.random(1, 100)
                        if chance <= self.chance then
                            return
                        end
    
                        local from = GetPedBoneCoords(player_ped, 31086, 0.0, 0.0, 0.0)
                        local to = GetPedBoneCoords(ped, self.bone, 0.0, 0.0, 0.0)
    
                        if from ~= nil and to ~= nil then
                            self:ShootBullet(player_ped, weapon, weapon_damage, from, to)
                        end
                    else
                        local from = GetPedBoneCoords(player_ped, 31086, 0.0, 0.0, 0.0) 
                        local to = GetPedBoneCoords(ped, self.bone, 0.0, 0.0, 0.0)
                        
                        if from ~= nil and to ~= nil then
                            self:ShootBullet(player_ped, weapon, weapon_damage, from, to)
                        end
                    end
                end
            end
        end
    end

    function UnfairAimbot()
        local player = self:GetClosestPlayer()
        local player_ped = GetPlayerPed(PLAYER_ID)
        
        if player ~= nil then
            local ped = GetPlayerPed(player)
            if self.show_target and ped ~= player_ped then
                local ped_bone = GetPedBoneCoords(ped, self.bone, 0.0, 0.0, 0.0)
                util.draw_ar_beacon(ped_bone)
            end

            if IsPedShooting(player_ped) and not IsEntityDead(ped) then
                local weapon = GetSelectedPedWeapon(player_ped)
                local weapon_damage = GetWeaponDamage(weapon, 0)

                if self.damage_override then
                    weapon_damage = self.damage
                end

                local from = GetPedBoneCoords(ped, self.bone, 0.0, -0.1, 0.0) 
                local to = GetPedBoneCoords(ped, self.bone, 0.0, 0.0, 0.0)
                
                if from ~= nil and to ~= nil then
                    if self.spectate then
                        local spectate = menu.player_root(player):refByRelPath('Spectate>Nuts Method')
                        if spectate:isValid() then
                            spectate.value = true
                            util.yield(100)
                            self:ShootBullet(player_ped, weapon, weapon_damage, from, to)
                            util.yield(200)
                            spectate.value = false
                        end
                    else
                        self:ShootBullet(player_ped, weapon, weapon_damage, from, to)
                    end
                end
            end
        end
    end

    function ShootBullet(owner, weapon, damage, from, to)
        ShootSingleBulletBetweenCoordsIgnoreEntity(from.x, from.y, from.z, to.x, to.y, to.z, damage, true, weapon, owner, true, false, 1.0, owner, true)
    end

    function GetClosestPlayer()
        local distances = {}
        local player_ped = players.user_ped()
        local player_pos = GetOffsetFromEntityInWorldCoords(player_ped, 0.0, 0.0, 0.0)

        for pid = 0, 32 do
            if pid ~= PLAYER_ID then
                if Shared:PlayerInList(pid) then
                    if self.target_bitfield & (1 << pid) == (1 << pid) then
                        local ped = GetPlayerPed(pid)
                        if not IsEntityDead(ped) and not players.is_in_interior(pid) then
                            if not self.target_friends and Shared:IsPlayerFriend(pid) then
                                goto continue
                            end

                            local pos = GetOffsetFromEntityInWorldCoords(ped, 0.0, 0.0, 0.0)
                            local dist = player_pos:distance(pos)

                            distances[pid] = dist
                        end
                    end
                end
            end

            ::continue::
        end

        local smallest_distance = self.max_distance
        local closest_entity = nil

        for pid, distance in pairs(distances) do
            if distance < smallest_distance then
                smallest_distance = distance
                closest_entity = pid
            end
        end

        return closest_entity
    end

    function BoneWithinBounds(ped, bone)
        local bone_coords = GetPedBoneCoords(ped, bone, 0.0, 0.0, 0.0)
        local world_coords = Shared:WorldToScreen(bone_coords, self.sx_ptr, self.sy_ptr)
        bone_coords.z = bone_coords.z + 0.15
        
        if world_coords ~= nil then
            local x1, y1 = world_coords.x, world_coords.y
            local x2, y2 = self.bounds.x, self.bounds.y
            local dist = (x2 - x1) ^ 2 + (y2 - y1) ^ 2
    
            if dist <= self.fov / 180 then
                return true
            else
                return false
            end
        end
    end
end

return PlayerAimbot