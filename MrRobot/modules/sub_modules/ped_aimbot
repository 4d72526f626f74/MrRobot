local T, S = require('translations'), require('shared')

enum FOVTypes begin
    Normal = 1,
    Precision = 2
end

pluto_class PedAimbot
    function __construct(root)
        self.root = root:list(T'Ped', {T'rpedaimbot'}, T'Ped Aimbot')
        self.fov = 1
        self.fov_types = {'Normal', 'Precision'}
        self.fov_type = 1
        self.ignore_vehicles = true
        self.use_fov = true
        self.show_target = true
        self.damage_override = false
        self.visible_check = true

        self.bone = 31086
        self.damage = 100
        self.in_fov = false

        self.sx_ptr = memory.alloc(4)
        self.sy_ptr = memory.alloc(4)

        self:Init()
    end

    function Init()
        self.root:toggle_loop(T'Aimbot', {}, T'Ped Aimbot', || -> self:Aimbot())
        self.root:divider('')

        self.root:toggle(T'Use FOV', {}, T'Will the aimbot use FOV or just annihilate them regardless of where you aim?', function(state)
            self.use_fov = state
        end, self.use_fov)

        self.root:toggle(T'Ignore Vehicles', {}, T'Will the aimbot ignore vehicles?', function(state)
            self.ignore_vehicles = state
        end, self.ignore_vehicles)

        self.root:toggle(T'Show Target', {}, T'Will the aimbot show the target?', function(state)
            self.show_target = state
        end, self.show_target)

        self.root:toggle(T'Damage Override', {}, T'Will the aimbot override the damage?', function(state)
            self.damage_override = state
        end, self.damage_override)

        self.root:toggle(T'Visible Check', {}, T'Will the aimbot check if the target is visible?', function(state)
            self.visible_check = state
        end, self.visible_check)

        self.root:toggle_loop(T'Display Range', {}, T'Tells you when you\'re too far away from your target', function()
            local target = self:GetTarget()
            if target ~= nil then
                local player_coords = players.get_position(players.user())
                local target_coords = entity.get_entity_coords(target)
                local distance = player_coords:distance(target_coords)
                local weapon_manager = entities.get_weapon_manager(entities.handle_to_pointer(players.user_ped()))
                local current_weapon = memory.read_long(weapon_manager + 0x0020)
                local max_distance = memory.read_float(current_weapon + 0x028C)
                local in_range = (distance <= max_distance) ? 'In Range' : 'Out of Range'
                util.draw_debug_text($'{distance} / {max_distance} ({in_range})')
            end
        end)

        self.root:divider('')

        self.root:list_select(T'Bone', {}, T'Bone to target', {'Head', 'Chest', 'Stomach', 'Left Foot', 'Right Leg', 'Left Hand', 'Right Hand', 'Pelvis', 'Left Leg', 'Left Knee', 'Left Arm'}, 1, function(index)
            self.bone = S.AimbotBones[index] or 31086
        end, self.bone)

        self.root:list_select(T'FOV Type', {}, T'The type of FOV', self.fov_types, 1, function(index)
            self.fov_type = index
        end)

        self.normal_fov = self.root:slider(T'FOV', {T'rpedaimbotfov'}, T'The FOV of the aimbot', 0, 180, self.fov, 1, function(value)
            if self.fov_type == FOVTypes.Normal then
                self.fov = value
            end
        end)

        self.precise_fov = self.root:slider_float(T'Precision FOV', {T'rpedaimbotfovp'}, T'A more precise FOV for the aimbot', 0.0, 180.0 * 100, self.fov * 100, 1.0, function(value)
            if self.fov_type == FOVTypes.Precision then
                self.fov = value / 100
            end
        end)

        self.root:slider(T'Damage', {}, T'The damage of the aimbot', 0, math.max_int, self.damage, 1, function(value)
            self.damage = value
        end)
    end

    function Aimbot()
        if self.fov_type == FOVTypes.Normal then
            self.fov = self.normal_fov.value
        elseif self.fov_type == FOVTypes.Precision then
            self.fov = self.precise_fov.value / 100
        end

        local target = self:GetTarget()
        if target ~= nil then
            if self.show_target then
                local coords = ped.get_ped_bone_coords(target, self.bone, 0.0, 0.0, 0.0)
                if graphics.get_screen_coord_from_world_coord(coords.x, coords.y, coords.z, self.sx_ptr, self.sy_ptr) then
                    local sx, sy = memory.read_float(self.sx_ptr), memory.read_float(self.sy_ptr)
                    directx.draw_line(0.5, 0.5, sx, sy, { r=1, g=0, b=0, a=1 })
                end
            end

            local localplayer = players.localplayer()
            local weapon_hash = localplayer:get_selected_ped_weapon()
            local damage = self.damage_override ? self.damage : weapon.get_weapon_damage(weapon_hash, self.bone)

            if localplayer:is_ped_shooting() then
                if not ped.is_ped_in_any_vehicle(target) then
                    if self.visible_check then
                        if localplayer:has_entity_clear_los_to_entity(target, 17) then
                            local from = localplayer:get_ped_bone_coords(31086, 0.0, 0.0, 0.0)
                            local to = ped.get_ped_bone_coords(target, self.bone, 0.0, 0.0, 0.0)
                            self:ShootBullet(localplayer.entity, weapon_hash, damage, from, to)
                        end
                    else
                        local from = ped.get_ped_bone_coords(target, 24816, 1.0, 0.0, 0.0)
                        local to = ped.get_ped_bone_coords(target, self.bone, 0.0, 0.0, 0.0)
                        self:ShootBullet(localplayer.entity, weapon_hash, damage, from, to)
                    end
                else
                    if self.visible_check then
                        if localplayer:has_entity_clear_los_to_entity(target, 17) then
                            local from = localplayer:get_ped_bone_coords(31086, 0.0, 0.0, 0.0)
                            local to = ped.get_ped_bone_coords(target, self.bone, 0.0, 0.0, 0.0)
                            self:ShootBullet(localplayer.entity, weapon_hash, damage, from, to)
                        end
                    else
                        local from = ped.get_ped_bone_coords(target, 39317, 0.0, 1.0, 0.2)
                        local to = ped.get_ped_bone_coords(target, self.bone, 0.0, 0.0, 0.0)
                        self:ShootBullet(localplayer.entity, weapon_hash, damage, from, to)
                    end
                end
            end
        end
    end

    function GetTarget()
        local target = nil
        local player_coords = players.get_position(players.user())
        local weapon_manager = entities.get_weapon_manager(entities.handle_to_pointer(players.user_ped()))
        local current_weapon = memory.read_long(weapon_manager + 0x0020)
        local max_distance = memory.read_float(current_weapon + 0x028C)
        for entities.get_all_peds_as_handles() as ent do
            local coords = entity.get_entity_coords(ent)
            if not ped.is_ped_a_player(ent) and not entity.is_entity_dead(ent) then
                if player_coords:distance(coords) > max_distance then
                    goto continue
                elseif self.visible_check and not entity.has_entity_clear_los_to_entity(players.user_ped(), ent, 17) then
                    goto continue
                elseif self.ignore_vehicles and ped.is_ped_in_any_vehicle(ent, false) then
                    goto continue
                end

                local fov = (self.use_fov) ? self.fov : 180
                if ped.is_ped_facing_ped(players.user_ped(), ent, fov) then
                    target = ent
                    break
                end
            end

            ::continue::
        end

        return target
    end

    function ShootBullet(owner, weapon, damage, from, to)
        misc.shoot_single_bullet_between_coords_ignore_entity(from.x, from.y, from.z, to.x, to.y, to.z, damage, true, weapon, owner, true, false, 1.0, owner, true)
    end
end

return PedAimbot