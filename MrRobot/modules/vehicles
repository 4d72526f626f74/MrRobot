local shadow_root = menu.shadow_root()
local T, S = require('translations'), require('shared')
local Bitfield = require('bitfield')
local VehModels = require('vehicle_models')
local Globals = require('script_globals')
local ScriptOffsets = require('offsets')
local Masks = require('masks')
local PVM = require('pvm')
local VehicleHandling = require('vehicle_handling')

local CharSlot, PlayerID = S.CHAR_SLOT, S.PLAYER_ID
local Offsets = ScriptOffsets.Vehicles.LSCustoms
local VehicleBitfield = ScriptOffsets.Vehicles.VehicleBitfield

pluto_class Vehicles
    ScriptGlobal = S.ScriptGlobal
    ReadByte = memory.read_byte
    ReadShort = memory.read_short
    ReadInt = memory.read_int
    ReadFloat = memory.read_float
    ReadString = memory.read_string
    WriteByte = memory.write_byte
    WriteShort = memory.write_short
    WriteInt = memory.write_int
    WriteFloat = memory.write_float
    WriteString = memory.write_string

    function __construct(root)
        self.vehicles = root:list(T'Vehicles', {T'rvehicles'}, T'Vehicles')
        self.gifting = self.vehicles:list(T'Gifting', {T'rgifting'}, T'Gifting')
        self.mors = self.vehicles:list(T'Mors Mutual', {T'rmors'}, T'Mors Mutual')
        self.tunables = self.ScriptGlobal(262145)

        self:CreateGiftingOptions()
        self:CreateMorsOptions()
        self:CreatePVManager()
        self:CreateCounterMeasures()
        self:CreateTunableOptions()
        self:CreateHandlingEditor()

        local AIHandling = {
            'AVERAGE',
            'TRUCK',
            'CRAP',
            'SPORTS_CAR'
        }

        self.vehicles:divider('')
        self.vehicles:toggle_loop(T'Improved Wheelie', {T'rimprovedwheelie'}, T'Improves the wheelie handling of bikes, allowing you to wheelie at high speeds and lean back pretty far', function(state)
            if self.IsPedInAnyVehicle(players.user_ped()) then
                local Veh = entities.get_user_vehicle_as_pointer()
                if Veh ~= 0 then
                    local CHandlingData = entities.vehicle_get_handling(Veh)
                    local CBikeHandlingData = entities.handling_get_subhandling(CHandlingData, 0)

                    if CBikeHandlingData ~= 0 then
                        if self.ReadFloat(CBikeHandlingData + 0x14) ~= 25.0 then
                            self.WriteFloat(CBikeHandlingData + 0x14, 25.0)
                        end

                        if self.ReadFloat(CBikeHandlingData + 0x3C) ~= -60.0 then
                            self.WriteFloat(CBikeHandlingData + 0x3C, -60.0)
                        end

                        if self.ReadFloat(CBikeHandlingData + 0x40) ~= 70.0 then
                            self.WriteFloat(CBikeHandlingData + 0x40, 70.0)
                        end
                    end
                end
            end
        end,
        function()
            if self.IsPedInAnyVehicle(players.user_ped()) then
                local Veh = entities.get_user_vehicle_as_pointer()
                if Veh ~= 0 then
                    local CHandlingData = entities.vehicle_get_handling(Veh)
                    local CBikeHandlingData = entities.handling_get_subhandling(CHandlingData, 0)

                    if CBikeHandlingData ~= 0 then
                        self.WriteFloat(CBikeHandlingData + 0x14, 13.0)
                        self.WriteFloat(CBikeHandlingData + 0x3C, -1.0)
                        self.WriteFloat(CBikeHandlingData + 0x40, 60.0)
                    end
                end
            end
        end)

        self.vehicles:toggle_loop(T'BMX Superjump', {T'rbmxsuperjump'}, T'Jump higher on a BMX', function(state)
            if self.IsPedInAnyVehicle(players.user_ped()) then
                local Veh = entities.get_user_vehicle_as_pointer()
                if Veh ~= 0 then
                    local CHandlingData = entities.vehicle_get_handling(Veh)
                    local CBikeHandlingData = entities.handling_get_subhandling(CHandlingData, 0)

                    if CBikeHandlingData ~= 0 then
                        if self.ReadFloat(CBikeHandlingData + 0x58) ~= 20.0 then
                            self.WriteFloat(CBikeHandlingData + 0x58, 20.0)
                        end
                    end
                end
            end
        end,
        function()
            if self.IsPedInAnyVehicle(players.user_ped()) then
                local Veh = entities.get_user_vehicle_as_pointer()
                if Veh ~= 0 then
                    local CHandlingData = entities.vehicle_get_handling(Veh)
                    local CBikeHandlingData = entities.handling_get_subhandling(CHandlingData, 0)

                    if CBikeHandlingData ~= 0 then
                        self.WriteFloat(CBikeHandlingData + 0x58, 5.0)
                    end
                end
            end
        end)

        self.enable_kers = self.vehicles:toggle(T'Enable Kers', {}, T'Enables kers on the vehicle', function(state)
            if self.IsPedInAnyVehicle(players.user_ped()) then
                local Veh = entities.get_user_vehicle_as_pointer()
                if Veh ~= 0 then
                    local CHandlingData = entities.vehicle_get_handling(Veh)
                    local Address = CHandlingData + 0x128
                    if state then
                        self.WriteByte(Address, self.ReadByte(Address) | (1 << 2))
                    else
                        self.WriteByte(Address, self.ReadByte(Address) & ~(1 << 2))
                    end
                    self.SetVehicleKersAllowed(entities.pointer_to_handle(Veh), true)
                end
            else
                self.enable_kers.value = false
            end
        end)

        self.horn_boost = self.vehicles:toggle_loop(T'Horn Boost', {T'rhornboost'}, T'Boost your vehicle by honking', function(state)
            if self.IsPedInAnyVehicle(players.user_ped()) then
                local Veh = entities.get_user_vehicle_as_pointer()
                if Veh ~= 0 then
                    local Speed = self.horn_boost_speed
                    local Relative = self.horn_boost_speed_rel
                    local Handle = entities.pointer_to_handle(Veh)
                    if self.IsPlayerPressingHorn(PlayerID) then
                        if not Relative.value then
                            self.SetVehicleForwardSpeed(Handle, Speed.value)
                        else
                            self.SetVehicleForwardSpeed(Handle, self.GetEntitySpeed(Handle) + Speed.value)
                        end
                    end
                else
                    self.horn_boost.value = false
                end
            end
        end)

        self.vehicles:toggle_loop(T'Drift', {}, T'Hold shift to drift', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                if util.is_key_down(0xA0) then
                    self.SetDriftTyres(Veh, true)
                else
                    self.SetDriftTyres(Veh, false)
                end
            end
    
            util.yield(120)
        end,
        function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.SetDriftTyres(Veh, false)
            end
        end)

        self.vehicles:toggle(T'Interior Light', {}, T'Enables the dashboard light within your vehicle', function(state)
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.SetVehicleInteriorlight(Veh, state)
                self.SetVehicleForceInteriorlight(Veh, state)
            end
        end)

        self.vehicles:toggle_loop(T'Set Torque Multiplier', {}, T'Set the torque multiplier of your vehicle', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                local Torque = self.torque_multiplier
                self.SetVehicleCheatPowerIncrease(Veh, Torque.value / 100)
            end
    
            util.yield(120)
        end)

        self.vehicles:toggle(T'Inverted Controls', {}, T'Inverts the controls of your vehicle', function(state)
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.SetInvertVehicleControls(Veh, state)
            end
        end)

        self.vehicles:action(T'Change License Plate', {}, T'Change the license plate of your vehicle (works on personal vehicles)', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            local Personal = self:GetVehicleFromNetId(PlayerID)
            if Veh ~= Personal then
                local Plate = S:DisplayOnscreenKeyboard()
                self.SetVehicleNumberPlateText(Veh, Plate)
            else
                local PvSlot = self.ScriptGlobal(Globals.ActivePVSlot)
                local Data = self.ScriptGlobal(Globals:PersonalVehicleData(self.ReadShort(PvSlot)))
                local Plate = S:DisplayOnscreenKeyboard()
                self.WriteString(Data + Offsets.LicensePlate, Plate)
            end
        end)

        self.vehicles:list_select(T'AIHandling', {}, T'Change the vehicles handling meta', AIHandling, 1, function(index)
            local Value = AIHandling[index]
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.SetVehicleHandlingOverride(Veh, joaat(Value))
                util.toast(T'Changed handling to ' .. Value)
            end
        end)

        self.vehicles:action(T'Detach Windscreen', {}, T'Detach the windscreen of your vehicle', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.PopOutVehicleWindscreen(Veh)
            end
        end)

        self.vehicles:action(T'Pop Off Roof', {}, T'Pops off the roof, does not work for all vehicles', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.PopOffVehicleRoofWithImpulse(Veh, 0.0, 0.0, 0.0)
            end
        end)

        self.vehicles:action(T'Smash Windows', {}, T'Smash all the windows of your vehicle', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                for i = 0, 7 do
                    self.SmashVehicleWindow(Veh, i)
                end
            end
        end)

        self.vehicles:action(T'Roll Down Windows', {}, T'Roll down all the windows of your vehicle', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.RollDownWindows(Veh)
            end
        end)

        self.vehicles:action(T'Roll Up Windows', {}, T'Roll up all the windows of your vehicle', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.RollUpWindow(Veh, 0)
            end
        end)

        self.vehicles:action(T'Fix Windows', {}, T'Fix all the windows of your vehicle', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                for i = 0, 7 do
                    self.FixVehicleWindow(Veh, i)
                end
            end
        end)

        self.vehicles:action(T'Remove Windows', {}, T'Remove all the windows of your vehicle', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                for i = 0, 7 do
                    self.RemoveVehicleWindow(Veh, i)
                end
            end
        end)

        self.vehicles:action(T'Fix Vehicle', {}, T'Fixes the vehicle, what else?', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.SetVehicleFixed(Veh)
            end
        end)

        self.vehicles:action(T'Fix Deformation', {}, T'Fixes deformation but doesn\'t restore the vehicles health', function()
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.SetVehicleDeformationFixed(Veh)
            end
        end)

        self.vehicles:divider('')

        self.horn_boost_speed = self.vehicles:slider(T'Horn Boost Speed', {T'rhornboostspeed'}, T'Set the speed of the Horn Boost', 0, S.MAX_INT, 100, 1, function(value) end)
        self.horn_boost_speed_rel = self.vehicles:toggle(T'Horn Boost Speed Relative', {T'rhornboostrelspeed'}, T'Make the horn boost speed be added relative to your current speed', function() end)
        
        self.vehicles:slider_float(T'Vehicle Headlights Multiplier', {T'rvehlightmultiplier'}, T'Set the multiplier for vehicle lights', 0.0, S.MAX_FLOAT, 1.0 * 100, 1.0 * 100, function(value) 
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.SetVehicleLightMultiplier(Veh, value / 100)
            end
        end)
    
        self.vehicles:slider_float(T'Set Max Speed', {T'rmaxspeed'}, T'Set the max speed of the vehicle', 0.0, S.MAX_FLOAT, 0.0, 1.0 * 100, function(value) 
            local Veh = self:GetPedVehicle(players.user_ped())
            if Veh ~= 0 then
                self.SetVehicleMaxSpeed(Veh, value / 100)
                self.SetEntityMaxSpeed(Veh, value / 100)
            end
        end)
        
        self.torque_multiplier = self.vehicles:slider_float(T'Torque Multiplier', {T'rtorquemultiplier'}, T'Set the torque multiplier of the vehicle', 0.0, S.MAX_FLOAT, 1.0 * 100, 1.0 * 100, function(value) end)
    end

    function ToggleOwnerCheck(state)
        self.WriteByte(self.ScriptGlobal(Globals.PVOwnershipBypass), state ? 1 : 0)
    end

    function ClaimVehicle(Slot, Respawn=false)
        local Data = self.ScriptGlobal(Globals:PersonalVehicleData(Slot))
        local VBitfield = Bitfield.new(self.ReadInt(Data + Offsets.VehicleBitfield))
        VBitfield.address = Data + Offsets.VehicleBitfield

        if VBitfield:IsSet(VehicleBitfield.Destroyed) or VBitfield:IsSet(VehicleBitfield.Impounded) then
            VBitfield:Clear(0x23)
            if not Respawn then
                VBitfield:Set(VehicleBitfield.Insured)
            else
                VBitfield:Set(0x5)
            end
        end
    end

    function GetNetworkId(pid)
        return self.ReadInt(self.ScriptGlobal(Globals:PlayerPVNetworkID(pid))) -- Global_2657589[PLAYER::PLAYER_ID() /*466*/].f_38
    end
    
    function GetVehicleFromNetId(pid)
        return self.NetToVeh(self:GetNetworkId(pid))
    end
    
    function GetPedVehicle(ped)
        if self.IsPedInAnyVehicle(ped) then
            return self.GetVehiclePedIsIn(ped, false)
        else
            return 0
        end
    end

    function CreateGiftingOptions()
        self.gifting:action(T'Gift Vehicle', {T'rgiftself'}, T'Improved version of Stand\'s gift vehicle (THIS IS NOT FOR OTHER PLAYERS!)', function()
            local Ped = players.user_ped()
            if not self.IsPedInAnyVehicle(Ped, false) then
                util.toast('You are not in a vehicle!')
            end
            local Veh = self:GetPedVehicle(Ped)
            local Start = os.time() + 30

            if Veh == 0 or Veh == nil then
                return
            end

            local NetHash = self.NetworkHashFromPlayerHandle(PlayerID)
            local PlayerVeh = entities.get_user_vehicle_as_pointer()

            self.DecorSetInt(Veh, 'MPBitset', self.DecorGetInt(PlayerVeh, 'MPBitset') | Masks.VehicleGifting)
            self:ToggleOwnerCheck(false)
            for {'Player_Vehicle', 'Veh_Modded_By_Player'} as Decor do self.DecorSetInt(Veh, Decor, NetHash) end
            for {'Previous_Owner', 'PV_Slot'} as Decor do self.DecorSetInt(Veh, Decor, 0) end
            self.SetVehicleIsStolen(Veh, false)

            local Interior = self.GetInteriorFromEntity(Ped)
            repeat
                util.yield_once()
                if os.time() >= Start then
                    self:ToggleOwnerCheck(true)
                    return util.toast('Failed to gift vehicle, timed out because you took to long')
                end
                Interior = self.GetInteriorFromEntity(Ped)
            until Interior ~= 0
            repeat
                util.yield_once()
                Interior = self.GetInteriorFromEntity(Ped)
            until Interior == 0

            util.yield(1000)
            if self.delete_vehicle:isValid() then
                self.delete_vehicle:trigger()
                util.yield_once()
                self.delete_vehicle:trigger()
            end

            self:ToggleOwnerCheck(true)
        end)

        self.delete_vehicle = self.gifting:action(T'Delete Obstructing Vehicle', {}, T'Delete the invisible vehicle infront of the garage', function()
            for entities.get_all_vehicles_as_pointers() as Entity do
                local Handle = entities.pointer_to_handle(Entity)
                if not self.IsEntityVisible(Handle) then
                    entities.delete_by_pointer(Entity)
                    util.toast('Deleted ' .. Handle)
                end
            end
        end)
    end

    function CreateMorsOptions()
        self.mors:divider('Settings')
        self.mors_respawn = self.mors:toggle(T'Respawn Next To You', {}, T'Should the vehicle respawn next to you after being claimed?', function() end)
        self.mors:divider('')
        
        self.mors_claim_all = self.mors:action(T'Claim All Personal Vehicles', {}, T'Claims all your personal vehicles from mors mutual', function()
            for Slot = 0, 415 do
                self:ClaimVehicle(Slot)
            end
        end)

        self.mors_claim_current = self.mors:action(T'Claim Personal Vehicle', {}, T'Claim your active personal vehicle', function()
            self:ClaimVehicle(self.ReadShort(self.ScriptGlobal(Globals.ActivePVSlot)), self.mors_respawn.value)
        end)

        self.mors:divider('')
        self.mors:toggle_loop(T'Auto Claim All', {}, T'Automatically claim all your vehicles', function() self.mors_claim_all:trigger() end)
        self.mors:toggle_loop(T'Auto Claim Current', {}, T'Automatically claim your current vehicle', function() self.mors_claim_current:trigger() end)
    end

    function CreatePVManager()
        local Manager = pluto_new PVM(self.vehicles)
    end

    function CreateCounterMeasures()
        local VehCM = self.vehicles:list(T'Counter Measures', {}, T'Vehicle counter measures')
        VehCM:action(T'Fire Flares', {}, T'Fire flare countermeasure', function()
            if self.IsPedInAnyVehicle(players.user_ped()) then
                local Veh = self.GetVehiclePedIsIn(players.user_ped(), false)
                local Coords = self.GetEntityCoords(Veh)
                local Heading = self.GetEntityHeading(Veh)
                local Model = self.GetEntityModel(Veh)
                local Offset = {x=0, y=0, z=0}
    
                if util.reverse_joaat(Model) == 'oppressor2' then
                    Offset.x = 1
                    Offset.y = 4
                    Offset.z = 0.2
                else
                    Offset.x = 3
                    Offset.y = 4
                    Offset.z = 0.2
                end
    
                local SpawnPos = self.GetOffsetFromCoordAndHeadingInWorldCoords(Coords.x, Coords.y, Coords.z, Heading, -Offset.x, Offset.y, Offset.z)
                self.ShootSingleBulletBetweenCoordsIgnoreEntityNew(SpawnPos.x, SpawnPos.y, SpawnPos.z, Coords.x, Coords.y, Coords.z, 0, true, util.joaat('WEAPON_FLAREGUN'), players.user_ped(), true, false, -1, 0, false, true, 0, true, 1, 0, 0)
                SpawnPos = self.GetOffsetFromCoordAndHeadingInWorldCoords(Coords.x, Coords.y, Coords.z, Heading, Offset.x, Offset.y, Offset.z)
                self.ShootSingleBulletBetweenCoordsIgnoreEntityNew(SpawnPos.x, SpawnPos.y, SpawnPos.z, Coords.x, Coords.y, Coords.z, 0, true, util.joaat('WEAPON_FLAREGUN'), players.user_ped(), true, false, -1, 0, false, true, 0, true, 1, 0, 0)
                self.PlaySoundFromEntity(-1, 'flares_released', Veh, 'DLC_SM_Countermeasures_Sounds', true, 0)
            end
        end)

        VehCM:action(T'Fire Chaff', {}, T'Fire chaff countermeasure', function()
            if self.IsPedInAnyVehicle(players.user_ped()) then
                S:RequestNamedPtfxAsset('scr_sm_counter')
                local Veh = self.GetVehiclePedIsIn(players.user_ped(), false)
                local Timeout = os.time() + 15
                
                self.StartNetworkedParticleFxNonLoopedOnEntity('scr_sm_counter_chaff', Veh, 0, 0, 0, 0, 0, 0, 3, false, false, false)
                self.SetVehicleAllowHomingMissleLockonSynced(Veh, false)
    
                util.create_tick_handler(function()
                    if os.time() > Timeout then
                        self.SetVehicleAllowHomingMissleLockonSynced(Veh, true)
                        return false
                    end
                end)
            end
        end)

        VehCM:action(T'Refill Counter Measures', {}, T'Refill vehicle countermeasures', function()
            if self.IsPedInAnyVehicle(players.user_ped()) then
                local Veh = self.GetVehiclePedIsIn(players.user_ped(), false)
                self.SetVehicleCountermeasureAmmo(Veh, 2)
            end
        end)
    
        VehCM:action(T'Delete Flares', {}, T'Delete flares', function()
            for entities.get_all_objects_as_pointers() as Entity do
                local Model = util.reverse_joaat(entities.get_model_hash(Entity))
                if Model:find('flare') then
                    entities.delete_by_pointer(Entity)
                end
            end
        end)
    end

    function CreateTunableOptions()
        local Tunables = self.vehicles:list(T'Tunables', {}, T'Vehicle tunables')
    
        Tunables:action(T'Remove Vehicle Sell Timer', {}, T'Remove sell timer so you can sell as many vehicles as you want', function()
            self.StatSetInt(util.joaat('MPPLY_VEHICLE_SELL_TIME'), 0)
        end)
    
        Tunables:toggle(T'Remove Sell Limitations', {}, T'Remove sell limitations so you can sell any vehicle regardless of the value', function(state)
            self.WriteInt(self.tunables + 0x578, state ? S.MAX_INT : 50000)
            self.WriteInt(self.tunables + 0x9530, state ? S.MAX_INT : 1000000)
            self.WriteInt(self.tunables + 0xDD28, state ? S.MAX_INT : 1000000)
            self.WriteInt(self.tunables + 0xDD20, state ? S.MAX_INT : 1000000)
            self.WriteInt(self.tunables + 0x27648, state ? 1 : 0)
            self.WriteInt(self.tunables + 0xDCE8, state ? S.MAX_INT : 1)
        end)
    end

    function CreateHandlingEditor()
        self.handling = self.vehicles:list(T'Handling Editor', {}, T'Edit vehicle handling and flags', function()
            for self.handling:getChildren() as child do
                if child:isValid() then child:delete() end
            end

            if not self.IsPedInAnyVehicle(players.user_ped()) then
                return util.toast(T'You are not in a vehicle')
            end

            local ModelFlags = self.handling:list(T'Model Flags', {}, '')
            local HandlingFlags = self.handling:list(T'Handling Flags', {}, '')
            local DamageFlags = self.handling:list(T'Damage Flags', {}, '')
            local AdvancedFlags = self.handling:list(T'Advanced Flags', {}, '')
            local CarHandling = self.handling:list(T'Car Handling', {}, '')
            local BikeHandling = self.handling:list(T'Bike Handling', {}, '')
            local FlyingHandling = self.handling:list(T'Flying Handling', {}, '')
            local BoatHandling = self.handling:list(T'Boat Handling', {}, '')
            local SeaPlaneHandling = self.handling:list(T'Sea Plane Handling', {}, '')
            local SubmarineHandling = self.handling:list(T'Submarine Handling', {}, '')
            local TrailerHandling = self.handling:list(T'Trailer Handling', {}, '')

            local Veh = entities.get_user_vehicle_as_pointer()
            local CHandlingData = entities.vehicle_get_handling(Veh)
            local CBikeHandlingData = entities.handling_get_subhandling(CHandlingData, 0)
            local CFlyingHandlingData = entities.handling_get_subhandling(CHandlingData, 1)
            local CBoatHandlingData = entities.handling_get_subhandling(CHandlingData, 3)
            local CSeaPlaneHandlingData = entities.handling_get_subhandling(CHandlingData, 4)
            local CSubmarineHandlingData = entities.handling_get_subhandling(CHandlingData, 5)
            local CTrailerHandlingData = entities.handling_get_subhandling(CHandlingData, 7)
            local CCarHandlingData = entities.handling_get_subhandling(CHandlingData, 8)

            for Index, Flag in pairs(VehicleHandling.model) do
                ModelFlags:toggle(Flag.name, {}, Flag.desc, function(state)
                    if not SCRIPT_CAN_CONTINUE then return end
                    local Address = CHandlingData + VehicleHandling.MF_OFFSET
                    if state then
                        self.WriteInt(Address, self.ReadInt(Address) | Flag.bit)
                    else
                        self.WriteInt(Address, self.ReadInt(Address) & ~Flag.bit)
                    end
                end, self.ReadInt(CHandlingData + VehicleHandling.MF_OFFSET) & Flag.bit == Flag.bit)
            end

            for Index, Flag in pairs(VehicleHandling.handling) do
                HandlingFlags:toggle(Flag.name, {}, Flag.desc, function(state)
                    if not SCRIPT_CAN_CONTINUE then return end
                    local Address = CHandlingData + VehicleHandling.HF_OFFSET
                    if state then
                        self.WriteInt(Address, self.ReadInt(Address) | Flag.bit)
                    else
                        self.WriteInt(Address, self.ReadInt(Address) & ~Flag.bit)
                    end
                end, self.ReadInt(CHandlingData + VehicleHandling.HF_OFFSET) & Flag.bit == Flag.bit)
            end

            for Index, Flag in pairs(VehicleHandling.damage) do
                DamageFlags:toggle(Flag.name, {}, Flag.desc, function(state)
                    if not SCRIPT_CAN_CONTINUE then return end
                    local Address = CHandlingData + VehicleHandling.DF_OFFSET
                    if state then
                        self.WriteInt(Address, self.ReadInt(Address) | Flag.bit)
                    else
                        self.WriteInt(Address, self.ReadInt(Address) & ~Flag.bit)
                    end
                end, self.ReadInt(CHandlingData + VehicleHandling.DF_OFFSET) & Flag.bit == Flag.bit)
            end

            AdvancedFlags.visible = CCarHandlingData & 0xFFFF ~= 0
            BikeHandling.visible = CBikeHandlingData & 0xFFFF ~= 0
            FlyingHandling.visible = CFlyingHandlingData & 0xFFFF ~= 0
            BoatHandling.visible = CBoatHandlingData & 0xFFFF ~= 0
            SeaPlaneHandling.visible = CSeaPlaneHandlingData & 0xFFFF ~= 0
            SubmarineHandling.visible = CSubmarineHandlingData & 0xFFFF ~= 0
            TrailerHandling.visible = CTrailerHandlingData & 0xFFFF ~= 0

            if AdvancedFlags.visible then
               for Index, Flag in pairs(VehicleHandling.advanced) do
                    AdvancedFlags:toggle(Flag.name, {}, Flag.desc, function(state)
                        if not SCRIPT_CAN_CONTINUE then return end
                        local Address = CCarHandlingData + VehicleHandling.CF_OFFSET
                        if state then
                            self.WriteInt(Address, self.ReadInt(Address) | Flag.bit)
                        else
                            self.WriteInt(Address, self.ReadInt(Address) & ~Flag.bit)
                        end
                    end, self.ReadInt(CCarHandlingData + VehicleHandling.CF_OFFSET) & Flag.bit == Flag.bit)
                end
            end

            if BikeHandling.visible then
                for Index = 1, #VehicleHandling.bike do
                    local Name, Offset = VehicleHandling.bike[Index][1], VehicleHandling.bike[Index][2]
                    BikeHandling:slider_float(T(Name), {T(Name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(self.ReadFloat(CBikeHandlingData + Offset) * 100), 1.0, function(value)
                        if not SCRIPT_CAN_CONTINUE then return end
                        self.WriteFloat(CBikeHandlingData + Offset, value / 100)
                    end)
                end
            end

            if FlyingHandling.visible then
                for Index = 1, #VehicleHandling.flying do
                    local Name, Offset = VehicleHandling.flying[Index][1], VehicleHandling.flying[Index][2]
                    FlyingHandling:slider_float(T(Name), {T(Name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(self.ReadFloat(CFlyingHandlingData + Offset) * 100), 1.0, function(value)
                        if not SCRIPT_CAN_CONTINUE then return end
                        self.WriteFloat(CFlyingHandlingData + Offset, value / 100)
                    end)
                end
            end

            if BoatHandling.visible then
                for Index = 1, #VehicleHandling.boat do
                    local Name, Offset = VehicleHandling.boat[Index][1], VehicleHandling.boat[Index][2]
                    BoatHandling:slider_float(T(Name), {T(Name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(self.ReadFloat(CBoatHandlingData + Offset) * 100), 1.0, function(value)
                        if not SCRIPT_CAN_CONTINUE then return end
                        self.WriteFloat(CBoatHandlingData + Offset, value / 100)
                    end)
                end
            end

            if SeaPlaneHandling.visible then
                for Index = 1, #VehicleHandling.seaplane do
                    local Name, Offset = VehicleHandling.seaplane[Index][1], VehicleHandling.seaplane[Index][2]
                    SeaPlaneHandling:slider_float(T(Name), {T(Name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(self.ReadFloat(CSeaPlaneHandlingData + Offset) * 100), 1.0, function(value)
                        if not SCRIPT_CAN_CONTINUE then return end
                        self.WriteFloat(CSeaPlaneHandlingData + Offset, value / 100)
                    end)
                end
            end

            if SubmarineHandling.visible then
                for Index = 1, #VehicleHandling.submarine do
                    local Name, Offset = VehicleHandling.submarine[Index][1], VehicleHandling.submarine[Index][2]
                    SubmarineHandling:slider_float(T(Name), {T(Name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(self.ReadFloat(CSubmarineHandlingData + Offset) * 100), 1.0, function(value)
                        if not SCRIPT_CAN_CONTINUE then return end
                        self.WriteFloat(CSubmarineHandlingData + Offset, value / 100)
                    end)
                end
            end

            if TrailerHandling.visible then
                for Index = 1, #VehicleHandling.trailer do
                    local Name, Offset = VehicleHandling.trailer[Index][1], VehicleHandling.trailer[Index][2]
                    TrailerHandling:slider_float(T(Name), {T(Name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(self.ReadFloat(CTrailerHandlingData + Offset) * 100), 1.0, function(value)
                        if not SCRIPT_CAN_CONTINUE then return end
                        self.WriteFloat(CTrailerHandlingData + Offset, value / 100)
                    end)
                end
            end

            if CarHandling.visible then
                pcall(function()
                    for Index = 1, #VehicleHandling.ccarsub do
                        local Name, OFfset = VehicleHandling.ccarsub[Index][1], VehicleHandling.ccarsub[Index][2]
                        CarHandling:slider_float(T(Name), {T(Name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(self.ReadFloat(CHandlingData + OFfset) * 100), 1.0, function(value)
                            if not SCRIPT_CAN_CONTINUE then return end
                            self.WriteFloat(CHandlingData + OFfset, value / 100)
                        end)
                    end
    
                    for Index = 1, #VehicleHandling.ccar do
                        local Name, Offset = VehicleHandling.ccar[Index][1], VehicleHandling.ccar[Index][2]
                        if not Name:find('nInitialDriveGears') then
                            CarHandling:slider_float(T(Name), {T(Name)}, '', -10000.0 * 100, 10000.0 * 100, math.floor(self.ReadFloat(CCarHandlingData + Offset) * 100), 1.0, function(value)
                                if not SCRIPT_CAN_CONTINUE then return end
                                self.WriteFloat(CCarHandlingData + Offset, value / 100)
                            end)
                        else
                            CarHandling:slider(T(Name), {T(Name)}, '', 1, 10, self.ReadInt(CCarHandlingData + Offset), 1, function(value)
                                if not SCRIPT_CAN_CONTINUE then return end
                                self.WriteInt(CCarHandlingData + Offset, value)
                            end)
                        end
                    end
                end)
            end
        end)
    end

    --[[void]] static function SetVehicleDoorsShut(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] closeInstantly)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(closeInstantly)native_invoker.end_call_2(0x781B3D62BB013EF5)end
    --[[int]] static function DecorGetInt(--[[Entity (int)]] entity,--[[string]] propertyName)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_string(propertyName)native_invoker.end_call_2(0xA06C969B02A97298)return native_invoker.get_return_value_int()end
    --[[Vehicle (int)]] static function GetVehiclePedIsIn(--[[Ped (int)]] ped,--[[BOOL (bool)]] includeLastVehicle)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(includeLastVehicle)native_invoker.end_call_2(0x9A9112A0FE9A4713)return native_invoker.get_return_value_int()end
    --[[Hash (int)]] static function GetEntityModel(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0x9F47B058362C84B5)return native_invoker.get_return_value_int()end
    --[[void]] static function ClearVehiclePhoneExplosiveDevice()native_invoker.begin_call()native_invoker.end_call_2(0xAA3F739ABDDCF21F)end
    --[[BOOL (bool)]] static function DecorSetInt(--[[Entity (int)]] entity,--[[string]] propertyName,--[[int]] value)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_string(propertyName)native_invoker.push_arg_int(value)native_invoker.end_call_2(0x0CE3AA5E1CA19E10)return native_invoker.get_return_value_bool()end
    --[[void]] static function AddVehiclePhoneExplosiveDevice(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x99AD4CCCB128CBC9)end
    --[[Vehicle (int)]] static function NetToVeh(--[[int]] netHandle)native_invoker.begin_call()native_invoker.push_arg_int(netHandle)native_invoker.end_call_2(0x367B936610BA360C)return native_invoker.get_return_value_int()end
    --[[void]] static function DetonateVehiclePhoneExplosiveDevice()native_invoker.begin_call()native_invoker.end_call_2(0xEF49CF0270307CBE)end
    --[[BOOL (bool)]] static function IsPedInAnyVehicle(--[[Ped (int)]] ped,--[[BOOL (bool)]] atGetIn)native_invoker.begin_call()native_invoker.push_arg_int(ped)native_invoker.push_arg_bool(atGetIn)native_invoker.end_call_2(0x997ABD671D25CA0B)return native_invoker.get_return_value_bool()end
    --[[Ped (int)]] static function GetPlayerPed(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0x50FAC3A3E030A6E1)return native_invoker.get_return_value_int()end
    --[[Hash (int)]] static function NetworkHashFromPlayerHandle(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0xBC1D768F2F5D6C05)return native_invoker.get_return_value_int()end
    --[[BOOL (bool)]] static function HasVehiclePhoneExplosiveDevice()native_invoker.begin_call()native_invoker.end_call_2(0x6ADAABD3068C5235)return native_invoker.get_return_value_bool()end
    --[[void]] static function SetVehicleDoorsLockedForPlayer(--[[Vehicle (int)]] vehicle,--[[Player (int)]] player,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(player)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x517AAF684BB50CD1)end
    --[[void]] static function SetVehicleIsStolen(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] isStolen)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(isStolen)native_invoker.end_call_2(0x67B2C79AA7FF5738)end
    --[[Interior (int)]] static function GetInteriorFromEntity(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0x2107BA504071A6BB)return native_invoker.get_return_value_int()end
    --[[BOOL (bool)]] static function StatSetInt(--[[Hash (int)]] statName,--[[int]] value,--[[BOOL (bool)]] save)native_invoker.begin_call()native_invoker.push_arg_int(statName)native_invoker.push_arg_int(value)native_invoker.push_arg_bool(save)native_invoker.end_call_2(0xB3271D7AB655B441)return native_invoker.get_return_value_bool()end
    --[[Vector3 (vector3)]] static function GetEntityCoords(--[[Entity (int)]] entity,--[[BOOL (bool)]] alive)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(alive)native_invoker.end_call_2(0x3FEF770D40960D5A)return native_invoker.get_return_value_vector3()end
    --[[float]] static function GetEntityHeading(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0xE83D4F9BA2A38914)return native_invoker.get_return_value_float()end
    --[[Vector3 (vector3)]] static function GetOffsetFromCoordAndHeadingInWorldCoords(--[[float]] xPos,--[[float]] yPos,--[[float]] zPos,--[[float]] heading,--[[float]] xOffset,--[[float]] yOffset,--[[float]] zOffset)native_invoker.begin_call()native_invoker.push_arg_float(xPos)native_invoker.push_arg_float(yPos)native_invoker.push_arg_float(zPos)native_invoker.push_arg_float(heading)native_invoker.push_arg_float(xOffset)native_invoker.push_arg_float(yOffset)native_invoker.push_arg_float(zOffset)native_invoker.end_call_2(0x163E252DE035A133)return native_invoker.get_return_value_vector3()end
    --[[void]] static function ShootSingleBulletBetweenCoordsIgnoreEntityNew(--[[float]] x1,--[[float]] y1,--[[float]] z1,--[[float]] x2,--[[float]] y2,--[[float]] z2,--[[int]] damage,--[[BOOL (bool)]] p7,--[[Hash (int)]] weaponHash,--[[Ped (int)]] ownerPed,--[[BOOL (bool)]] isAudible,--[[BOOL (bool)]] isInvisible,--[[float]] speed,--[[Entity (int)]] entity,--[[BOOL (bool)]] p14,--[[BOOL (bool)]] p15,--[[Entity (int)]] targetEntity,--[[BOOL (bool)]] p17,--[[Any (int)]] p18,--[[Any (int)]] p19,--[[Any (int)]] p20)native_invoker.begin_call()native_invoker.push_arg_float(x1)native_invoker.push_arg_float(y1)native_invoker.push_arg_float(z1)native_invoker.push_arg_float(x2)native_invoker.push_arg_float(y2)native_invoker.push_arg_float(z2)native_invoker.push_arg_int(damage)native_invoker.push_arg_bool(p7)native_invoker.push_arg_int(weaponHash)native_invoker.push_arg_int(ownerPed)native_invoker.push_arg_bool(isAudible)native_invoker.push_arg_bool(isInvisible)native_invoker.push_arg_float(speed)native_invoker.push_arg_int(entity)native_invoker.push_arg_bool(p14)native_invoker.push_arg_bool(p15)native_invoker.push_arg_int(targetEntity)native_invoker.push_arg_bool(p17)native_invoker.push_arg_int(p18)native_invoker.push_arg_int(p19)native_invoker.push_arg_int(p20)native_invoker.end_call_2(0xBFE5756E7407064A)end
    --[[void]] static function PlaySoundFromEntity(--[[int]] soundId,--[[string]] audioName,--[[Entity (int)]] entity,--[[string]] audioRef,--[[BOOL (bool)]] isNetwork,--[[Any (int)]] p5)native_invoker.begin_call()native_invoker.push_arg_int(soundId)native_invoker.push_arg_string(audioName)native_invoker.push_arg_int(entity)native_invoker.push_arg_string(audioRef)native_invoker.push_arg_bool(isNetwork)native_invoker.push_arg_int(p5)native_invoker.end_call_2(0xE65F427EB70AB1ED)end
    --[[BOOL (bool)]] static function StartParticleFxNonLoopedOnEntity(--[[string]] effectName,--[[Entity (int)]] entity,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ,--[[float]] rotX,--[[float]] rotY,--[[float]] rotZ,--[[float]] scale,--[[BOOL (bool)]] axisX,--[[BOOL (bool)]] axisY,--[[BOOL (bool)]] axisZ)native_invoker.begin_call()native_invoker.push_arg_string(effectName)native_invoker.push_arg_int(entity)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.push_arg_float(rotX)native_invoker.push_arg_float(rotY)native_invoker.push_arg_float(rotZ)native_invoker.push_arg_float(scale)native_invoker.push_arg_bool(axisX)native_invoker.push_arg_bool(axisY)native_invoker.push_arg_bool(axisZ)native_invoker.end_call_2(0x0D53A3B8DA0809D2)return native_invoker.get_return_value_bool()end
    --[[void]] static function SetVehicleAllowHomingMissleLockonSynced(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] canBeLockedOn,--[[BOOL (bool)]] p2)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(canBeLockedOn)native_invoker.push_arg_bool(p2)native_invoker.end_call_2(0x1DDA078D12879EEE)end
    --[[BOOL (bool)]] static function StartNetworkedParticleFxNonLoopedOnEntity(--[[string]] effectName,--[[Entity (int)]] entity,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ,--[[float]] rotX,--[[float]] rotY,--[[float]] rotZ,--[[float]] scale,--[[BOOL (bool)]] axisX,--[[BOOL (bool)]] axisY,--[[BOOL (bool)]] axisZ)native_invoker.begin_call()native_invoker.push_arg_string(effectName)native_invoker.push_arg_int(entity)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.push_arg_float(rotX)native_invoker.push_arg_float(rotY)native_invoker.push_arg_float(rotZ)native_invoker.push_arg_float(scale)native_invoker.push_arg_bool(axisX)native_invoker.push_arg_bool(axisY)native_invoker.push_arg_bool(axisZ)native_invoker.end_call_2(0xC95EB1DB6E92113D)return native_invoker.get_return_value_bool()end
    --[[void]] static function SetVehicleCountermeasureAmmo(--[[Vehicle (int)]] vehicle,--[[int]] counterMeasureCount)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(counterMeasureCount)native_invoker.end_call_2(0x9BDA23BF666F0855)end
    --[[BOOL (bool)]] static function IsPlayerPressingHorn(--[[Player (int)]] player)native_invoker.begin_call()native_invoker.push_arg_int(player)native_invoker.end_call_2(0xFA1E2BF8B10598F9)return native_invoker.get_return_value_bool()end
    --[[void]] static function SetVehicleForwardSpeed(--[[Vehicle (int)]] vehicle,--[[float]] speed)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(speed)native_invoker.end_call_2(0xAB54A438726D25D5)end
    --[[float]] static function GetEntitySpeed(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0xD5037BA82E12416F)return native_invoker.get_return_value_float()end
    --[[void]] static function SetVehicleHandlingOverride(--[[Vehicle (int)]] vehicle,--[[Hash (int)]] hash)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(hash)native_invoker.end_call_2(0x10655FAB9915623D)end
    --[[void]] static function SetOverrideNitrousLevel(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle,--[[float]] level,--[[float]] power,--[[float]] rechargeTime,--[[BOOL (bool)]] disableSound)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.push_arg_float(level)native_invoker.push_arg_float(power)native_invoker.push_arg_float(rechargeTime)native_invoker.push_arg_bool(disableSound)native_invoker.end_call_2(0xC8E9B6B71B8E660D)end
    --[[void]] static function SetSubmarineCrushDepths(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] p1,--[[float]] depth1,--[[float]] depth2,--[[float]] depth3)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(p1)native_invoker.push_arg_float(depth1)native_invoker.push_arg_float(depth2)native_invoker.push_arg_float(depth3)native_invoker.end_call_2(0xC59872A5134879C7)end
    --[[void]] static function SetVehicleKersAllowed(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x99C82F8A139F3E4E)end
    --[[void]] static function SetVehicleNumberPlateText(--[[Vehicle (int)]] vehicle,--[[string]] plateText)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_string(plateText)native_invoker.end_call_2(0x95A88F0B409CDA47)end
    --[[void]] static function SetDriftTyres(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x5AC79C98C5C17F05)end
    --[[void]] static function SetVehicleReduceGrip(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x222FF6A823D122E2)end
    --[[void]] static function SetVehicleReduceGripLevel(--[[Vehicle (int)]] vehicle,--[[int]] val)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(val)native_invoker.end_call_2(0x6DEE944E1EE90CFB)end
    --[[void]] static function SetEntityHeading(--[[Entity (int)]] entity,--[[float]] heading)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(heading)native_invoker.end_call_2(0x8E2530AA8ADA980E)end
    --[[void]] static function SetEntityRotation(--[[Entity (int)]] entity,--[[float]] pitch,--[[float]] roll,--[[float]] yaw,--[[int]] rotationOrder,--[[BOOL (bool)]] p5)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(pitch)native_invoker.push_arg_float(roll)native_invoker.push_arg_float(yaw)native_invoker.push_arg_int(rotationOrder)native_invoker.push_arg_bool(p5)native_invoker.end_call_2(0x8524A8B0171D5E07)end
    --[[Vector3 (vector3)]] static function GetEntityRotation(--[[Entity (int)]] entity,--[[int]] rotationOrder)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_int(rotationOrder)native_invoker.end_call_2(0xAFBD61CC738D9EB9)return native_invoker.get_return_value_vector3()end
    --[[void]] static function SetVehicleLightMultiplier(--[[Vehicle (int)]] vehicle,--[[float]] multiplier)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(multiplier)native_invoker.end_call_2(0xB385454F8791F57C)end
    --[[void]] static function SetVehicleInteriorlight(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0xBC2042F090AF6AD3)end
    --[[void]] static function SetVehicleForceInteriorlight(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x8821196D91FA2DE5)end
    --[[void]] static function PopOutVehicleWindscreen(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x6D645D59FB5F5AD3)end
    --[[void]] static function PopOffVehicleRoofWithImpulse(--[[Vehicle (int)]] vehicle,--[[float]] x,--[[float]] y,--[[float]] z)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(x)native_invoker.push_arg_float(y)native_invoker.push_arg_float(z)native_invoker.end_call_2(0xE38CB9D7D39FDBCC)end
    --[[void]] static function SmashVehicleWindow(--[[Vehicle (int)]] vehicle,--[[int]] windowIndex)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(windowIndex)native_invoker.end_call_2(0x9E5B5E4D2CCD2259)end
    --[[void]] static function RollDownWindows(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x85796B0549DDE156)end
    --[[void]] static function RollUpWindow(--[[Vehicle (int)]] vehicle,--[[int]] windowIndex)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(windowIndex)native_invoker.end_call_2(0x602E548F46E24D59)end
    --[[void]] static function FixVehicleWindow(--[[Vehicle (int)]] vehicle,--[[int]] windowIndex)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(windowIndex)native_invoker.end_call_2(0x772282EBEB95E682)end
    --[[void]] static function RemoveVehicleWindow(--[[Vehicle (int)]] vehicle,--[[int]] windowIndex)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_int(windowIndex)native_invoker.end_call_2(0xA711568EEDB43069)end
    --[[void]] static function SetVehicleHasUnbreakableLights(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] toggle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(toggle)native_invoker.end_call_2(0x1AA8A837D2169D94)end
    --[[void]] static function SetVehicleFixed(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x115722B1B9C14C1C)end
    --[[void]] static function SetVehicleDeformationFixed(--[[Vehicle (int)]] vehicle)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.end_call_2(0x953DA1E1B12C0491)end
    --[[void]] static function SetVehicleMaxSpeed(--[[Vehicle (int)]] vehicle,--[[float]] speed)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(speed)native_invoker.end_call_2(0xBAA045B4E42F3C06)end
    --[[void]] static function SetEntityMaxSpeed(--[[Entity (int)]] entity,--[[float]] speed)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(speed)native_invoker.end_call_2(0x0E46A3FCBDE2A1B1)end
    --[[void]] static function SetVehicleCheatPowerIncrease(--[[Vehicle (int)]] vehicle,--[[float]] value)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_float(value)native_invoker.end_call_2(0xB59E4BD37AE292DB)end
    --[[void]] static function SetInvertVehicleControls(--[[Vehicle (int)]] vehicle,--[[BOOL (bool)]] state)native_invoker.begin_call()native_invoker.push_arg_int(vehicle)native_invoker.push_arg_bool(state)native_invoker.end_call_2(0x5B91B229243351A8)end
    --[[Vehicle (int)]] static function NetToVeh(--[[int]] netHandle)native_invoker.begin_call()native_invoker.push_arg_int(netHandle)native_invoker.end_call_2(0x367B936610BA360C)return native_invoker.get_return_value_int()end
    --[[BOOL (bool)]] static function DecorRemove(--[[Entity (int)]] entity,--[[string]] propertyName)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_string(propertyName)native_invoker.end_call_2(0x00EE9F297C738720)return native_invoker.get_return_value_bool()end
    --[[Vector3 (vector3)]] static function GetOffsetFromEntityInWorldCoords(--[[Entity (int)]] entity,--[[float]] offsetX,--[[float]] offsetY,--[[float]] offsetZ)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.push_arg_float(offsetX)native_invoker.push_arg_float(offsetY)native_invoker.push_arg_float(offsetZ)native_invoker.end_call_2(0x1899F328B0E12848)return native_invoker.get_return_value_vector3()end
    --[[BOOL (bool)]] static function IsEntityVisible(--[[Entity (int)]] entity)native_invoker.begin_call()native_invoker.push_arg_int(entity)native_invoker.end_call_2(0x47D6F43D77935C75)return native_invoker.get_return_value_bool()end
end

return Vehicles