local T, S, L = require('translations'), require('shared'), require('labels')
local WeaponsList = require('weapons_list')
local ScriptOffsets = require('offsets')

local SpecialAmmoType = ScriptOffsets.Weapons.SpecialAmmoType

local sns_ammo_types = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'Hollow Point', 'FMJ'}
local heavy_revolver_types = {'Default Clip', 'Tracer', 'Incendiary', 'Hollow Point', 'FMJ'}
local special_carbine_types = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local bullpup_rifle_types = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local pump_shotgun_types = {'Default Shells', 'Dragons Breathe', 'Flechette Shells', 'Steel Buckshot Shells', 'Explosive Slugs'}
local marksman_rifle_types = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local pistol_types = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'Hollow Point', 'FMJ'}
local smg_types = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'Hollow Point', 'FMJ'}
local assault_rifle_types = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local carbine_rifle_types = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local combat_mg_types = {'Default Clip', 'Extended Clip', 'Tracer', 'Incendiary', 'FMJ', 'Armor Piercing'}
local heavy_sniper_types = {'Default Clip', 'Extended Clip', 'Incendiary', 'FMJ', 'Armor Piercing', 'Explosive'}

local heavy_sniper_scopes = {'Zoom Scope', 'Advanced Scope', 'Night Vision Scope', 'Thermal Scope'}
local all_types = {
    ['SNS Pistol'] = sns_ammo_types,
    ['Heavy Revolver'] = heavy_revolver_types,
    ['Special Carbine'] = special_carbine_types,
    ['Bullpup Rifle'] = bullpup_rifle_types,
    ['Pump Shotgun'] = pump_shotgun_types,
    ['Marksman Rifle'] = marksman_rifle_types,
    ['Pistol'] = pistol_types,
    ['SMG'] = smg_types,
    ['Assault Rifle'] = assault_rifle_types,
    ['Carbine Rifle'] = carbine_rifle_types,
    ['Combat MG'] = combat_mg_types,
    ['Heavy Sniper'] = heavy_sniper_types
}

local weapons_hashmap = {
    ['SNS Pistol'] = util.joaat('WEAPON_SNSPISTOL_MK2'),
    ['Heavy Revolver'] = util.joaat('WEAPON_REVOLVER_MK2'),
    ['Special Carbine'] = util.joaat('WEAPON_SPECIALCARBINE_MK2'),
    ['Bullpup Rifle'] = util.joaat('WEAPON_BULLPUPRIFLE_MK2'),
    ['Pump Shotgun'] = util.joaat('WEAPON_PUMPSHOTGUN_MK2'),
    ['Marksman Rifle'] = util.joaat('WEAPON_MARKSMANRIFLE_MK2'),
    ['Pistol'] = util.joaat('WEAPON_PISTOL_MK2'),
    ['SMG'] = util.joaat('WEAPON_SMG_MK2'),
    ['Assault Rifle'] = util.joaat('WEAPON_ASSAULTRIFLE_MK2'),
    ['Carbine Rifle'] = util.joaat('WEAPON_CARBINERIFLE_MK2'),
    ['Combat MG'] = util.joaat('WEAPON_COMBATMG_MK2'),
    ['Heavy Sniper'] = util.joaat('WEAPON_HEAVYSNIPER_MK2')
}

local weapons_names = {
    {1, 'None'},
    {2, 'SNS Pistol'},
    {3, 'Heavy Revolver'},
    {4, 'Special Carbine'},
    {5, 'Bullpup Rifle'},
    {6, 'Pump Shotgun'},
    {7, 'Marksman Rifle'},
    {8, 'Pistol'},
    {9, 'SMG'},
    {10, 'Assault Rifle'},
    {11, 'Carbine Rifle'},
    {12, 'Combat MG'},
    {13, 'Heavy Sniper'}
}

local damage_types = {
    {1, 'Melee'},
    {2, 'Bullet'},
    {3, 'Bullet Rubber'},
    {4, 'Explosive'},
    {5, 'Fire'},
    {6, 'Collision'},
    {7, 'Fall'},
    {8, 'Drown'},
    {9, 'Electric'},
    {10, 'Barbed Wire'},
    {11, 'Fire Extinguisher'},
    {12, 'Smoke'},
    {13, 'Water Cannon'},
    {14, 'Tranquilizer'}
}

local special_ammo = {
    {1, 'None'},
    {2, 'Armor Piercing'},
    {3, 'Explosive'},
    {4, 'FMJ'},
    {5, 'Hollow Point'},
    {6, 'Incendiary'},
    {7, 'Tracer'}
}

pluto_class Weapons
    function __construct(root)
        self.root = root:list(T'Weapons', {T'rweapons'}, '')
        self.mk2 = self.root:list(T'MK2', {T'rweaponsmk2'}, T'MK2 weapons')
        self.thermal = self.root:list(T'Thermal', {T'rthermal'}, T'Thermal')
        self.aimbot = self.root:list(T'Aimbot', {T'raimbot'}, T'Aimbot')
        self.mods = self.root:list(T'Mods', {T'rmods'}, T'Mods', nil, nil, || -> self:UpdateWeaponInfo())
        self.ent_ptr = memory.alloc(4)
        self.weapon_ptr = memory.alloc(4)

        self:Init()
    end

    function Init()
        self:CreateMk2Weapons()
        self:CreateThermal()
        self:CreateAimbot()
        self:CreateMods()
    end

    function CreateMk2Weapons()
        self.mk2:list_select(T'Weapons', {}, T'Weapon to modify', weapons_names, 1, function(index)
            if not SCRIPT_CAN_CONTINUE then return end
            if self.mk2:isValid() then
                for self.mk2:getChildren() as child do
                    if child:isValid() then
                        if child.menu_name ~= T'Weapons' then
                            child:delete()
                        end
                    end
                end
            end

            local weapon = weapons_names[index][2]
            if weapon == 'None' then return end
            local weapon_hash = weapons_hashmap[weapon]
            local ammo_types = S:SortTableIndexed(all_types[weapon])

            if index ~= 1 then
                if weapon ~= 'Heavy Sniper' then
                    self.mk2:list_select(T'Ammo', {}, '', ammo_types, 1, function(index)
                        local ammo_type = self:AmmoTypeToHash(ammo_types[index], weapon_hash)
                        self:GiveComponent(weapon_hash, ammo_type)
                    end)
                else
                    self.mk2:list_select(T'Ammo', {}, '', ammo_types, 1, function(index)
                        local ammo_type = self:AmmoTypeToHash(ammo_types[index], weapon_hash)
                        self:GiveComponent(weapon_hash, ammo_type)
                    end)

                    local scope = self.mk2:list_select(T'Scope', {}, '', heavy_sniper_scopes, 1, function(index)
                        local scope = heavy_sniper_scopes[index]
                        local component_hash = ''
                        if scope == 'Zoom Scope' then
                            component_hash = util.joaat('COMPONENT_AT_SCOPE_LARGE_MK2')
                        elseif scope == 'Advanced Scope' then
                            component_hash = util.joaat('COMPONENT_AT_SCOPE_MAX')
                        elseif scope == 'Night Vision Scope' then
                            component_hash = util.joaat('COMPONENT_AT_SCOPE_NV')
                        elseif scope == 'Thermal Scope' then
                            component_hash = util.joaat('COMPONENT_AT_SCOPE_THERMAL')
                        end
                        self:GiveComponent(weapon_hash, component_hash)
                    end)
                end
            end
        end)
    end

    function CreateThermal()
        self.thermal:toggle_loop(T'ESP Thermal', {}, T'Makes thermal more op than it already is', function()
            if graphics.get_usingseethrough() then
                graphics.seethrough_set_max_thickness(graphics.seethrough_get_max_thickness())
                graphics.seethrough_set_noise_min(0.0)
                graphics.seethrough_set_noise_max(0.0)
                graphics.seethrough_set_fade_startdistance(0.0)
                graphics.seethrough_set_fade_enddistance(math.max_int + 0.0)
                graphics.seethrough_set_highlight_noise(0.0)
            else
                graphics.seethrough_reset()
            end
        end,
        function()
            graphics.seethrough_reset()
        end)
    end

    function CreateAimbot()
        do pluto_new (require('ped_aimbot'))(self.aimbot) end
        do pluto_new (require('player_aimbot'))(self.aimbot) end
        do pluto_new (require('experimental_aimbot'))(self.aimbot) end
    end

    function CreateMods()
        self.mods:divider(T'Weapon Info')
        self.m_weapon_hash = self.mods:readonly(T'Weapon Hash: ')
        self.m_weapon_name = self.mods:readonly(T'Weapon Name: ')
        self.m_bullets_mult = self.mods:readonly('Bullet Multiplier: ')
        self.m_damage = self.mods:readonly(T'Damage:')
        self.m_penetration = self.mods:readonly(T'Penetration: ')
        self.m_range = self.mods:readonly(T'Range: ')
        self.m_spread = self.mods:readonly(T'Spread: ')
        self.m_reload_speed = self.mods:readonly(T'Reload Speed: ')
        self.m_vehicle_damage_mod = self.mods:readonly(T'Vehicle Damage Modifier: ')
        self.m_damage_type = self.mods:readonly(T'Damage Type: ')
        self.m_special_ammo = self.mods:readonly(T'Special Ammo: ')
    
        self.mods:divider('')

        self.double_tap = {}
        self.mods:toggle_loop(T'Double Tap', {}, T'Shoot 2 bullets instead of 1', function()
            if not SCRIPT_CAN_CONTINUE then return end
            if not self.double_tap[self:GetCurrentWeapon()] then
                self.double_tap[self:GetCurrentWeapon()] = { 
                    data = memory.read_int(self:GetCurrentWeapon() + 0x120), 
                    addr = self:GetCurrentWeapon() + 0x120 
                }
            end
            memory.write_int(self:GetCurrentWeapon() + 0x0120, 2)
        end, function()
            if not SCRIPT_CAN_CONTINUE then return end
            for k, v in pairs(self.double_tap) do
                memory.write_int(v.addr, v.data)
            end
        end)

        self.fast_reload = {}
        self.mods:toggle_loop(T'Fast Reload', {}, T'Reload super fast', function()
            if not SCRIPT_CAN_CONTINUE then return end
            if not self.fast_reload[self:GetCurrentWeapon()] then
                self.fast_reload[self:GetCurrentWeapon()] = { 
                    data = memory.read_int(self:GetCurrentWeapon() + 0x0134), 
                    addr = self:GetCurrentWeapon() + 0x0134 
                }
            end
            memory.write_float(self:GetCurrentWeapon() + 0x0134, 2.0)
        end, function()
            if not SCRIPT_CAN_CONTINUE then return end
            for k, v in pairs(self.fast_reload) do
                memory.write_int(v.addr, v.data)
            end
        end)

        self.weapon_range = {}
        self.mods:toggle_loop(T'Infinite Range', {}, T'Be able to shoot very long distances regardless of the weapon you have', function()
            if not SCRIPT_CAN_CONTINUE then return end
            if not self.weapon_range[self:GetCurrentWeapon()] then
                self.weapon_range[self:GetCurrentWeapon()] = { 
                    data = memory.read_float(self:GetCurrentWeapon() + 0x028C), 
                    addr = self:GetCurrentWeapon() + 0x028C 
                }
            end
            memory.write_float(self:GetCurrentWeapon() + 0x028C, 1500.0)
        end, function()
            if not SCRIPT_CAN_CONTINUE then return end
            for k, v in pairs(self.weapon_range) do
                memory.write_float(v.addr, v.data)
            end
        end)

        self.weapon_spread = {}
        self.mods:toggle_loop(T'No Spread', {}, T'No spread', function()
            if not SCRIPT_CAN_CONTINUE then return end
            if not self.weapon_spread[self:GetCurrentWeapon()] then
                self.weapon_spread[self:GetCurrentWeapon()] = { 
                    data = memory.read_float(self:GetCurrentWeapon() + 0x0074), 
                    addr = self:GetCurrentWeapon() + 0x0074
                }
            end
            memory.write_float(self:GetCurrentWeapon() + 0x0074, 0.0)
        end, function()
            if not SCRIPT_CAN_CONTINUE then return end
            for k, v in pairs(self.weapon_spread) do
                memory.write_float(v.addr, v.data)
            end
        end)

        self.weapon_penetration = {}
        self.mods:toggle_loop(T'Max Penetration', {}, T'', function()
            if not SCRIPT_CAN_CONTINUE then return end
            if not self.weapon_penetration[self:GetCurrentWeapon()] then
                self.weapon_penetration[self:GetCurrentWeapon()] = { 
                    data = memory.read_float(self:GetCurrentWeapon() + 0x0110), 
                    addr = self:GetCurrentWeapon() + 0x0110
                }
            end
            memory.write_float(self:GetCurrentWeapon() + 0x0110, 100.0)
        end, function()
            if not SCRIPT_CAN_CONTINUE then return end
            for k, v in pairs(self.weapon_penetration) do
                memory.write_float(v.addr, v.data)
            end
        end)

        self.weapon_damages = {}
        self.mods:toggle_loop(T'Insta Kill', {}, T'Kill anything with 1 shot', function()
            if not SCRIPT_CAN_CONTINUE then return end
            if not self.weapon_damages[self:GetWeaponHash()] then
                self.weapon_damages[self:GetWeaponHash()] = { 
                    data = memory.read_float(self:GetCurrentWeapon() + 0xB0), 
                    addr = self:GetCurrentWeapon() + 0xB0 
                }
            end
            memory.write_float(self:GetCurrentWeapon() + 0xB0, 230.0)
        end, function()
            if not SCRIPT_CAN_CONTINUE then return end
            for k, v in pairs(self.weapon_damages) do
                memory.write_float(v.addr, v.data)
            end
        end)

        self.mods:toggle_loop(T'Super Homing Launcher', {}, T'Fire homing rockets at extremely fast speeds when pressing mouse button 5', function()
            if true then
                if player.is_player_free_aiming(players.user()) then
                    local weapon = weapon.get_current_ped_weapon(players.user_ped(), self.weapon_ptr)
                    local hash = memory.read_int(self.weapon_ptr)
                    local valid_weapon = hash == ('WEAPON_HOMINGLAUNCHER'):joaat()
                    
                    if player.get_entity_player_is_free_aiming_at(players.user(), self.ent_ptr) then
                        local ent = memory.read_int(self.ent_ptr)

                        if ent ~= 0 then
                            if valid_weapon then
                                local from = players.get_position(players.user())
                                local to = entity.get_entity_coords(ent)
                                misc.shoot_single_bullet_between_coords_ignore_entity_new(
                                    from.x, from.y, from.z, to.x, to.y, to.z, 
                                    100, 1, ('VEHICLE_WEAPON_RUINER_ROCKET'):joaat(), players.user_ped(),
                                    true, false, math.max_float, players.user_ped(), 0, 0, ent, 0, 0, 0, 0
                                )
                            end
                        end
                    end
                end
                util.yield(300)
            end
        end)
        self.mods:divider('')

        self.mods:slider(T'Bullets Multiplier', {}, T'How many bullets to shoot per shot', 1, 1000, 1, 1, function(value)
            if not SCRIPT_CAN_CONTINUE then return end
            pcall(function()
                memory.write_int(self:GetCurrentWeapon() + 0x0120, value)
            end)
        end)

        self.mods:slider_float(T'Vehicle Damage Modifier', {T'rwvehdamagemod'}, T'How much damage to do to vehicles', 0.0, 100000.0 * 100, 1.0 * 100, 1.0 * 10, function(value)
            if not SCRIPT_CAN_CONTINUE then return end
            pcall(function()
                memory.write_float(self:GetCurrentWeapon() + 0x00D4, value / 100)
            end)
        end)

        self.damage_type = self.mods:list(T'Damage Type', {}, T'What type of damage to do (not all of these work on players)')
        self.damage_type:list_select(T'Type', {}, T'Type of damage your weapon deals', damage_types, 1, function(index)
            if not SCRIPT_CAN_CONTINUE then return end

            pcall(function()
                memory.write_int(self:GetCurrentWeapon() + 0x0020, index + 1)
            end)
        end)

        self.special_ammo = self.mods:list(T'Special Ammo', {}, T'Equip special ammo on any gun (explosive will trigger explosive hits detection)')
        self.special_ammo:list_select(T'Type', {}, T'Type of special ammo to equip', special_ammo, 1, function(index)
            if not SCRIPT_CAN_CONTINUE then return end
            pcall(function()
                memory.write_int(self:GetCurrentWeaponAmmoInfo() + 0x003C, index - 1)
            end)
        end)
    end

    function AmmoTypeToHash(type, weapon)
        local weapon_name = util.reverse_joaat(weapon)
        weapon_name = weapon_name:gsub('WEAPON_', '')

        local comp = 'COMPONENT_' .. weapon_name .. '_CLIP_'

        if type == 'Default Clip' or type == 'Default Shells' then
            return util.joaat(comp .. '01')
        elseif type == 'Extended Clip' then
            return util.joaat(comp .. '02')
        elseif type == 'Tracer' then
            return util.joaat(comp .. 'TRACER')
        elseif type == 'Incendiary' then
            return util.joaat(comp .. 'INCENDIARY')
        elseif type == 'Hollow Point' then
            return util.joaat(comp .. 'HOLLOWPOINT')
        elseif type == 'FMJ' then
            return util.joaat(comp .. 'FMJ')
        elseif type == 'Explosive' then
            return util.joaat(comp .. 'EXPLOSIVE')
        elseif type == 'Armor Piercing' then
            return util.joaat(comp .. 'ARMORPIERCING')
        elseif type == 'Dragons Breathe' then
            return util.joaat(comp .. 'INCENDIARY')
        elseif type == 'Flechette Shells' then
            return util.joaat(comp .. 'HOLLOWPOINT')
        elseif type == 'Steel Buckshot Shells' then
            return util.joaat(comp .. 'ARMORPIERCING')
        elseif type == 'Explosive Slugs' then
            return util.joaat(comp .. 'EXPLOSIVE')
        end
    end

    function GiveComponent(weapon_hash, component_hash)
        if not SCRIPT_CAN_CONTINUE then return end
        local localplayer = players.localplayer()
        if not localplayer:has_ped_got_weapon_component(weapon_hash, component_hash) then
            localplayer:give_weapon_component_to_ped(weapon_hash, component_hash)
            local ammo_type = localplayer:get_ped_ammo_type_from_weapon(weapon_hash)
            localplayer:set_ped_ammo_by_type(ammo_type, 9999)
        end
    end

    function GetCurrentWeapon()
        local weapon_manager = entities.get_weapon_manager(entities.handle_to_pointer(players.user_ped()))
        local current_weapon = memory.read_long(weapon_manager + 0x0020)
        return current_weapon
    end

    function GetCurrentWeaponAmmoInfo()
        return memory.read_long(self:GetCurrentWeapon() + 0x0060)
    end

    function GetWeaponHash()
        local weapon_manager = entities.get_weapon_manager(entities.handle_to_pointer(players.user_ped()))
        return memory.read_int(weapon_manager + 0x18)
    end

    function UpdateWeaponInfo()
        util.create_tick_handler(function()
            local item = menu.get_current_menu_list()
            if item.menu_name ~= T'Mods' then
                return false
            end

            pcall(function()
                local hash = self:GetWeaponHash()
                local name = util.reverse_joaat(hash):upper()

                if name == '' then 
                    name = WeaponsList:HashToName(hash)
                end

                self.m_weapon_hash.value = string.format('0x%08X', hash)
                self.m_weapon_name.value = L:Get(name)
                self.m_bullets_mult.value = memory.read_int(self:GetCurrentWeapon() + 0x0120)
                self.m_damage.value = memory.read_float(self:GetCurrentWeapon() + 0x00B0)
                self.m_penetration.value = memory.read_float(self:GetCurrentWeapon() + 0x0110)
                self.m_range.value = memory.read_float(self:GetCurrentWeapon() + 0x028C)
                self.m_spread.value = memory.read_float(self:GetCurrentWeapon() + 0x0074)
                self.m_reload_speed.value = memory.read_float(self:GetCurrentWeapon() + 0x0134)
                self.m_vehicle_damage_mod.value = memory.read_float(self:GetCurrentWeapon() + 0x00D4)
                self.m_damage_type.value = damage_types[memory.read_int(self:GetCurrentWeapon() + 0x0020) - 1][2]
                self.m_special_ammo.value = special_ammo[memory.read_int(self:GetCurrentWeaponAmmoInfo() + 0x003C) + 1][2]
            end)
        end)
    end
end

return Weapons