pluto_use class, new

local T = require('languages.trans')
local sha256 = require('crypto').sha256
local script_custom = filesystem.scripts_dir() .. '/MrRobot/user_modules'
local json = soup.json

class ModuleLoader
    function __construct(root)
        if root:isValid() then root:delete() end
        root = menu.my_root()

        self.root = root:list(
            T'Module Loader', 
            {T'rmodloader'}, 
            T'Load custom modules into the script, within your custom module you can extend the functionality of the script and add things that you want into it with very little effort, this cannot be used for loading scripts like AcjokerScript, NovaScript, LanceScript, Kepler, SoulScript, HexaScript',
            nil,
            function()
                self.flag = false
            end,
            || -> self:update_modules()
        )

        self.total_files = #filesystem.list_files(script_custom)
        self.flag = false
        self.update = false

        self.root:action(T'Open Folder', {}, T'Open custom modules folder', function()
            util.open_folder(script_custom)
        end)

        self.module_repo = self.root:list(T'Modules Repository', {}, T'Custom modules repository for downloading custom modules', function()
            if not async_http.have_access() then
                util.toast(T'Internet access is required to use this feature!, uncheck "Disable Internet Access" in the settings to enable it')
                self.module_repo:focus()
            end
        end)
        async_http.init('mrrobot.sodamnez.xyz', '/modules_repo/index.php', function(body, headers, status_code)
            if status_code == 200 then
                local modules = json.decode(body)
                for modules as m do
                    local name = m.name
                    if filesystem.exists(script_custom .. '/' .. m.name) then
                        local fp <close> = assert(io.open(script_custom .. '/' .. m.name, 'rb'))
                        local content = fp:read('*all')
                        fp:close()

                        if sha256(content) ~= m.hash then
                            async_http.init('mrrobot.sodamnez.xyz', m.path, function(body, headers, status_code)
                                if status_code == 200 then
                                    local fp <close> = assert(io.open(script_custom .. '/' .. name, 'wb'))
                                    fp:write(body)
                                    fp:close()
                                    util.display_success(T:T('Successfully updated module %s', name))
                                elseif status_code == 404 then
                                    util.display_error(T:T('Failed to update module %s (%d - NOT FOUND)', name, status_code))
                                end
                            end)

                            async_http.dispatch()
                        end
                    end

                    local version = m.version
                    local author = m.author

                    self.module_repo:action(tostring(name), {}, 'Author: ' .. author .. '\nVersion: ' .. version, function()
                        async_http.init('mrrobot.sodamnez.xyz', m.path, function(body, headers, status_code)
                            if status_code == 200 then
                                local fp <close> = assert(io.open(script_custom .. '/' .. name, 'wb'))
                                fp:write(body)
                                fp:close()
                                util.display_success(T:T('Successfully downloaded module %s', name))
                            elseif status_code == 404 then
                                util.display_error(T:T('Failed to download module %s (%d - NOT FOUND)', name, status_code))
                            end
                        end, function(reason)
                            util.display_error(T:T('Failed to download module %s', name))
                        end)

                        async_http.dispatch()
                    end)
                end
            end
        end)

        async_http.dispatch()
        
        self:update_modules_list()

        self.root:divider('')
        self:find_modules()
    end

    function find_modules()
        for filesystem.list_files(script_custom) as file do
            if filesystem.is_dir(file) then goto continue end
            local name = file:match('^.+/(.+)$'):gsub('\\', '/'):sub(14)
            local mod_list = self.root:list(name, {}, '')
            local settings_divider = mod_list:divider(T'Settings')
            local redirect = mod_list:toggle(T'Root Redirect', {}, T'Redirect the root of the menu to module loader instead of the scripts root', function(state) end, true)
            local invis_divider = mod_list:divider('')
            mod_list:action(T'Load', {}, T'Load the module', function()
                settings_divider.visible = false
                redirect.visible = false
                invis_divider.visible = false

                local loading_start = util.current_time_millis()
                if redirect.value then menu.my_root = || -> mod_list end
                local load_module = true
                local fp <close> = assert(io.open(file, 'rb'))
                local content = fp:read('*all')
                fp:close()

                if content:match('raw.githubusercontent.com') then
                    load_module = false
                elseif content:match('/hexarobi/stand-lua-auto-updater/main/auto-updater.lua') then
                    load_module = false
                elseif content:match('pcall(require, "auto-updater")') then
                    load_module = false
                elseif content:match('auto-updater') then
                    load_module = false
                end
                
                if load_module then
                    if package.loaded[name] ~= nil then
                        util.display_error(T:T('Module already loaded: %s', name))
                    else
                        menu.ref_by_rel_path(mod_list, T'Load').visible = false
                        menu.ref_by_rel_path(mod_list, T'Delete').visible = false
                        local status, err = pcall(require, $'user_modules.{name:sub(0, -6)}')
                        if not status then
                            util.log(err)
                        else
                            local err_type = type(err)
                            if err_type == 'table' then
                                -- class support
                                local instance = new err()
                            elseif err_type == 'function' then
                                -- function support
                                err()
                            end
                            util.display_success(T:T('%s loaded', name))
                        end
                    end
                else
                    util.toast(T'Wtf you doing? this module is using an auto-updater, aborting load')
                end
                if redirect then menu.my_root = || -> root end
                local loading_end = util.current_time_millis()
                util.log(T'Loaded module ' .. name .. ' in ' .. (loading_end - loading_start) .. 'ms')
            end)
            mod_list:action(T'Delete', {}, T'Delete the module', function()
                io.remove(script_custom .. '/' .. name)
                if mod_list:isValid() then mod_list:delete() end
            end)

            ::continue::
        end
    end

    function update_modules_list()
        self.root:action(T'Update Module List', {}, T'Manually update modules list', function()
            local children = self.root:getChildren()
            for i = 0, 3 do table.remove(children, 1) end

            for children as child do
                if child:isValid() then
                    child:delete()
                end
            end

            self:find_modules()
        end)
    end

    function update_modules()
        if not self.update then
            self.update = true
            util.create_tick_handler(function()
                local item = menu.get_current_menu_list()
                if item.menu_name ~= self.root.menu_name then
                    self.update = false
                    return false
                end

                self:update_modules()
                util.yield(1000)
            end)
        end
    end
end

return ModuleLoader